# Summary statistics of all features as well as assembly programs
g: Genome = input;
geneCounts: output sum[string][string] of int;
exonCounts: output sum[string][string] of int;
mRNACounts: output sum[string][string] of int;
CDSCounts: output sum[string][string] of int;

geneMean: output mean[string][string] of int;
exonMean: output mean[string][string] of int;
mRNAMean: output mean[string][string] of int;
CDSMean: output mean[string][string] of int;
AssemblerCounts: output sum[string][string] of int;

foreach(i:int; def(g.sequence[i])){
    # iterate over all features for a this sequence
    # we need to load the feature info from the features.seq 
    fdata := getFeature(g.refseq, g.sequence[i].accession);
	foreach(j:int; def(fdata.feature[j])){
		flength := fdata.feature[j].end-fdata.feature[j].start;
		if (match("gene",fdata.feature[j].ftype)){
		  	geneCounts [g.refseq][g.taxid]<< 1;
		  	geneMean[g.refseq][g.taxid]<< flength;  	
		}	
	    if (match("exon",fdata.feature[j].ftype)){
		  	exonCounts [g.refseq][g.taxid]<< 1;
		  	exonMean [g.refseq][g.taxid]<< flength;  	
		}
		if (match("mRNA",fdata.feature[j].ftype)){
		  	mRNACounts [g.refseq][g.taxid]<< 1;
		  	mRNAMean [g.refseq][g.taxid]<< flength;  	
		  	}	
			    
	    if (match("CDS",fdata.feature[j].ftype)){
		  	CDSCounts [g.refseq][g.taxid]<< 1;
		  	CDSMean [g.refseq][g.taxid]<< flength;  	
		  	}
	
	}
  
  	# Assemblers
  	adata := getAssembler(g.refseq);
	foreach(k:int; def(adata.assembler[k])){
	  	 AssemblerCounts [g.taxid][adata.assembler[k].name]<< 1;
	}

}
