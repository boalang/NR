// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

package boa.types;

public final class Transport {
  private Transport() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code boa.types.STATE}
   */
  public enum STATE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>Alabama = 1;</code>
     */
    Alabama(0, 1),
    /**
     * <code>Montana = 30;</code>
     */
    Montana(1, 30),
    /**
     * <code>Nebraska = 31;</code>
     */
    Nebraska(2, 31),
    /**
     * <code>Alaska = 2;</code>
     */
    Alaska(3, 2),
    /**
     * <code>Nevada = 32;</code>
     */
    Nevada(4, 32),
    /**
     * <code>Arizona = 4;</code>
     */
    Arizona(5, 4),
    /**
     * <code>New_Hampshire = 33;</code>
     */
    New_Hampshire(6, 33),
    /**
     * <code>Arkansas = 5;</code>
     */
    Arkansas(7, 5),
    /**
     * <code>New_Jersey = 34;</code>
     */
    New_Jersey(8, 34),
    /**
     * <code>California = 6;</code>
     */
    California(9, 6),
    /**
     * <code>New_Mexico = 35;</code>
     */
    New_Mexico(10, 35),
    /**
     * <code>Colorado = 8;</code>
     */
    Colorado(11, 8),
    /**
     * <code>New_York = 36;</code>
     */
    New_York(12, 36),
    /**
     * <code>Connecticut = 9;</code>
     */
    Connecticut(13, 9),
    /**
     * <code>North_Carolina = 37;</code>
     */
    North_Carolina(14, 37),
    /**
     * <code>Delaware = 10;</code>
     */
    Delaware(15, 10),
    /**
     * <code>North_Dakota = 38;</code>
     */
    North_Dakota(16, 38),
    /**
     * <code>District_of_Columbia = 11;</code>
     */
    District_of_Columbia(17, 11),
    /**
     * <code>Ohio = 39;</code>
     */
    Ohio(18, 39),
    /**
     * <code>Florida = 12;</code>
     */
    Florida(19, 12),
    /**
     * <code>Oklahoma = 40;</code>
     */
    Oklahoma(20, 40),
    /**
     * <code>Georgia = 13;</code>
     */
    Georgia(21, 13),
    /**
     * <code>Oregon = 41;</code>
     */
    Oregon(22, 41),
    /**
     * <code>Hawaii = 15;</code>
     */
    Hawaii(23, 15),
    /**
     * <code>Pennsylvania = 42;</code>
     */
    Pennsylvania(24, 42),
    /**
     * <code>Idaho = 16;</code>
     */
    Idaho(25, 16),
    /**
     * <code>Puerto_Rico = 43;</code>
     */
    Puerto_Rico(26, 43),
    /**
     * <code>Illinois = 17;</code>
     */
    Illinois(27, 17),
    /**
     * <code>Rhode_Island = 44;</code>
     */
    Rhode_Island(28, 44),
    /**
     * <code>Indiana = 18;</code>
     */
    Indiana(29, 18),
    /**
     * <code>South_Carolina = 45;</code>
     */
    South_Carolina(30, 45),
    /**
     * <code>Iowa = 19;</code>
     */
    Iowa(31, 19),
    /**
     * <code>South_Dakota = 46;</code>
     */
    South_Dakota(32, 46),
    /**
     * <code>Kansas = 20;</code>
     */
    Kansas(33, 20),
    /**
     * <code>Tennessee = 47;</code>
     */
    Tennessee(34, 47),
    /**
     * <code>Kentucky = 21;</code>
     */
    Kentucky(35, 21),
    /**
     * <code>Texas = 48;</code>
     */
    Texas(36, 48),
    /**
     * <code>Louisiana = 22;</code>
     */
    Louisiana(37, 22),
    /**
     * <code>Utah = 49;</code>
     */
    Utah(38, 49),
    /**
     * <code>Maine = 23;</code>
     */
    Maine(39, 23),
    /**
     * <code>Vermont = 50;</code>
     */
    Vermont(40, 50),
    /**
     * <code>Maryland = 24;</code>
     */
    Maryland(41, 24),
    /**
     * <code>Virgin_Islands = 52;</code>
     */
    Virgin_Islands(42, 52),
    /**
     * <code>Massachusetts = 25;</code>
     */
    Massachusetts(43, 25),
    /**
     * <code>Virginia = 51;</code>
     */
    Virginia(44, 51),
    /**
     * <code>Michigan = 26;</code>
     */
    Michigan(45, 26),
    /**
     * <code>Washington = 53;</code>
     */
    Washington(46, 53),
    /**
     * <code>Minnesota = 27;</code>
     */
    Minnesota(47, 27),
    /**
     * <code>West_Virginia = 54;</code>
     */
    West_Virginia(48, 54),
    /**
     * <code>Mississippi = 28;</code>
     */
    Mississippi(49, 28),
    /**
     * <code>Wisconsin = 55;</code>
     */
    Wisconsin(50, 55),
    /**
     * <code>Missouri = 29;</code>
     */
    Missouri(51, 29),
    /**
     * <code>Wyoming = 56;</code>
     */
    Wyoming(52, 56),
    ;

    /**
     * <code>Alabama = 1;</code>
     */
    public static final int Alabama_VALUE = 1;
    /**
     * <code>Montana = 30;</code>
     */
    public static final int Montana_VALUE = 30;
    /**
     * <code>Nebraska = 31;</code>
     */
    public static final int Nebraska_VALUE = 31;
    /**
     * <code>Alaska = 2;</code>
     */
    public static final int Alaska_VALUE = 2;
    /**
     * <code>Nevada = 32;</code>
     */
    public static final int Nevada_VALUE = 32;
    /**
     * <code>Arizona = 4;</code>
     */
    public static final int Arizona_VALUE = 4;
    /**
     * <code>New_Hampshire = 33;</code>
     */
    public static final int New_Hampshire_VALUE = 33;
    /**
     * <code>Arkansas = 5;</code>
     */
    public static final int Arkansas_VALUE = 5;
    /**
     * <code>New_Jersey = 34;</code>
     */
    public static final int New_Jersey_VALUE = 34;
    /**
     * <code>California = 6;</code>
     */
    public static final int California_VALUE = 6;
    /**
     * <code>New_Mexico = 35;</code>
     */
    public static final int New_Mexico_VALUE = 35;
    /**
     * <code>Colorado = 8;</code>
     */
    public static final int Colorado_VALUE = 8;
    /**
     * <code>New_York = 36;</code>
     */
    public static final int New_York_VALUE = 36;
    /**
     * <code>Connecticut = 9;</code>
     */
    public static final int Connecticut_VALUE = 9;
    /**
     * <code>North_Carolina = 37;</code>
     */
    public static final int North_Carolina_VALUE = 37;
    /**
     * <code>Delaware = 10;</code>
     */
    public static final int Delaware_VALUE = 10;
    /**
     * <code>North_Dakota = 38;</code>
     */
    public static final int North_Dakota_VALUE = 38;
    /**
     * <code>District_of_Columbia = 11;</code>
     */
    public static final int District_of_Columbia_VALUE = 11;
    /**
     * <code>Ohio = 39;</code>
     */
    public static final int Ohio_VALUE = 39;
    /**
     * <code>Florida = 12;</code>
     */
    public static final int Florida_VALUE = 12;
    /**
     * <code>Oklahoma = 40;</code>
     */
    public static final int Oklahoma_VALUE = 40;
    /**
     * <code>Georgia = 13;</code>
     */
    public static final int Georgia_VALUE = 13;
    /**
     * <code>Oregon = 41;</code>
     */
    public static final int Oregon_VALUE = 41;
    /**
     * <code>Hawaii = 15;</code>
     */
    public static final int Hawaii_VALUE = 15;
    /**
     * <code>Pennsylvania = 42;</code>
     */
    public static final int Pennsylvania_VALUE = 42;
    /**
     * <code>Idaho = 16;</code>
     */
    public static final int Idaho_VALUE = 16;
    /**
     * <code>Puerto_Rico = 43;</code>
     */
    public static final int Puerto_Rico_VALUE = 43;
    /**
     * <code>Illinois = 17;</code>
     */
    public static final int Illinois_VALUE = 17;
    /**
     * <code>Rhode_Island = 44;</code>
     */
    public static final int Rhode_Island_VALUE = 44;
    /**
     * <code>Indiana = 18;</code>
     */
    public static final int Indiana_VALUE = 18;
    /**
     * <code>South_Carolina = 45;</code>
     */
    public static final int South_Carolina_VALUE = 45;
    /**
     * <code>Iowa = 19;</code>
     */
    public static final int Iowa_VALUE = 19;
    /**
     * <code>South_Dakota = 46;</code>
     */
    public static final int South_Dakota_VALUE = 46;
    /**
     * <code>Kansas = 20;</code>
     */
    public static final int Kansas_VALUE = 20;
    /**
     * <code>Tennessee = 47;</code>
     */
    public static final int Tennessee_VALUE = 47;
    /**
     * <code>Kentucky = 21;</code>
     */
    public static final int Kentucky_VALUE = 21;
    /**
     * <code>Texas = 48;</code>
     */
    public static final int Texas_VALUE = 48;
    /**
     * <code>Louisiana = 22;</code>
     */
    public static final int Louisiana_VALUE = 22;
    /**
     * <code>Utah = 49;</code>
     */
    public static final int Utah_VALUE = 49;
    /**
     * <code>Maine = 23;</code>
     */
    public static final int Maine_VALUE = 23;
    /**
     * <code>Vermont = 50;</code>
     */
    public static final int Vermont_VALUE = 50;
    /**
     * <code>Maryland = 24;</code>
     */
    public static final int Maryland_VALUE = 24;
    /**
     * <code>Virgin_Islands = 52;</code>
     */
    public static final int Virgin_Islands_VALUE = 52;
    /**
     * <code>Massachusetts = 25;</code>
     */
    public static final int Massachusetts_VALUE = 25;
    /**
     * <code>Virginia = 51;</code>
     */
    public static final int Virginia_VALUE = 51;
    /**
     * <code>Michigan = 26;</code>
     */
    public static final int Michigan_VALUE = 26;
    /**
     * <code>Washington = 53;</code>
     */
    public static final int Washington_VALUE = 53;
    /**
     * <code>Minnesota = 27;</code>
     */
    public static final int Minnesota_VALUE = 27;
    /**
     * <code>West_Virginia = 54;</code>
     */
    public static final int West_Virginia_VALUE = 54;
    /**
     * <code>Mississippi = 28;</code>
     */
    public static final int Mississippi_VALUE = 28;
    /**
     * <code>Wisconsin = 55;</code>
     */
    public static final int Wisconsin_VALUE = 55;
    /**
     * <code>Missouri = 29;</code>
     */
    public static final int Missouri_VALUE = 29;
    /**
     * <code>Wyoming = 56;</code>
     */
    public static final int Wyoming_VALUE = 56;


    public final int getNumber() { return value; }

    public static STATE valueOf(int value) {
      switch (value) {
        case 1: return Alabama;
        case 30: return Montana;
        case 31: return Nebraska;
        case 2: return Alaska;
        case 32: return Nevada;
        case 4: return Arizona;
        case 33: return New_Hampshire;
        case 5: return Arkansas;
        case 34: return New_Jersey;
        case 6: return California;
        case 35: return New_Mexico;
        case 8: return Colorado;
        case 36: return New_York;
        case 9: return Connecticut;
        case 37: return North_Carolina;
        case 10: return Delaware;
        case 38: return North_Dakota;
        case 11: return District_of_Columbia;
        case 39: return Ohio;
        case 12: return Florida;
        case 40: return Oklahoma;
        case 13: return Georgia;
        case 41: return Oregon;
        case 15: return Hawaii;
        case 42: return Pennsylvania;
        case 16: return Idaho;
        case 43: return Puerto_Rico;
        case 17: return Illinois;
        case 44: return Rhode_Island;
        case 18: return Indiana;
        case 45: return South_Carolina;
        case 19: return Iowa;
        case 46: return South_Dakota;
        case 20: return Kansas;
        case 47: return Tennessee;
        case 21: return Kentucky;
        case 48: return Texas;
        case 22: return Louisiana;
        case 49: return Utah;
        case 23: return Maine;
        case 50: return Vermont;
        case 24: return Maryland;
        case 52: return Virgin_Islands;
        case 25: return Massachusetts;
        case 51: return Virginia;
        case 26: return Michigan;
        case 53: return Washington;
        case 27: return Minnesota;
        case 54: return West_Virginia;
        case 28: return Mississippi;
        case 55: return Wisconsin;
        case 29: return Missouri;
        case 56: return Wyoming;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<STATE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<STATE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<STATE>() {
            public STATE findValueByNumber(int number) {
              return STATE.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return boa.types.Transport.getDescriptor().getEnumTypes().get(0);
    }

    private static final STATE[] VALUES = values();

    public static STATE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private STATE(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:boa.types.STATE)
  }

  public interface CrashOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .boa.types.STATE state = 1;
    /**
     * <code>required .boa.types.STATE state = 1;</code>
     */
    boolean hasState();
    /**
     * <code>required .boa.types.STATE state = 1;</code>
     */
    boa.types.Transport.STATE getState();

    // required int32 ST_CASE = 2;
    /**
     * <code>required int32 ST_CASE = 2;</code>
     */
    boolean hasSTCASE();
    /**
     * <code>required int32 ST_CASE = 2;</code>
     */
    int getSTCASE();

    // required int32 VE_TOTAL = 3;
    /**
     * <code>required int32 VE_TOTAL = 3;</code>
     */
    boolean hasVETOTAL();
    /**
     * <code>required int32 VE_TOTAL = 3;</code>
     */
    int getVETOTAL();

    // required int32 VE_FORMS = 4;
    /**
     * <code>required int32 VE_FORMS = 4;</code>
     */
    boolean hasVEFORMS();
    /**
     * <code>required int32 VE_FORMS = 4;</code>
     */
    int getVEFORMS();

    // required int32 PVH_INVL = 5;
    /**
     * <code>required int32 PVH_INVL = 5;</code>
     */
    boolean hasPVHINVL();
    /**
     * <code>required int32 PVH_INVL = 5;</code>
     */
    int getPVHINVL();

    // required int32 PEDS = 6;
    /**
     * <code>required int32 PEDS = 6;</code>
     */
    boolean hasPEDS();
    /**
     * <code>required int32 PEDS = 6;</code>
     */
    int getPEDS();

    // required int32 PERNOTMVIT = 7;
    /**
     * <code>required int32 PERNOTMVIT = 7;</code>
     */
    boolean hasPERNOTMVIT();
    /**
     * <code>required int32 PERNOTMVIT = 7;</code>
     */
    int getPERNOTMVIT();

    // required int32 PERMVIT = 8;
    /**
     * <code>required int32 PERMVIT = 8;</code>
     */
    boolean hasPERMVIT();
    /**
     * <code>required int32 PERMVIT = 8;</code>
     */
    int getPERMVIT();

    // required int32 person_count = 9;
    /**
     * <code>required int32 person_count = 9;</code>
     */
    boolean hasPersonCount();
    /**
     * <code>required int32 person_count = 9;</code>
     */
    int getPersonCount();

    // required int32 COUNTY = 10;
    /**
     * <code>required int32 COUNTY = 10;</code>
     */
    boolean hasCOUNTY();
    /**
     * <code>required int32 COUNTY = 10;</code>
     */
    int getCOUNTY();

    // required int32 CITY = 11;
    /**
     * <code>required int32 CITY = 11;</code>
     */
    boolean hasCITY();
    /**
     * <code>required int32 CITY = 11;</code>
     */
    int getCITY();

    // required int32 DAY = 12;
    /**
     * <code>required int32 DAY = 12;</code>
     */
    boolean hasDAY();
    /**
     * <code>required int32 DAY = 12;</code>
     */
    int getDAY();

    // required int32 MONTH = 13;
    /**
     * <code>required int32 MONTH = 13;</code>
     */
    boolean hasMONTH();
    /**
     * <code>required int32 MONTH = 13;</code>
     */
    int getMONTH();

    // required int32 YEAR = 14;
    /**
     * <code>required int32 YEAR = 14;</code>
     */
    boolean hasYEAR();
    /**
     * <code>required int32 YEAR = 14;</code>
     */
    int getYEAR();

    // required int32 DAY_WEEK = 15;
    /**
     * <code>required int32 DAY_WEEK = 15;</code>
     */
    boolean hasDAYWEEK();
    /**
     * <code>required int32 DAY_WEEK = 15;</code>
     */
    int getDAYWEEK();

    // required int32 HOUR = 16;
    /**
     * <code>required int32 HOUR = 16;</code>
     */
    boolean hasHOUR();
    /**
     * <code>required int32 HOUR = 16;</code>
     */
    int getHOUR();

    // required int32 MINUTE = 17;
    /**
     * <code>required int32 MINUTE = 17;</code>
     */
    boolean hasMINUTE();
    /**
     * <code>required int32 MINUTE = 17;</code>
     */
    int getMINUTE();

    // required int32 NHS = 18;
    /**
     * <code>required int32 NHS = 18;</code>
     */
    boolean hasNHS();
    /**
     * <code>required int32 NHS = 18;</code>
     */
    int getNHS();

    // required int32 RUR_URB = 19;
    /**
     * <code>required int32 RUR_URB = 19;</code>
     */
    boolean hasRURURB();
    /**
     * <code>required int32 RUR_URB = 19;</code>
     */
    int getRURURB();

    // required int32 FUNC_SYS = 20;
    /**
     * <code>required int32 FUNC_SYS = 20;</code>
     */
    boolean hasFUNCSYS();
    /**
     * <code>required int32 FUNC_SYS = 20;</code>
     */
    int getFUNCSYS();

    // required int32 RD_OWNER = 21;
    /**
     * <code>required int32 RD_OWNER = 21;</code>
     */
    boolean hasRDOWNER();
    /**
     * <code>required int32 RD_OWNER = 21;</code>
     */
    int getRDOWNER();

    // required int32 ROUTE = 22;
    /**
     * <code>required int32 ROUTE = 22;</code>
     */
    boolean hasROUTE();
    /**
     * <code>required int32 ROUTE = 22;</code>
     */
    int getROUTE();

    // required string TWAY_ID = 23;
    /**
     * <code>required string TWAY_ID = 23;</code>
     */
    boolean hasTWAYID();
    /**
     * <code>required string TWAY_ID = 23;</code>
     */
    java.lang.String getTWAYID();
    /**
     * <code>required string TWAY_ID = 23;</code>
     */
    com.google.protobuf.ByteString
        getTWAYIDBytes();

    // optional string TWAY_ID2 = 24;
    /**
     * <code>optional string TWAY_ID2 = 24;</code>
     */
    boolean hasTWAYID2();
    /**
     * <code>optional string TWAY_ID2 = 24;</code>
     */
    java.lang.String getTWAYID2();
    /**
     * <code>optional string TWAY_ID2 = 24;</code>
     */
    com.google.protobuf.ByteString
        getTWAYID2Bytes();

    // required int32 MILEPT = 25;
    /**
     * <code>required int32 MILEPT = 25;</code>
     */
    boolean hasMILEPT();
    /**
     * <code>required int32 MILEPT = 25;</code>
     */
    int getMILEPT();

    // optional float LATITUDE = 26;
    /**
     * <code>optional float LATITUDE = 26;</code>
     */
    boolean hasLATITUDE();
    /**
     * <code>optional float LATITUDE = 26;</code>
     */
    float getLATITUDE();

    // optional float LONGITUD = 27;
    /**
     * <code>optional float LONGITUD = 27;</code>
     */
    boolean hasLONGITUD();
    /**
     * <code>optional float LONGITUD = 27;</code>
     */
    float getLONGITUD();

    // required int32 SP_JUR = 28;
    /**
     * <code>required int32 SP_JUR = 28;</code>
     */
    boolean hasSPJUR();
    /**
     * <code>required int32 SP_JUR = 28;</code>
     */
    int getSPJUR();

    // required int32 HARM_EV = 29;
    /**
     * <code>required int32 HARM_EV = 29;</code>
     */
    boolean hasHARMEV();
    /**
     * <code>required int32 HARM_EV = 29;</code>
     */
    int getHARMEV();

    // required int32 MAN_COLL = 30;
    /**
     * <code>required int32 MAN_COLL = 30;</code>
     */
    boolean hasMANCOLL();
    /**
     * <code>required int32 MAN_COLL = 30;</code>
     */
    int getMANCOLL();

    // required int32 RELJCT1 = 31;
    /**
     * <code>required int32 RELJCT1 = 31;</code>
     */
    boolean hasRELJCT1();
    /**
     * <code>required int32 RELJCT1 = 31;</code>
     */
    int getRELJCT1();

    // required int32 RELJCT2 = 32;
    /**
     * <code>required int32 RELJCT2 = 32;</code>
     */
    boolean hasRELJCT2();
    /**
     * <code>required int32 RELJCT2 = 32;</code>
     */
    int getRELJCT2();

    // required int32 TYP_INT = 33;
    /**
     * <code>required int32 TYP_INT = 33;</code>
     */
    boolean hasTYPINT();
    /**
     * <code>required int32 TYP_INT = 33;</code>
     */
    int getTYPINT();

    // required int32 WRK_ZONE = 34;
    /**
     * <code>required int32 WRK_ZONE = 34;</code>
     */
    boolean hasWRKZONE();
    /**
     * <code>required int32 WRK_ZONE = 34;</code>
     */
    int getWRKZONE();

    // required int32 REL_ROAD = 35;
    /**
     * <code>required int32 REL_ROAD = 35;</code>
     */
    boolean hasRELROAD();
    /**
     * <code>required int32 REL_ROAD = 35;</code>
     */
    int getRELROAD();

    // required int32 LGT_COND = 36;
    /**
     * <code>required int32 LGT_COND = 36;</code>
     */
    boolean hasLGTCOND();
    /**
     * <code>required int32 LGT_COND = 36;</code>
     */
    int getLGTCOND();

    // required int32 WEATHER1 = 37;
    /**
     * <code>required int32 WEATHER1 = 37;</code>
     */
    boolean hasWEATHER1();
    /**
     * <code>required int32 WEATHER1 = 37;</code>
     */
    int getWEATHER1();

    // required int32 WEATHER2 = 38;
    /**
     * <code>required int32 WEATHER2 = 38;</code>
     */
    boolean hasWEATHER2();
    /**
     * <code>required int32 WEATHER2 = 38;</code>
     */
    int getWEATHER2();

    // required int32 WEATHER = 39;
    /**
     * <code>required int32 WEATHER = 39;</code>
     */
    boolean hasWEATHER();
    /**
     * <code>required int32 WEATHER = 39;</code>
     */
    int getWEATHER();

    // required int32 SCH_BUS = 40;
    /**
     * <code>required int32 SCH_BUS = 40;</code>
     */
    boolean hasSCHBUS();
    /**
     * <code>required int32 SCH_BUS = 40;</code>
     */
    int getSCHBUS();

    // required string RAIL = 41;
    /**
     * <code>required string RAIL = 41;</code>
     */
    boolean hasRAIL();
    /**
     * <code>required string RAIL = 41;</code>
     */
    java.lang.String getRAIL();
    /**
     * <code>required string RAIL = 41;</code>
     */
    com.google.protobuf.ByteString
        getRAILBytes();

    // required int32 NOT_HOUR = 42;
    /**
     * <code>required int32 NOT_HOUR = 42;</code>
     */
    boolean hasNOTHOUR();
    /**
     * <code>required int32 NOT_HOUR = 42;</code>
     */
    int getNOTHOUR();

    // required int32 NOT_MIN = 43;
    /**
     * <code>required int32 NOT_MIN = 43;</code>
     */
    boolean hasNOTMIN();
    /**
     * <code>required int32 NOT_MIN = 43;</code>
     */
    int getNOTMIN();

    // required int32 ARR_HOUR = 44;
    /**
     * <code>required int32 ARR_HOUR = 44;</code>
     */
    boolean hasARRHOUR();
    /**
     * <code>required int32 ARR_HOUR = 44;</code>
     */
    int getARRHOUR();

    // required int32 ARR_MIN = 45;
    /**
     * <code>required int32 ARR_MIN = 45;</code>
     */
    boolean hasARRMIN();
    /**
     * <code>required int32 ARR_MIN = 45;</code>
     */
    int getARRMIN();

    // required int32 HOSP_HR = 46;
    /**
     * <code>required int32 HOSP_HR = 46;</code>
     */
    boolean hasHOSPHR();
    /**
     * <code>required int32 HOSP_HR = 46;</code>
     */
    int getHOSPHR();

    // required int32 HOSP_MN = 47;
    /**
     * <code>required int32 HOSP_MN = 47;</code>
     */
    boolean hasHOSPMN();
    /**
     * <code>required int32 HOSP_MN = 47;</code>
     */
    int getHOSPMN();

    // required int32 CF1 = 48;
    /**
     * <code>required int32 CF1 = 48;</code>
     */
    boolean hasCF1();
    /**
     * <code>required int32 CF1 = 48;</code>
     */
    int getCF1();

    // required int32 CF2 = 49;
    /**
     * <code>required int32 CF2 = 49;</code>
     */
    boolean hasCF2();
    /**
     * <code>required int32 CF2 = 49;</code>
     */
    int getCF2();

    // required int32 CF3 = 50;
    /**
     * <code>required int32 CF3 = 50;</code>
     */
    boolean hasCF3();
    /**
     * <code>required int32 CF3 = 50;</code>
     */
    int getCF3();

    // required int32 FATALS = 51;
    /**
     * <code>required int32 FATALS = 51;</code>
     */
    boolean hasFATALS();
    /**
     * <code>required int32 FATALS = 51;</code>
     */
    int getFATALS();

    // required int32 DRUNK_DR = 52;
    /**
     * <code>required int32 DRUNK_DR = 52;</code>
     */
    boolean hasDRUNKDR();
    /**
     * <code>required int32 DRUNK_DR = 52;</code>
     */
    int getDRUNKDR();

    // repeated .boa.types.Person persons = 53;
    /**
     * <code>repeated .boa.types.Person persons = 53;</code>
     */
    java.util.List<boa.types.Transport.Person> 
        getPersonsList();
    /**
     * <code>repeated .boa.types.Person persons = 53;</code>
     */
    boa.types.Transport.Person getPersons(int index);
    /**
     * <code>repeated .boa.types.Person persons = 53;</code>
     */
    int getPersonsCount();
    /**
     * <code>repeated .boa.types.Person persons = 53;</code>
     */
    java.util.List<? extends boa.types.Transport.PersonOrBuilder> 
        getPersonsOrBuilderList();
    /**
     * <code>repeated .boa.types.Person persons = 53;</code>
     */
    boa.types.Transport.PersonOrBuilder getPersonsOrBuilder(
        int index);

    // repeated .boa.types.Vehicle vehicle = 54;
    /**
     * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
     */
    java.util.List<boa.types.Transport.Vehicle> 
        getVehicleList();
    /**
     * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
     */
    boa.types.Transport.Vehicle getVehicle(int index);
    /**
     * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
     */
    int getVehicleCount();
    /**
     * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
     */
    java.util.List<? extends boa.types.Transport.VehicleOrBuilder> 
        getVehicleOrBuilderList();
    /**
     * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
     */
    boa.types.Transport.VehicleOrBuilder getVehicleOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code boa.types.Crash}
   */
  public static final class Crash extends
      com.google.protobuf.GeneratedMessage
      implements CrashOrBuilder {
    // Use Crash.newBuilder() to construct.
    private Crash(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Crash(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Crash defaultInstance;
    public static Crash getDefaultInstance() {
      return defaultInstance;
    }

    public Crash getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Crash(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              boa.types.Transport.STATE value = boa.types.Transport.STATE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                state_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              sTCASE_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              vETOTAL_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              vEFORMS_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              pVHINVL_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              pEDS_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              pERNOTMVIT_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              pERMVIT_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              personCount_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              cOUNTY_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              cITY_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              dAY_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              mONTH_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              yEAR_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              dAYWEEK_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              hOUR_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              mINUTE_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              nHS_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              rURURB_ = input.readInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              fUNCSYS_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00100000;
              rDOWNER_ = input.readInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00200000;
              rOUTE_ = input.readInt32();
              break;
            }
            case 186: {
              bitField0_ |= 0x00400000;
              tWAYID_ = input.readBytes();
              break;
            }
            case 194: {
              bitField0_ |= 0x00800000;
              tWAYID2_ = input.readBytes();
              break;
            }
            case 200: {
              bitField0_ |= 0x01000000;
              mILEPT_ = input.readInt32();
              break;
            }
            case 213: {
              bitField0_ |= 0x02000000;
              lATITUDE_ = input.readFloat();
              break;
            }
            case 221: {
              bitField0_ |= 0x04000000;
              lONGITUD_ = input.readFloat();
              break;
            }
            case 224: {
              bitField0_ |= 0x08000000;
              sPJUR_ = input.readInt32();
              break;
            }
            case 232: {
              bitField0_ |= 0x10000000;
              hARMEV_ = input.readInt32();
              break;
            }
            case 240: {
              bitField0_ |= 0x20000000;
              mANCOLL_ = input.readInt32();
              break;
            }
            case 248: {
              bitField0_ |= 0x40000000;
              rELJCT1_ = input.readInt32();
              break;
            }
            case 256: {
              bitField0_ |= 0x80000000;
              rELJCT2_ = input.readInt32();
              break;
            }
            case 264: {
              bitField1_ |= 0x00000001;
              tYPINT_ = input.readInt32();
              break;
            }
            case 272: {
              bitField1_ |= 0x00000002;
              wRKZONE_ = input.readInt32();
              break;
            }
            case 280: {
              bitField1_ |= 0x00000004;
              rELROAD_ = input.readInt32();
              break;
            }
            case 288: {
              bitField1_ |= 0x00000008;
              lGTCOND_ = input.readInt32();
              break;
            }
            case 296: {
              bitField1_ |= 0x00000010;
              wEATHER1_ = input.readInt32();
              break;
            }
            case 304: {
              bitField1_ |= 0x00000020;
              wEATHER2_ = input.readInt32();
              break;
            }
            case 312: {
              bitField1_ |= 0x00000040;
              wEATHER_ = input.readInt32();
              break;
            }
            case 320: {
              bitField1_ |= 0x00000080;
              sCHBUS_ = input.readInt32();
              break;
            }
            case 330: {
              bitField1_ |= 0x00000100;
              rAIL_ = input.readBytes();
              break;
            }
            case 336: {
              bitField1_ |= 0x00000200;
              nOTHOUR_ = input.readInt32();
              break;
            }
            case 344: {
              bitField1_ |= 0x00000400;
              nOTMIN_ = input.readInt32();
              break;
            }
            case 352: {
              bitField1_ |= 0x00000800;
              aRRHOUR_ = input.readInt32();
              break;
            }
            case 360: {
              bitField1_ |= 0x00001000;
              aRRMIN_ = input.readInt32();
              break;
            }
            case 368: {
              bitField1_ |= 0x00002000;
              hOSPHR_ = input.readInt32();
              break;
            }
            case 376: {
              bitField1_ |= 0x00004000;
              hOSPMN_ = input.readInt32();
              break;
            }
            case 384: {
              bitField1_ |= 0x00008000;
              cF1_ = input.readInt32();
              break;
            }
            case 392: {
              bitField1_ |= 0x00010000;
              cF2_ = input.readInt32();
              break;
            }
            case 400: {
              bitField1_ |= 0x00020000;
              cF3_ = input.readInt32();
              break;
            }
            case 408: {
              bitField1_ |= 0x00040000;
              fATALS_ = input.readInt32();
              break;
            }
            case 416: {
              bitField1_ |= 0x00080000;
              dRUNKDR_ = input.readInt32();
              break;
            }
            case 426: {
              if (!((mutable_bitField1_ & 0x00100000) == 0x00100000)) {
                persons_ = new java.util.ArrayList<boa.types.Transport.Person>();
                mutable_bitField1_ |= 0x00100000;
              }
              persons_.add(input.readMessage(boa.types.Transport.Person.PARSER, extensionRegistry));
              break;
            }
            case 434: {
              if (!((mutable_bitField1_ & 0x00200000) == 0x00200000)) {
                vehicle_ = new java.util.ArrayList<boa.types.Transport.Vehicle>();
                mutable_bitField1_ |= 0x00200000;
              }
              vehicle_.add(input.readMessage(boa.types.Transport.Vehicle.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField1_ & 0x00100000) == 0x00100000)) {
          persons_ = java.util.Collections.unmodifiableList(persons_);
        }
        if (((mutable_bitField1_ & 0x00200000) == 0x00200000)) {
          vehicle_ = java.util.Collections.unmodifiableList(vehicle_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return boa.types.Transport.internal_static_boa_types_Crash_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return boa.types.Transport.internal_static_boa_types_Crash_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              boa.types.Transport.Crash.class, boa.types.Transport.Crash.Builder.class);
    }

    public static com.google.protobuf.Parser<Crash> PARSER =
        new com.google.protobuf.AbstractParser<Crash>() {
      public Crash parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Crash(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Crash> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    // required .boa.types.STATE state = 1;
    public static final int STATE_FIELD_NUMBER = 1;
    private boa.types.Transport.STATE state_;
    /**
     * <code>required .boa.types.STATE state = 1;</code>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .boa.types.STATE state = 1;</code>
     */
    public boa.types.Transport.STATE getState() {
      return state_;
    }

    // required int32 ST_CASE = 2;
    public static final int ST_CASE_FIELD_NUMBER = 2;
    private int sTCASE_;
    /**
     * <code>required int32 ST_CASE = 2;</code>
     */
    public boolean hasSTCASE() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 ST_CASE = 2;</code>
     */
    public int getSTCASE() {
      return sTCASE_;
    }

    // required int32 VE_TOTAL = 3;
    public static final int VE_TOTAL_FIELD_NUMBER = 3;
    private int vETOTAL_;
    /**
     * <code>required int32 VE_TOTAL = 3;</code>
     */
    public boolean hasVETOTAL() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 VE_TOTAL = 3;</code>
     */
    public int getVETOTAL() {
      return vETOTAL_;
    }

    // required int32 VE_FORMS = 4;
    public static final int VE_FORMS_FIELD_NUMBER = 4;
    private int vEFORMS_;
    /**
     * <code>required int32 VE_FORMS = 4;</code>
     */
    public boolean hasVEFORMS() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 VE_FORMS = 4;</code>
     */
    public int getVEFORMS() {
      return vEFORMS_;
    }

    // required int32 PVH_INVL = 5;
    public static final int PVH_INVL_FIELD_NUMBER = 5;
    private int pVHINVL_;
    /**
     * <code>required int32 PVH_INVL = 5;</code>
     */
    public boolean hasPVHINVL() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 PVH_INVL = 5;</code>
     */
    public int getPVHINVL() {
      return pVHINVL_;
    }

    // required int32 PEDS = 6;
    public static final int PEDS_FIELD_NUMBER = 6;
    private int pEDS_;
    /**
     * <code>required int32 PEDS = 6;</code>
     */
    public boolean hasPEDS() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 PEDS = 6;</code>
     */
    public int getPEDS() {
      return pEDS_;
    }

    // required int32 PERNOTMVIT = 7;
    public static final int PERNOTMVIT_FIELD_NUMBER = 7;
    private int pERNOTMVIT_;
    /**
     * <code>required int32 PERNOTMVIT = 7;</code>
     */
    public boolean hasPERNOTMVIT() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required int32 PERNOTMVIT = 7;</code>
     */
    public int getPERNOTMVIT() {
      return pERNOTMVIT_;
    }

    // required int32 PERMVIT = 8;
    public static final int PERMVIT_FIELD_NUMBER = 8;
    private int pERMVIT_;
    /**
     * <code>required int32 PERMVIT = 8;</code>
     */
    public boolean hasPERMVIT() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required int32 PERMVIT = 8;</code>
     */
    public int getPERMVIT() {
      return pERMVIT_;
    }

    // required int32 person_count = 9;
    public static final int PERSON_COUNT_FIELD_NUMBER = 9;
    private int personCount_;
    /**
     * <code>required int32 person_count = 9;</code>
     */
    public boolean hasPersonCount() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required int32 person_count = 9;</code>
     */
    public int getPersonCount() {
      return personCount_;
    }

    // required int32 COUNTY = 10;
    public static final int COUNTY_FIELD_NUMBER = 10;
    private int cOUNTY_;
    /**
     * <code>required int32 COUNTY = 10;</code>
     */
    public boolean hasCOUNTY() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required int32 COUNTY = 10;</code>
     */
    public int getCOUNTY() {
      return cOUNTY_;
    }

    // required int32 CITY = 11;
    public static final int CITY_FIELD_NUMBER = 11;
    private int cITY_;
    /**
     * <code>required int32 CITY = 11;</code>
     */
    public boolean hasCITY() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required int32 CITY = 11;</code>
     */
    public int getCITY() {
      return cITY_;
    }

    // required int32 DAY = 12;
    public static final int DAY_FIELD_NUMBER = 12;
    private int dAY_;
    /**
     * <code>required int32 DAY = 12;</code>
     */
    public boolean hasDAY() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required int32 DAY = 12;</code>
     */
    public int getDAY() {
      return dAY_;
    }

    // required int32 MONTH = 13;
    public static final int MONTH_FIELD_NUMBER = 13;
    private int mONTH_;
    /**
     * <code>required int32 MONTH = 13;</code>
     */
    public boolean hasMONTH() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required int32 MONTH = 13;</code>
     */
    public int getMONTH() {
      return mONTH_;
    }

    // required int32 YEAR = 14;
    public static final int YEAR_FIELD_NUMBER = 14;
    private int yEAR_;
    /**
     * <code>required int32 YEAR = 14;</code>
     */
    public boolean hasYEAR() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required int32 YEAR = 14;</code>
     */
    public int getYEAR() {
      return yEAR_;
    }

    // required int32 DAY_WEEK = 15;
    public static final int DAY_WEEK_FIELD_NUMBER = 15;
    private int dAYWEEK_;
    /**
     * <code>required int32 DAY_WEEK = 15;</code>
     */
    public boolean hasDAYWEEK() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>required int32 DAY_WEEK = 15;</code>
     */
    public int getDAYWEEK() {
      return dAYWEEK_;
    }

    // required int32 HOUR = 16;
    public static final int HOUR_FIELD_NUMBER = 16;
    private int hOUR_;
    /**
     * <code>required int32 HOUR = 16;</code>
     */
    public boolean hasHOUR() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>required int32 HOUR = 16;</code>
     */
    public int getHOUR() {
      return hOUR_;
    }

    // required int32 MINUTE = 17;
    public static final int MINUTE_FIELD_NUMBER = 17;
    private int mINUTE_;
    /**
     * <code>required int32 MINUTE = 17;</code>
     */
    public boolean hasMINUTE() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>required int32 MINUTE = 17;</code>
     */
    public int getMINUTE() {
      return mINUTE_;
    }

    // required int32 NHS = 18;
    public static final int NHS_FIELD_NUMBER = 18;
    private int nHS_;
    /**
     * <code>required int32 NHS = 18;</code>
     */
    public boolean hasNHS() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>required int32 NHS = 18;</code>
     */
    public int getNHS() {
      return nHS_;
    }

    // required int32 RUR_URB = 19;
    public static final int RUR_URB_FIELD_NUMBER = 19;
    private int rURURB_;
    /**
     * <code>required int32 RUR_URB = 19;</code>
     */
    public boolean hasRURURB() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>required int32 RUR_URB = 19;</code>
     */
    public int getRURURB() {
      return rURURB_;
    }

    // required int32 FUNC_SYS = 20;
    public static final int FUNC_SYS_FIELD_NUMBER = 20;
    private int fUNCSYS_;
    /**
     * <code>required int32 FUNC_SYS = 20;</code>
     */
    public boolean hasFUNCSYS() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>required int32 FUNC_SYS = 20;</code>
     */
    public int getFUNCSYS() {
      return fUNCSYS_;
    }

    // required int32 RD_OWNER = 21;
    public static final int RD_OWNER_FIELD_NUMBER = 21;
    private int rDOWNER_;
    /**
     * <code>required int32 RD_OWNER = 21;</code>
     */
    public boolean hasRDOWNER() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>required int32 RD_OWNER = 21;</code>
     */
    public int getRDOWNER() {
      return rDOWNER_;
    }

    // required int32 ROUTE = 22;
    public static final int ROUTE_FIELD_NUMBER = 22;
    private int rOUTE_;
    /**
     * <code>required int32 ROUTE = 22;</code>
     */
    public boolean hasROUTE() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>required int32 ROUTE = 22;</code>
     */
    public int getROUTE() {
      return rOUTE_;
    }

    // required string TWAY_ID = 23;
    public static final int TWAY_ID_FIELD_NUMBER = 23;
    private java.lang.Object tWAYID_;
    /**
     * <code>required string TWAY_ID = 23;</code>
     */
    public boolean hasTWAYID() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>required string TWAY_ID = 23;</code>
     */
    public java.lang.String getTWAYID() {
      java.lang.Object ref = tWAYID_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          tWAYID_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string TWAY_ID = 23;</code>
     */
    public com.google.protobuf.ByteString
        getTWAYIDBytes() {
      java.lang.Object ref = tWAYID_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tWAYID_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string TWAY_ID2 = 24;
    public static final int TWAY_ID2_FIELD_NUMBER = 24;
    private java.lang.Object tWAYID2_;
    /**
     * <code>optional string TWAY_ID2 = 24;</code>
     */
    public boolean hasTWAYID2() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional string TWAY_ID2 = 24;</code>
     */
    public java.lang.String getTWAYID2() {
      java.lang.Object ref = tWAYID2_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          tWAYID2_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string TWAY_ID2 = 24;</code>
     */
    public com.google.protobuf.ByteString
        getTWAYID2Bytes() {
      java.lang.Object ref = tWAYID2_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tWAYID2_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required int32 MILEPT = 25;
    public static final int MILEPT_FIELD_NUMBER = 25;
    private int mILEPT_;
    /**
     * <code>required int32 MILEPT = 25;</code>
     */
    public boolean hasMILEPT() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>required int32 MILEPT = 25;</code>
     */
    public int getMILEPT() {
      return mILEPT_;
    }

    // optional float LATITUDE = 26;
    public static final int LATITUDE_FIELD_NUMBER = 26;
    private float lATITUDE_;
    /**
     * <code>optional float LATITUDE = 26;</code>
     */
    public boolean hasLATITUDE() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional float LATITUDE = 26;</code>
     */
    public float getLATITUDE() {
      return lATITUDE_;
    }

    // optional float LONGITUD = 27;
    public static final int LONGITUD_FIELD_NUMBER = 27;
    private float lONGITUD_;
    /**
     * <code>optional float LONGITUD = 27;</code>
     */
    public boolean hasLONGITUD() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional float LONGITUD = 27;</code>
     */
    public float getLONGITUD() {
      return lONGITUD_;
    }

    // required int32 SP_JUR = 28;
    public static final int SP_JUR_FIELD_NUMBER = 28;
    private int sPJUR_;
    /**
     * <code>required int32 SP_JUR = 28;</code>
     */
    public boolean hasSPJUR() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>required int32 SP_JUR = 28;</code>
     */
    public int getSPJUR() {
      return sPJUR_;
    }

    // required int32 HARM_EV = 29;
    public static final int HARM_EV_FIELD_NUMBER = 29;
    private int hARMEV_;
    /**
     * <code>required int32 HARM_EV = 29;</code>
     */
    public boolean hasHARMEV() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>required int32 HARM_EV = 29;</code>
     */
    public int getHARMEV() {
      return hARMEV_;
    }

    // required int32 MAN_COLL = 30;
    public static final int MAN_COLL_FIELD_NUMBER = 30;
    private int mANCOLL_;
    /**
     * <code>required int32 MAN_COLL = 30;</code>
     */
    public boolean hasMANCOLL() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>required int32 MAN_COLL = 30;</code>
     */
    public int getMANCOLL() {
      return mANCOLL_;
    }

    // required int32 RELJCT1 = 31;
    public static final int RELJCT1_FIELD_NUMBER = 31;
    private int rELJCT1_;
    /**
     * <code>required int32 RELJCT1 = 31;</code>
     */
    public boolean hasRELJCT1() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>required int32 RELJCT1 = 31;</code>
     */
    public int getRELJCT1() {
      return rELJCT1_;
    }

    // required int32 RELJCT2 = 32;
    public static final int RELJCT2_FIELD_NUMBER = 32;
    private int rELJCT2_;
    /**
     * <code>required int32 RELJCT2 = 32;</code>
     */
    public boolean hasRELJCT2() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>required int32 RELJCT2 = 32;</code>
     */
    public int getRELJCT2() {
      return rELJCT2_;
    }

    // required int32 TYP_INT = 33;
    public static final int TYP_INT_FIELD_NUMBER = 33;
    private int tYPINT_;
    /**
     * <code>required int32 TYP_INT = 33;</code>
     */
    public boolean hasTYPINT() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 TYP_INT = 33;</code>
     */
    public int getTYPINT() {
      return tYPINT_;
    }

    // required int32 WRK_ZONE = 34;
    public static final int WRK_ZONE_FIELD_NUMBER = 34;
    private int wRKZONE_;
    /**
     * <code>required int32 WRK_ZONE = 34;</code>
     */
    public boolean hasWRKZONE() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 WRK_ZONE = 34;</code>
     */
    public int getWRKZONE() {
      return wRKZONE_;
    }

    // required int32 REL_ROAD = 35;
    public static final int REL_ROAD_FIELD_NUMBER = 35;
    private int rELROAD_;
    /**
     * <code>required int32 REL_ROAD = 35;</code>
     */
    public boolean hasRELROAD() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 REL_ROAD = 35;</code>
     */
    public int getRELROAD() {
      return rELROAD_;
    }

    // required int32 LGT_COND = 36;
    public static final int LGT_COND_FIELD_NUMBER = 36;
    private int lGTCOND_;
    /**
     * <code>required int32 LGT_COND = 36;</code>
     */
    public boolean hasLGTCOND() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 LGT_COND = 36;</code>
     */
    public int getLGTCOND() {
      return lGTCOND_;
    }

    // required int32 WEATHER1 = 37;
    public static final int WEATHER1_FIELD_NUMBER = 37;
    private int wEATHER1_;
    /**
     * <code>required int32 WEATHER1 = 37;</code>
     */
    public boolean hasWEATHER1() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 WEATHER1 = 37;</code>
     */
    public int getWEATHER1() {
      return wEATHER1_;
    }

    // required int32 WEATHER2 = 38;
    public static final int WEATHER2_FIELD_NUMBER = 38;
    private int wEATHER2_;
    /**
     * <code>required int32 WEATHER2 = 38;</code>
     */
    public boolean hasWEATHER2() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 WEATHER2 = 38;</code>
     */
    public int getWEATHER2() {
      return wEATHER2_;
    }

    // required int32 WEATHER = 39;
    public static final int WEATHER_FIELD_NUMBER = 39;
    private int wEATHER_;
    /**
     * <code>required int32 WEATHER = 39;</code>
     */
    public boolean hasWEATHER() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required int32 WEATHER = 39;</code>
     */
    public int getWEATHER() {
      return wEATHER_;
    }

    // required int32 SCH_BUS = 40;
    public static final int SCH_BUS_FIELD_NUMBER = 40;
    private int sCHBUS_;
    /**
     * <code>required int32 SCH_BUS = 40;</code>
     */
    public boolean hasSCHBUS() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required int32 SCH_BUS = 40;</code>
     */
    public int getSCHBUS() {
      return sCHBUS_;
    }

    // required string RAIL = 41;
    public static final int RAIL_FIELD_NUMBER = 41;
    private java.lang.Object rAIL_;
    /**
     * <code>required string RAIL = 41;</code>
     */
    public boolean hasRAIL() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required string RAIL = 41;</code>
     */
    public java.lang.String getRAIL() {
      java.lang.Object ref = rAIL_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          rAIL_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string RAIL = 41;</code>
     */
    public com.google.protobuf.ByteString
        getRAILBytes() {
      java.lang.Object ref = rAIL_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        rAIL_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required int32 NOT_HOUR = 42;
    public static final int NOT_HOUR_FIELD_NUMBER = 42;
    private int nOTHOUR_;
    /**
     * <code>required int32 NOT_HOUR = 42;</code>
     */
    public boolean hasNOTHOUR() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required int32 NOT_HOUR = 42;</code>
     */
    public int getNOTHOUR() {
      return nOTHOUR_;
    }

    // required int32 NOT_MIN = 43;
    public static final int NOT_MIN_FIELD_NUMBER = 43;
    private int nOTMIN_;
    /**
     * <code>required int32 NOT_MIN = 43;</code>
     */
    public boolean hasNOTMIN() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required int32 NOT_MIN = 43;</code>
     */
    public int getNOTMIN() {
      return nOTMIN_;
    }

    // required int32 ARR_HOUR = 44;
    public static final int ARR_HOUR_FIELD_NUMBER = 44;
    private int aRRHOUR_;
    /**
     * <code>required int32 ARR_HOUR = 44;</code>
     */
    public boolean hasARRHOUR() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required int32 ARR_HOUR = 44;</code>
     */
    public int getARRHOUR() {
      return aRRHOUR_;
    }

    // required int32 ARR_MIN = 45;
    public static final int ARR_MIN_FIELD_NUMBER = 45;
    private int aRRMIN_;
    /**
     * <code>required int32 ARR_MIN = 45;</code>
     */
    public boolean hasARRMIN() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required int32 ARR_MIN = 45;</code>
     */
    public int getARRMIN() {
      return aRRMIN_;
    }

    // required int32 HOSP_HR = 46;
    public static final int HOSP_HR_FIELD_NUMBER = 46;
    private int hOSPHR_;
    /**
     * <code>required int32 HOSP_HR = 46;</code>
     */
    public boolean hasHOSPHR() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required int32 HOSP_HR = 46;</code>
     */
    public int getHOSPHR() {
      return hOSPHR_;
    }

    // required int32 HOSP_MN = 47;
    public static final int HOSP_MN_FIELD_NUMBER = 47;
    private int hOSPMN_;
    /**
     * <code>required int32 HOSP_MN = 47;</code>
     */
    public boolean hasHOSPMN() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>required int32 HOSP_MN = 47;</code>
     */
    public int getHOSPMN() {
      return hOSPMN_;
    }

    // required int32 CF1 = 48;
    public static final int CF1_FIELD_NUMBER = 48;
    private int cF1_;
    /**
     * <code>required int32 CF1 = 48;</code>
     */
    public boolean hasCF1() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>required int32 CF1 = 48;</code>
     */
    public int getCF1() {
      return cF1_;
    }

    // required int32 CF2 = 49;
    public static final int CF2_FIELD_NUMBER = 49;
    private int cF2_;
    /**
     * <code>required int32 CF2 = 49;</code>
     */
    public boolean hasCF2() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>required int32 CF2 = 49;</code>
     */
    public int getCF2() {
      return cF2_;
    }

    // required int32 CF3 = 50;
    public static final int CF3_FIELD_NUMBER = 50;
    private int cF3_;
    /**
     * <code>required int32 CF3 = 50;</code>
     */
    public boolean hasCF3() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>required int32 CF3 = 50;</code>
     */
    public int getCF3() {
      return cF3_;
    }

    // required int32 FATALS = 51;
    public static final int FATALS_FIELD_NUMBER = 51;
    private int fATALS_;
    /**
     * <code>required int32 FATALS = 51;</code>
     */
    public boolean hasFATALS() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>required int32 FATALS = 51;</code>
     */
    public int getFATALS() {
      return fATALS_;
    }

    // required int32 DRUNK_DR = 52;
    public static final int DRUNK_DR_FIELD_NUMBER = 52;
    private int dRUNKDR_;
    /**
     * <code>required int32 DRUNK_DR = 52;</code>
     */
    public boolean hasDRUNKDR() {
      return ((bitField1_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>required int32 DRUNK_DR = 52;</code>
     */
    public int getDRUNKDR() {
      return dRUNKDR_;
    }

    // repeated .boa.types.Person persons = 53;
    public static final int PERSONS_FIELD_NUMBER = 53;
    private java.util.List<boa.types.Transport.Person> persons_;
    /**
     * <code>repeated .boa.types.Person persons = 53;</code>
     */
    public java.util.List<boa.types.Transport.Person> getPersonsList() {
      return persons_;
    }
    /**
     * <code>repeated .boa.types.Person persons = 53;</code>
     */
    public java.util.List<? extends boa.types.Transport.PersonOrBuilder> 
        getPersonsOrBuilderList() {
      return persons_;
    }
    /**
     * <code>repeated .boa.types.Person persons = 53;</code>
     */
    public int getPersonsCount() {
      return persons_.size();
    }
    /**
     * <code>repeated .boa.types.Person persons = 53;</code>
     */
    public boa.types.Transport.Person getPersons(int index) {
      return persons_.get(index);
    }
    /**
     * <code>repeated .boa.types.Person persons = 53;</code>
     */
    public boa.types.Transport.PersonOrBuilder getPersonsOrBuilder(
        int index) {
      return persons_.get(index);
    }

    // repeated .boa.types.Vehicle vehicle = 54;
    public static final int VEHICLE_FIELD_NUMBER = 54;
    private java.util.List<boa.types.Transport.Vehicle> vehicle_;
    /**
     * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
     */
    public java.util.List<boa.types.Transport.Vehicle> getVehicleList() {
      return vehicle_;
    }
    /**
     * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
     */
    public java.util.List<? extends boa.types.Transport.VehicleOrBuilder> 
        getVehicleOrBuilderList() {
      return vehicle_;
    }
    /**
     * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
     */
    public int getVehicleCount() {
      return vehicle_.size();
    }
    /**
     * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
     */
    public boa.types.Transport.Vehicle getVehicle(int index) {
      return vehicle_.get(index);
    }
    /**
     * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
     */
    public boa.types.Transport.VehicleOrBuilder getVehicleOrBuilder(
        int index) {
      return vehicle_.get(index);
    }

    private void initFields() {
      state_ = boa.types.Transport.STATE.Alabama;
      sTCASE_ = 0;
      vETOTAL_ = 0;
      vEFORMS_ = 0;
      pVHINVL_ = 0;
      pEDS_ = 0;
      pERNOTMVIT_ = 0;
      pERMVIT_ = 0;
      personCount_ = 0;
      cOUNTY_ = 0;
      cITY_ = 0;
      dAY_ = 0;
      mONTH_ = 0;
      yEAR_ = 0;
      dAYWEEK_ = 0;
      hOUR_ = 0;
      mINUTE_ = 0;
      nHS_ = 0;
      rURURB_ = 0;
      fUNCSYS_ = 0;
      rDOWNER_ = 0;
      rOUTE_ = 0;
      tWAYID_ = "";
      tWAYID2_ = "";
      mILEPT_ = 0;
      lATITUDE_ = 0F;
      lONGITUD_ = 0F;
      sPJUR_ = 0;
      hARMEV_ = 0;
      mANCOLL_ = 0;
      rELJCT1_ = 0;
      rELJCT2_ = 0;
      tYPINT_ = 0;
      wRKZONE_ = 0;
      rELROAD_ = 0;
      lGTCOND_ = 0;
      wEATHER1_ = 0;
      wEATHER2_ = 0;
      wEATHER_ = 0;
      sCHBUS_ = 0;
      rAIL_ = "";
      nOTHOUR_ = 0;
      nOTMIN_ = 0;
      aRRHOUR_ = 0;
      aRRMIN_ = 0;
      hOSPHR_ = 0;
      hOSPMN_ = 0;
      cF1_ = 0;
      cF2_ = 0;
      cF3_ = 0;
      fATALS_ = 0;
      dRUNKDR_ = 0;
      persons_ = java.util.Collections.emptyList();
      vehicle_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSTCASE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVETOTAL()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVEFORMS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPVHINVL()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPEDS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPERNOTMVIT()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPERMVIT()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPersonCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCOUNTY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCITY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDAY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMONTH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasYEAR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDAYWEEK()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHOUR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMINUTE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNHS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRURURB()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFUNCSYS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRDOWNER()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasROUTE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTWAYID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMILEPT()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSPJUR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHARMEV()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMANCOLL()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRELJCT1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRELJCT2()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTYPINT()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWRKZONE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRELROAD()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLGTCOND()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWEATHER1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWEATHER2()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWEATHER()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSCHBUS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRAIL()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNOTHOUR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNOTMIN()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasARRHOUR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasARRMIN()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHOSPHR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHOSPMN()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCF1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCF2()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCF3()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFATALS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDRUNKDR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getPersonsCount(); i++) {
        if (!getPersons(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getVehicleCount(); i++) {
        if (!getVehicle(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, state_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, sTCASE_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, vETOTAL_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, vEFORMS_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, pVHINVL_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, pEDS_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, pERNOTMVIT_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, pERMVIT_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, personCount_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, cOUNTY_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, cITY_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(12, dAY_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, mONTH_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, yEAR_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, dAYWEEK_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(16, hOUR_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(17, mINUTE_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(18, nHS_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(19, rURURB_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(20, fUNCSYS_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeInt32(21, rDOWNER_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeInt32(22, rOUTE_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeBytes(23, getTWAYIDBytes());
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeBytes(24, getTWAYID2Bytes());
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeInt32(25, mILEPT_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeFloat(26, lATITUDE_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeFloat(27, lONGITUD_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeInt32(28, sPJUR_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeInt32(29, hARMEV_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeInt32(30, mANCOLL_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeInt32(31, rELJCT1_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeInt32(32, rELJCT2_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(33, tYPINT_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(34, wRKZONE_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(35, rELROAD_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(36, lGTCOND_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(37, wEATHER1_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(38, wEATHER2_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(39, wEATHER_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(40, sCHBUS_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeBytes(41, getRAILBytes());
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(42, nOTHOUR_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(43, nOTMIN_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(44, aRRHOUR_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(45, aRRMIN_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(46, hOSPHR_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(47, hOSPMN_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(48, cF1_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(49, cF2_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(50, cF3_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(51, fATALS_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(52, dRUNKDR_);
      }
      for (int i = 0; i < persons_.size(); i++) {
        output.writeMessage(53, persons_.get(i));
      }
      for (int i = 0; i < vehicle_.size(); i++) {
        output.writeMessage(54, vehicle_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, sTCASE_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, vETOTAL_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, vEFORMS_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, pVHINVL_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, pEDS_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, pERNOTMVIT_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, pERMVIT_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, personCount_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, cOUNTY_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, cITY_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, dAY_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, mONTH_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, yEAR_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, dAYWEEK_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, hOUR_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, mINUTE_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, nHS_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, rURURB_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, fUNCSYS_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, rDOWNER_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, rOUTE_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(23, getTWAYIDBytes());
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(24, getTWAYID2Bytes());
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(25, mILEPT_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(26, lATITUDE_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(27, lONGITUD_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(28, sPJUR_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(29, hARMEV_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(30, mANCOLL_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(31, rELJCT1_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(32, rELJCT2_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(33, tYPINT_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(34, wRKZONE_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(35, rELROAD_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(36, lGTCOND_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(37, wEATHER1_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(38, wEATHER2_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(39, wEATHER_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(40, sCHBUS_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(41, getRAILBytes());
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(42, nOTHOUR_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(43, nOTMIN_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(44, aRRHOUR_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(45, aRRMIN_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(46, hOSPHR_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(47, hOSPMN_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(48, cF1_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(49, cF2_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(50, cF3_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(51, fATALS_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(52, dRUNKDR_);
      }
      for (int i = 0; i < persons_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(53, persons_.get(i));
      }
      for (int i = 0; i < vehicle_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(54, vehicle_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static boa.types.Transport.Crash parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boa.types.Transport.Crash parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boa.types.Transport.Crash parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boa.types.Transport.Crash parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boa.types.Transport.Crash parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boa.types.Transport.Crash parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static boa.types.Transport.Crash parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static boa.types.Transport.Crash parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static boa.types.Transport.Crash parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boa.types.Transport.Crash parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(boa.types.Transport.Crash prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code boa.types.Crash}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements boa.types.Transport.CrashOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return boa.types.Transport.internal_static_boa_types_Crash_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return boa.types.Transport.internal_static_boa_types_Crash_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                boa.types.Transport.Crash.class, boa.types.Transport.Crash.Builder.class);
      }

      // Construct using boa.types.Transport.Crash.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPersonsFieldBuilder();
          getVehicleFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        state_ = boa.types.Transport.STATE.Alabama;
        bitField0_ = (bitField0_ & ~0x00000001);
        sTCASE_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        vETOTAL_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        vEFORMS_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        pVHINVL_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        pEDS_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        pERNOTMVIT_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        pERMVIT_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        personCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        cOUNTY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        cITY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        dAY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        mONTH_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        yEAR_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        dAYWEEK_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        hOUR_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        mINUTE_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        nHS_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        rURURB_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        fUNCSYS_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        rDOWNER_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        rOUTE_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        tWAYID_ = "";
        bitField0_ = (bitField0_ & ~0x00400000);
        tWAYID2_ = "";
        bitField0_ = (bitField0_ & ~0x00800000);
        mILEPT_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        lATITUDE_ = 0F;
        bitField0_ = (bitField0_ & ~0x02000000);
        lONGITUD_ = 0F;
        bitField0_ = (bitField0_ & ~0x04000000);
        sPJUR_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        hARMEV_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        mANCOLL_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        rELJCT1_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        rELJCT2_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        tYPINT_ = 0;
        bitField1_ = (bitField1_ & ~0x00000001);
        wRKZONE_ = 0;
        bitField1_ = (bitField1_ & ~0x00000002);
        rELROAD_ = 0;
        bitField1_ = (bitField1_ & ~0x00000004);
        lGTCOND_ = 0;
        bitField1_ = (bitField1_ & ~0x00000008);
        wEATHER1_ = 0;
        bitField1_ = (bitField1_ & ~0x00000010);
        wEATHER2_ = 0;
        bitField1_ = (bitField1_ & ~0x00000020);
        wEATHER_ = 0;
        bitField1_ = (bitField1_ & ~0x00000040);
        sCHBUS_ = 0;
        bitField1_ = (bitField1_ & ~0x00000080);
        rAIL_ = "";
        bitField1_ = (bitField1_ & ~0x00000100);
        nOTHOUR_ = 0;
        bitField1_ = (bitField1_ & ~0x00000200);
        nOTMIN_ = 0;
        bitField1_ = (bitField1_ & ~0x00000400);
        aRRHOUR_ = 0;
        bitField1_ = (bitField1_ & ~0x00000800);
        aRRMIN_ = 0;
        bitField1_ = (bitField1_ & ~0x00001000);
        hOSPHR_ = 0;
        bitField1_ = (bitField1_ & ~0x00002000);
        hOSPMN_ = 0;
        bitField1_ = (bitField1_ & ~0x00004000);
        cF1_ = 0;
        bitField1_ = (bitField1_ & ~0x00008000);
        cF2_ = 0;
        bitField1_ = (bitField1_ & ~0x00010000);
        cF3_ = 0;
        bitField1_ = (bitField1_ & ~0x00020000);
        fATALS_ = 0;
        bitField1_ = (bitField1_ & ~0x00040000);
        dRUNKDR_ = 0;
        bitField1_ = (bitField1_ & ~0x00080000);
        if (personsBuilder_ == null) {
          persons_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00100000);
        } else {
          personsBuilder_.clear();
        }
        if (vehicleBuilder_ == null) {
          vehicle_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00200000);
        } else {
          vehicleBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return boa.types.Transport.internal_static_boa_types_Crash_descriptor;
      }

      public boa.types.Transport.Crash getDefaultInstanceForType() {
        return boa.types.Transport.Crash.getDefaultInstance();
      }

      public boa.types.Transport.Crash build() {
        boa.types.Transport.Crash result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public boa.types.Transport.Crash buildPartial() {
        boa.types.Transport.Crash result = new boa.types.Transport.Crash(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sTCASE_ = sTCASE_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.vETOTAL_ = vETOTAL_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.vEFORMS_ = vEFORMS_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.pVHINVL_ = pVHINVL_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.pEDS_ = pEDS_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.pERNOTMVIT_ = pERNOTMVIT_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.pERMVIT_ = pERMVIT_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.personCount_ = personCount_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.cOUNTY_ = cOUNTY_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.cITY_ = cITY_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.dAY_ = dAY_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.mONTH_ = mONTH_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.yEAR_ = yEAR_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.dAYWEEK_ = dAYWEEK_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.hOUR_ = hOUR_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.mINUTE_ = mINUTE_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.nHS_ = nHS_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.rURURB_ = rURURB_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.fUNCSYS_ = fUNCSYS_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.rDOWNER_ = rDOWNER_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.rOUTE_ = rOUTE_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.tWAYID_ = tWAYID_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.tWAYID2_ = tWAYID2_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.mILEPT_ = mILEPT_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.lATITUDE_ = lATITUDE_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.lONGITUD_ = lONGITUD_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.sPJUR_ = sPJUR_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.hARMEV_ = hARMEV_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.mANCOLL_ = mANCOLL_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.rELJCT1_ = rELJCT1_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.rELJCT2_ = rELJCT2_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        result.tYPINT_ = tYPINT_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        result.wRKZONE_ = wRKZONE_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        result.rELROAD_ = rELROAD_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000008;
        }
        result.lGTCOND_ = lGTCOND_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000010;
        }
        result.wEATHER1_ = wEATHER1_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000020;
        }
        result.wEATHER2_ = wEATHER2_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000040;
        }
        result.wEATHER_ = wEATHER_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000080;
        }
        result.sCHBUS_ = sCHBUS_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000100;
        }
        result.rAIL_ = rAIL_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000200;
        }
        result.nOTHOUR_ = nOTHOUR_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000400;
        }
        result.nOTMIN_ = nOTMIN_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000800;
        }
        result.aRRHOUR_ = aRRHOUR_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00001000;
        }
        result.aRRMIN_ = aRRMIN_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00002000;
        }
        result.hOSPHR_ = hOSPHR_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00004000;
        }
        result.hOSPMN_ = hOSPMN_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00008000;
        }
        result.cF1_ = cF1_;
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00010000;
        }
        result.cF2_ = cF2_;
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00020000;
        }
        result.cF3_ = cF3_;
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00040000;
        }
        result.fATALS_ = fATALS_;
        if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
          to_bitField1_ |= 0x00080000;
        }
        result.dRUNKDR_ = dRUNKDR_;
        if (personsBuilder_ == null) {
          if (((bitField1_ & 0x00100000) == 0x00100000)) {
            persons_ = java.util.Collections.unmodifiableList(persons_);
            bitField1_ = (bitField1_ & ~0x00100000);
          }
          result.persons_ = persons_;
        } else {
          result.persons_ = personsBuilder_.build();
        }
        if (vehicleBuilder_ == null) {
          if (((bitField1_ & 0x00200000) == 0x00200000)) {
            vehicle_ = java.util.Collections.unmodifiableList(vehicle_);
            bitField1_ = (bitField1_ & ~0x00200000);
          }
          result.vehicle_ = vehicle_;
        } else {
          result.vehicle_ = vehicleBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof boa.types.Transport.Crash) {
          return mergeFrom((boa.types.Transport.Crash)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(boa.types.Transport.Crash other) {
        if (other == boa.types.Transport.Crash.getDefaultInstance()) return this;
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasSTCASE()) {
          setSTCASE(other.getSTCASE());
        }
        if (other.hasVETOTAL()) {
          setVETOTAL(other.getVETOTAL());
        }
        if (other.hasVEFORMS()) {
          setVEFORMS(other.getVEFORMS());
        }
        if (other.hasPVHINVL()) {
          setPVHINVL(other.getPVHINVL());
        }
        if (other.hasPEDS()) {
          setPEDS(other.getPEDS());
        }
        if (other.hasPERNOTMVIT()) {
          setPERNOTMVIT(other.getPERNOTMVIT());
        }
        if (other.hasPERMVIT()) {
          setPERMVIT(other.getPERMVIT());
        }
        if (other.hasPersonCount()) {
          setPersonCount(other.getPersonCount());
        }
        if (other.hasCOUNTY()) {
          setCOUNTY(other.getCOUNTY());
        }
        if (other.hasCITY()) {
          setCITY(other.getCITY());
        }
        if (other.hasDAY()) {
          setDAY(other.getDAY());
        }
        if (other.hasMONTH()) {
          setMONTH(other.getMONTH());
        }
        if (other.hasYEAR()) {
          setYEAR(other.getYEAR());
        }
        if (other.hasDAYWEEK()) {
          setDAYWEEK(other.getDAYWEEK());
        }
        if (other.hasHOUR()) {
          setHOUR(other.getHOUR());
        }
        if (other.hasMINUTE()) {
          setMINUTE(other.getMINUTE());
        }
        if (other.hasNHS()) {
          setNHS(other.getNHS());
        }
        if (other.hasRURURB()) {
          setRURURB(other.getRURURB());
        }
        if (other.hasFUNCSYS()) {
          setFUNCSYS(other.getFUNCSYS());
        }
        if (other.hasRDOWNER()) {
          setRDOWNER(other.getRDOWNER());
        }
        if (other.hasROUTE()) {
          setROUTE(other.getROUTE());
        }
        if (other.hasTWAYID()) {
          bitField0_ |= 0x00400000;
          tWAYID_ = other.tWAYID_;
          onChanged();
        }
        if (other.hasTWAYID2()) {
          bitField0_ |= 0x00800000;
          tWAYID2_ = other.tWAYID2_;
          onChanged();
        }
        if (other.hasMILEPT()) {
          setMILEPT(other.getMILEPT());
        }
        if (other.hasLATITUDE()) {
          setLATITUDE(other.getLATITUDE());
        }
        if (other.hasLONGITUD()) {
          setLONGITUD(other.getLONGITUD());
        }
        if (other.hasSPJUR()) {
          setSPJUR(other.getSPJUR());
        }
        if (other.hasHARMEV()) {
          setHARMEV(other.getHARMEV());
        }
        if (other.hasMANCOLL()) {
          setMANCOLL(other.getMANCOLL());
        }
        if (other.hasRELJCT1()) {
          setRELJCT1(other.getRELJCT1());
        }
        if (other.hasRELJCT2()) {
          setRELJCT2(other.getRELJCT2());
        }
        if (other.hasTYPINT()) {
          setTYPINT(other.getTYPINT());
        }
        if (other.hasWRKZONE()) {
          setWRKZONE(other.getWRKZONE());
        }
        if (other.hasRELROAD()) {
          setRELROAD(other.getRELROAD());
        }
        if (other.hasLGTCOND()) {
          setLGTCOND(other.getLGTCOND());
        }
        if (other.hasWEATHER1()) {
          setWEATHER1(other.getWEATHER1());
        }
        if (other.hasWEATHER2()) {
          setWEATHER2(other.getWEATHER2());
        }
        if (other.hasWEATHER()) {
          setWEATHER(other.getWEATHER());
        }
        if (other.hasSCHBUS()) {
          setSCHBUS(other.getSCHBUS());
        }
        if (other.hasRAIL()) {
          bitField1_ |= 0x00000100;
          rAIL_ = other.rAIL_;
          onChanged();
        }
        if (other.hasNOTHOUR()) {
          setNOTHOUR(other.getNOTHOUR());
        }
        if (other.hasNOTMIN()) {
          setNOTMIN(other.getNOTMIN());
        }
        if (other.hasARRHOUR()) {
          setARRHOUR(other.getARRHOUR());
        }
        if (other.hasARRMIN()) {
          setARRMIN(other.getARRMIN());
        }
        if (other.hasHOSPHR()) {
          setHOSPHR(other.getHOSPHR());
        }
        if (other.hasHOSPMN()) {
          setHOSPMN(other.getHOSPMN());
        }
        if (other.hasCF1()) {
          setCF1(other.getCF1());
        }
        if (other.hasCF2()) {
          setCF2(other.getCF2());
        }
        if (other.hasCF3()) {
          setCF3(other.getCF3());
        }
        if (other.hasFATALS()) {
          setFATALS(other.getFATALS());
        }
        if (other.hasDRUNKDR()) {
          setDRUNKDR(other.getDRUNKDR());
        }
        if (personsBuilder_ == null) {
          if (!other.persons_.isEmpty()) {
            if (persons_.isEmpty()) {
              persons_ = other.persons_;
              bitField1_ = (bitField1_ & ~0x00100000);
            } else {
              ensurePersonsIsMutable();
              persons_.addAll(other.persons_);
            }
            onChanged();
          }
        } else {
          if (!other.persons_.isEmpty()) {
            if (personsBuilder_.isEmpty()) {
              personsBuilder_.dispose();
              personsBuilder_ = null;
              persons_ = other.persons_;
              bitField1_ = (bitField1_ & ~0x00100000);
              personsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPersonsFieldBuilder() : null;
            } else {
              personsBuilder_.addAllMessages(other.persons_);
            }
          }
        }
        if (vehicleBuilder_ == null) {
          if (!other.vehicle_.isEmpty()) {
            if (vehicle_.isEmpty()) {
              vehicle_ = other.vehicle_;
              bitField1_ = (bitField1_ & ~0x00200000);
            } else {
              ensureVehicleIsMutable();
              vehicle_.addAll(other.vehicle_);
            }
            onChanged();
          }
        } else {
          if (!other.vehicle_.isEmpty()) {
            if (vehicleBuilder_.isEmpty()) {
              vehicleBuilder_.dispose();
              vehicleBuilder_ = null;
              vehicle_ = other.vehicle_;
              bitField1_ = (bitField1_ & ~0x00200000);
              vehicleBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getVehicleFieldBuilder() : null;
            } else {
              vehicleBuilder_.addAllMessages(other.vehicle_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasState()) {
          
          return false;
        }
        if (!hasSTCASE()) {
          
          return false;
        }
        if (!hasVETOTAL()) {
          
          return false;
        }
        if (!hasVEFORMS()) {
          
          return false;
        }
        if (!hasPVHINVL()) {
          
          return false;
        }
        if (!hasPEDS()) {
          
          return false;
        }
        if (!hasPERNOTMVIT()) {
          
          return false;
        }
        if (!hasPERMVIT()) {
          
          return false;
        }
        if (!hasPersonCount()) {
          
          return false;
        }
        if (!hasCOUNTY()) {
          
          return false;
        }
        if (!hasCITY()) {
          
          return false;
        }
        if (!hasDAY()) {
          
          return false;
        }
        if (!hasMONTH()) {
          
          return false;
        }
        if (!hasYEAR()) {
          
          return false;
        }
        if (!hasDAYWEEK()) {
          
          return false;
        }
        if (!hasHOUR()) {
          
          return false;
        }
        if (!hasMINUTE()) {
          
          return false;
        }
        if (!hasNHS()) {
          
          return false;
        }
        if (!hasRURURB()) {
          
          return false;
        }
        if (!hasFUNCSYS()) {
          
          return false;
        }
        if (!hasRDOWNER()) {
          
          return false;
        }
        if (!hasROUTE()) {
          
          return false;
        }
        if (!hasTWAYID()) {
          
          return false;
        }
        if (!hasMILEPT()) {
          
          return false;
        }
        if (!hasSPJUR()) {
          
          return false;
        }
        if (!hasHARMEV()) {
          
          return false;
        }
        if (!hasMANCOLL()) {
          
          return false;
        }
        if (!hasRELJCT1()) {
          
          return false;
        }
        if (!hasRELJCT2()) {
          
          return false;
        }
        if (!hasTYPINT()) {
          
          return false;
        }
        if (!hasWRKZONE()) {
          
          return false;
        }
        if (!hasRELROAD()) {
          
          return false;
        }
        if (!hasLGTCOND()) {
          
          return false;
        }
        if (!hasWEATHER1()) {
          
          return false;
        }
        if (!hasWEATHER2()) {
          
          return false;
        }
        if (!hasWEATHER()) {
          
          return false;
        }
        if (!hasSCHBUS()) {
          
          return false;
        }
        if (!hasRAIL()) {
          
          return false;
        }
        if (!hasNOTHOUR()) {
          
          return false;
        }
        if (!hasNOTMIN()) {
          
          return false;
        }
        if (!hasARRHOUR()) {
          
          return false;
        }
        if (!hasARRMIN()) {
          
          return false;
        }
        if (!hasHOSPHR()) {
          
          return false;
        }
        if (!hasHOSPMN()) {
          
          return false;
        }
        if (!hasCF1()) {
          
          return false;
        }
        if (!hasCF2()) {
          
          return false;
        }
        if (!hasCF3()) {
          
          return false;
        }
        if (!hasFATALS()) {
          
          return false;
        }
        if (!hasDRUNKDR()) {
          
          return false;
        }
        for (int i = 0; i < getPersonsCount(); i++) {
          if (!getPersons(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getVehicleCount(); i++) {
          if (!getVehicle(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        boa.types.Transport.Crash parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (boa.types.Transport.Crash) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      // required .boa.types.STATE state = 1;
      private boa.types.Transport.STATE state_ = boa.types.Transport.STATE.Alabama;
      /**
       * <code>required .boa.types.STATE state = 1;</code>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .boa.types.STATE state = 1;</code>
       */
      public boa.types.Transport.STATE getState() {
        return state_;
      }
      /**
       * <code>required .boa.types.STATE state = 1;</code>
       */
      public Builder setState(boa.types.Transport.STATE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        state_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .boa.types.STATE state = 1;</code>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = boa.types.Transport.STATE.Alabama;
        onChanged();
        return this;
      }

      // required int32 ST_CASE = 2;
      private int sTCASE_ ;
      /**
       * <code>required int32 ST_CASE = 2;</code>
       */
      public boolean hasSTCASE() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 ST_CASE = 2;</code>
       */
      public int getSTCASE() {
        return sTCASE_;
      }
      /**
       * <code>required int32 ST_CASE = 2;</code>
       */
      public Builder setSTCASE(int value) {
        bitField0_ |= 0x00000002;
        sTCASE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 ST_CASE = 2;</code>
       */
      public Builder clearSTCASE() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sTCASE_ = 0;
        onChanged();
        return this;
      }

      // required int32 VE_TOTAL = 3;
      private int vETOTAL_ ;
      /**
       * <code>required int32 VE_TOTAL = 3;</code>
       */
      public boolean hasVETOTAL() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 VE_TOTAL = 3;</code>
       */
      public int getVETOTAL() {
        return vETOTAL_;
      }
      /**
       * <code>required int32 VE_TOTAL = 3;</code>
       */
      public Builder setVETOTAL(int value) {
        bitField0_ |= 0x00000004;
        vETOTAL_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VE_TOTAL = 3;</code>
       */
      public Builder clearVETOTAL() {
        bitField0_ = (bitField0_ & ~0x00000004);
        vETOTAL_ = 0;
        onChanged();
        return this;
      }

      // required int32 VE_FORMS = 4;
      private int vEFORMS_ ;
      /**
       * <code>required int32 VE_FORMS = 4;</code>
       */
      public boolean hasVEFORMS() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 VE_FORMS = 4;</code>
       */
      public int getVEFORMS() {
        return vEFORMS_;
      }
      /**
       * <code>required int32 VE_FORMS = 4;</code>
       */
      public Builder setVEFORMS(int value) {
        bitField0_ |= 0x00000008;
        vEFORMS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VE_FORMS = 4;</code>
       */
      public Builder clearVEFORMS() {
        bitField0_ = (bitField0_ & ~0x00000008);
        vEFORMS_ = 0;
        onChanged();
        return this;
      }

      // required int32 PVH_INVL = 5;
      private int pVHINVL_ ;
      /**
       * <code>required int32 PVH_INVL = 5;</code>
       */
      public boolean hasPVHINVL() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 PVH_INVL = 5;</code>
       */
      public int getPVHINVL() {
        return pVHINVL_;
      }
      /**
       * <code>required int32 PVH_INVL = 5;</code>
       */
      public Builder setPVHINVL(int value) {
        bitField0_ |= 0x00000010;
        pVHINVL_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 PVH_INVL = 5;</code>
       */
      public Builder clearPVHINVL() {
        bitField0_ = (bitField0_ & ~0x00000010);
        pVHINVL_ = 0;
        onChanged();
        return this;
      }

      // required int32 PEDS = 6;
      private int pEDS_ ;
      /**
       * <code>required int32 PEDS = 6;</code>
       */
      public boolean hasPEDS() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 PEDS = 6;</code>
       */
      public int getPEDS() {
        return pEDS_;
      }
      /**
       * <code>required int32 PEDS = 6;</code>
       */
      public Builder setPEDS(int value) {
        bitField0_ |= 0x00000020;
        pEDS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 PEDS = 6;</code>
       */
      public Builder clearPEDS() {
        bitField0_ = (bitField0_ & ~0x00000020);
        pEDS_ = 0;
        onChanged();
        return this;
      }

      // required int32 PERNOTMVIT = 7;
      private int pERNOTMVIT_ ;
      /**
       * <code>required int32 PERNOTMVIT = 7;</code>
       */
      public boolean hasPERNOTMVIT() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 PERNOTMVIT = 7;</code>
       */
      public int getPERNOTMVIT() {
        return pERNOTMVIT_;
      }
      /**
       * <code>required int32 PERNOTMVIT = 7;</code>
       */
      public Builder setPERNOTMVIT(int value) {
        bitField0_ |= 0x00000040;
        pERNOTMVIT_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 PERNOTMVIT = 7;</code>
       */
      public Builder clearPERNOTMVIT() {
        bitField0_ = (bitField0_ & ~0x00000040);
        pERNOTMVIT_ = 0;
        onChanged();
        return this;
      }

      // required int32 PERMVIT = 8;
      private int pERMVIT_ ;
      /**
       * <code>required int32 PERMVIT = 8;</code>
       */
      public boolean hasPERMVIT() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required int32 PERMVIT = 8;</code>
       */
      public int getPERMVIT() {
        return pERMVIT_;
      }
      /**
       * <code>required int32 PERMVIT = 8;</code>
       */
      public Builder setPERMVIT(int value) {
        bitField0_ |= 0x00000080;
        pERMVIT_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 PERMVIT = 8;</code>
       */
      public Builder clearPERMVIT() {
        bitField0_ = (bitField0_ & ~0x00000080);
        pERMVIT_ = 0;
        onChanged();
        return this;
      }

      // required int32 person_count = 9;
      private int personCount_ ;
      /**
       * <code>required int32 person_count = 9;</code>
       */
      public boolean hasPersonCount() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required int32 person_count = 9;</code>
       */
      public int getPersonCount() {
        return personCount_;
      }
      /**
       * <code>required int32 person_count = 9;</code>
       */
      public Builder setPersonCount(int value) {
        bitField0_ |= 0x00000100;
        personCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 person_count = 9;</code>
       */
      public Builder clearPersonCount() {
        bitField0_ = (bitField0_ & ~0x00000100);
        personCount_ = 0;
        onChanged();
        return this;
      }

      // required int32 COUNTY = 10;
      private int cOUNTY_ ;
      /**
       * <code>required int32 COUNTY = 10;</code>
       */
      public boolean hasCOUNTY() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required int32 COUNTY = 10;</code>
       */
      public int getCOUNTY() {
        return cOUNTY_;
      }
      /**
       * <code>required int32 COUNTY = 10;</code>
       */
      public Builder setCOUNTY(int value) {
        bitField0_ |= 0x00000200;
        cOUNTY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 COUNTY = 10;</code>
       */
      public Builder clearCOUNTY() {
        bitField0_ = (bitField0_ & ~0x00000200);
        cOUNTY_ = 0;
        onChanged();
        return this;
      }

      // required int32 CITY = 11;
      private int cITY_ ;
      /**
       * <code>required int32 CITY = 11;</code>
       */
      public boolean hasCITY() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required int32 CITY = 11;</code>
       */
      public int getCITY() {
        return cITY_;
      }
      /**
       * <code>required int32 CITY = 11;</code>
       */
      public Builder setCITY(int value) {
        bitField0_ |= 0x00000400;
        cITY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 CITY = 11;</code>
       */
      public Builder clearCITY() {
        bitField0_ = (bitField0_ & ~0x00000400);
        cITY_ = 0;
        onChanged();
        return this;
      }

      // required int32 DAY = 12;
      private int dAY_ ;
      /**
       * <code>required int32 DAY = 12;</code>
       */
      public boolean hasDAY() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required int32 DAY = 12;</code>
       */
      public int getDAY() {
        return dAY_;
      }
      /**
       * <code>required int32 DAY = 12;</code>
       */
      public Builder setDAY(int value) {
        bitField0_ |= 0x00000800;
        dAY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 DAY = 12;</code>
       */
      public Builder clearDAY() {
        bitField0_ = (bitField0_ & ~0x00000800);
        dAY_ = 0;
        onChanged();
        return this;
      }

      // required int32 MONTH = 13;
      private int mONTH_ ;
      /**
       * <code>required int32 MONTH = 13;</code>
       */
      public boolean hasMONTH() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required int32 MONTH = 13;</code>
       */
      public int getMONTH() {
        return mONTH_;
      }
      /**
       * <code>required int32 MONTH = 13;</code>
       */
      public Builder setMONTH(int value) {
        bitField0_ |= 0x00001000;
        mONTH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 MONTH = 13;</code>
       */
      public Builder clearMONTH() {
        bitField0_ = (bitField0_ & ~0x00001000);
        mONTH_ = 0;
        onChanged();
        return this;
      }

      // required int32 YEAR = 14;
      private int yEAR_ ;
      /**
       * <code>required int32 YEAR = 14;</code>
       */
      public boolean hasYEAR() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required int32 YEAR = 14;</code>
       */
      public int getYEAR() {
        return yEAR_;
      }
      /**
       * <code>required int32 YEAR = 14;</code>
       */
      public Builder setYEAR(int value) {
        bitField0_ |= 0x00002000;
        yEAR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 YEAR = 14;</code>
       */
      public Builder clearYEAR() {
        bitField0_ = (bitField0_ & ~0x00002000);
        yEAR_ = 0;
        onChanged();
        return this;
      }

      // required int32 DAY_WEEK = 15;
      private int dAYWEEK_ ;
      /**
       * <code>required int32 DAY_WEEK = 15;</code>
       */
      public boolean hasDAYWEEK() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>required int32 DAY_WEEK = 15;</code>
       */
      public int getDAYWEEK() {
        return dAYWEEK_;
      }
      /**
       * <code>required int32 DAY_WEEK = 15;</code>
       */
      public Builder setDAYWEEK(int value) {
        bitField0_ |= 0x00004000;
        dAYWEEK_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 DAY_WEEK = 15;</code>
       */
      public Builder clearDAYWEEK() {
        bitField0_ = (bitField0_ & ~0x00004000);
        dAYWEEK_ = 0;
        onChanged();
        return this;
      }

      // required int32 HOUR = 16;
      private int hOUR_ ;
      /**
       * <code>required int32 HOUR = 16;</code>
       */
      public boolean hasHOUR() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>required int32 HOUR = 16;</code>
       */
      public int getHOUR() {
        return hOUR_;
      }
      /**
       * <code>required int32 HOUR = 16;</code>
       */
      public Builder setHOUR(int value) {
        bitField0_ |= 0x00008000;
        hOUR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 HOUR = 16;</code>
       */
      public Builder clearHOUR() {
        bitField0_ = (bitField0_ & ~0x00008000);
        hOUR_ = 0;
        onChanged();
        return this;
      }

      // required int32 MINUTE = 17;
      private int mINUTE_ ;
      /**
       * <code>required int32 MINUTE = 17;</code>
       */
      public boolean hasMINUTE() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>required int32 MINUTE = 17;</code>
       */
      public int getMINUTE() {
        return mINUTE_;
      }
      /**
       * <code>required int32 MINUTE = 17;</code>
       */
      public Builder setMINUTE(int value) {
        bitField0_ |= 0x00010000;
        mINUTE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 MINUTE = 17;</code>
       */
      public Builder clearMINUTE() {
        bitField0_ = (bitField0_ & ~0x00010000);
        mINUTE_ = 0;
        onChanged();
        return this;
      }

      // required int32 NHS = 18;
      private int nHS_ ;
      /**
       * <code>required int32 NHS = 18;</code>
       */
      public boolean hasNHS() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>required int32 NHS = 18;</code>
       */
      public int getNHS() {
        return nHS_;
      }
      /**
       * <code>required int32 NHS = 18;</code>
       */
      public Builder setNHS(int value) {
        bitField0_ |= 0x00020000;
        nHS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 NHS = 18;</code>
       */
      public Builder clearNHS() {
        bitField0_ = (bitField0_ & ~0x00020000);
        nHS_ = 0;
        onChanged();
        return this;
      }

      // required int32 RUR_URB = 19;
      private int rURURB_ ;
      /**
       * <code>required int32 RUR_URB = 19;</code>
       */
      public boolean hasRURURB() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>required int32 RUR_URB = 19;</code>
       */
      public int getRURURB() {
        return rURURB_;
      }
      /**
       * <code>required int32 RUR_URB = 19;</code>
       */
      public Builder setRURURB(int value) {
        bitField0_ |= 0x00040000;
        rURURB_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 RUR_URB = 19;</code>
       */
      public Builder clearRURURB() {
        bitField0_ = (bitField0_ & ~0x00040000);
        rURURB_ = 0;
        onChanged();
        return this;
      }

      // required int32 FUNC_SYS = 20;
      private int fUNCSYS_ ;
      /**
       * <code>required int32 FUNC_SYS = 20;</code>
       */
      public boolean hasFUNCSYS() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>required int32 FUNC_SYS = 20;</code>
       */
      public int getFUNCSYS() {
        return fUNCSYS_;
      }
      /**
       * <code>required int32 FUNC_SYS = 20;</code>
       */
      public Builder setFUNCSYS(int value) {
        bitField0_ |= 0x00080000;
        fUNCSYS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 FUNC_SYS = 20;</code>
       */
      public Builder clearFUNCSYS() {
        bitField0_ = (bitField0_ & ~0x00080000);
        fUNCSYS_ = 0;
        onChanged();
        return this;
      }

      // required int32 RD_OWNER = 21;
      private int rDOWNER_ ;
      /**
       * <code>required int32 RD_OWNER = 21;</code>
       */
      public boolean hasRDOWNER() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>required int32 RD_OWNER = 21;</code>
       */
      public int getRDOWNER() {
        return rDOWNER_;
      }
      /**
       * <code>required int32 RD_OWNER = 21;</code>
       */
      public Builder setRDOWNER(int value) {
        bitField0_ |= 0x00100000;
        rDOWNER_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 RD_OWNER = 21;</code>
       */
      public Builder clearRDOWNER() {
        bitField0_ = (bitField0_ & ~0x00100000);
        rDOWNER_ = 0;
        onChanged();
        return this;
      }

      // required int32 ROUTE = 22;
      private int rOUTE_ ;
      /**
       * <code>required int32 ROUTE = 22;</code>
       */
      public boolean hasROUTE() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>required int32 ROUTE = 22;</code>
       */
      public int getROUTE() {
        return rOUTE_;
      }
      /**
       * <code>required int32 ROUTE = 22;</code>
       */
      public Builder setROUTE(int value) {
        bitField0_ |= 0x00200000;
        rOUTE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 ROUTE = 22;</code>
       */
      public Builder clearROUTE() {
        bitField0_ = (bitField0_ & ~0x00200000);
        rOUTE_ = 0;
        onChanged();
        return this;
      }

      // required string TWAY_ID = 23;
      private java.lang.Object tWAYID_ = "";
      /**
       * <code>required string TWAY_ID = 23;</code>
       */
      public boolean hasTWAYID() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>required string TWAY_ID = 23;</code>
       */
      public java.lang.String getTWAYID() {
        java.lang.Object ref = tWAYID_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          tWAYID_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string TWAY_ID = 23;</code>
       */
      public com.google.protobuf.ByteString
          getTWAYIDBytes() {
        java.lang.Object ref = tWAYID_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tWAYID_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string TWAY_ID = 23;</code>
       */
      public Builder setTWAYID(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00400000;
        tWAYID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string TWAY_ID = 23;</code>
       */
      public Builder clearTWAYID() {
        bitField0_ = (bitField0_ & ~0x00400000);
        tWAYID_ = getDefaultInstance().getTWAYID();
        onChanged();
        return this;
      }
      /**
       * <code>required string TWAY_ID = 23;</code>
       */
      public Builder setTWAYIDBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00400000;
        tWAYID_ = value;
        onChanged();
        return this;
      }

      // optional string TWAY_ID2 = 24;
      private java.lang.Object tWAYID2_ = "";
      /**
       * <code>optional string TWAY_ID2 = 24;</code>
       */
      public boolean hasTWAYID2() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional string TWAY_ID2 = 24;</code>
       */
      public java.lang.String getTWAYID2() {
        java.lang.Object ref = tWAYID2_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          tWAYID2_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string TWAY_ID2 = 24;</code>
       */
      public com.google.protobuf.ByteString
          getTWAYID2Bytes() {
        java.lang.Object ref = tWAYID2_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tWAYID2_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string TWAY_ID2 = 24;</code>
       */
      public Builder setTWAYID2(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00800000;
        tWAYID2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string TWAY_ID2 = 24;</code>
       */
      public Builder clearTWAYID2() {
        bitField0_ = (bitField0_ & ~0x00800000);
        tWAYID2_ = getDefaultInstance().getTWAYID2();
        onChanged();
        return this;
      }
      /**
       * <code>optional string TWAY_ID2 = 24;</code>
       */
      public Builder setTWAYID2Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00800000;
        tWAYID2_ = value;
        onChanged();
        return this;
      }

      // required int32 MILEPT = 25;
      private int mILEPT_ ;
      /**
       * <code>required int32 MILEPT = 25;</code>
       */
      public boolean hasMILEPT() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>required int32 MILEPT = 25;</code>
       */
      public int getMILEPT() {
        return mILEPT_;
      }
      /**
       * <code>required int32 MILEPT = 25;</code>
       */
      public Builder setMILEPT(int value) {
        bitField0_ |= 0x01000000;
        mILEPT_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 MILEPT = 25;</code>
       */
      public Builder clearMILEPT() {
        bitField0_ = (bitField0_ & ~0x01000000);
        mILEPT_ = 0;
        onChanged();
        return this;
      }

      // optional float LATITUDE = 26;
      private float lATITUDE_ ;
      /**
       * <code>optional float LATITUDE = 26;</code>
       */
      public boolean hasLATITUDE() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional float LATITUDE = 26;</code>
       */
      public float getLATITUDE() {
        return lATITUDE_;
      }
      /**
       * <code>optional float LATITUDE = 26;</code>
       */
      public Builder setLATITUDE(float value) {
        bitField0_ |= 0x02000000;
        lATITUDE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float LATITUDE = 26;</code>
       */
      public Builder clearLATITUDE() {
        bitField0_ = (bitField0_ & ~0x02000000);
        lATITUDE_ = 0F;
        onChanged();
        return this;
      }

      // optional float LONGITUD = 27;
      private float lONGITUD_ ;
      /**
       * <code>optional float LONGITUD = 27;</code>
       */
      public boolean hasLONGITUD() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional float LONGITUD = 27;</code>
       */
      public float getLONGITUD() {
        return lONGITUD_;
      }
      /**
       * <code>optional float LONGITUD = 27;</code>
       */
      public Builder setLONGITUD(float value) {
        bitField0_ |= 0x04000000;
        lONGITUD_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float LONGITUD = 27;</code>
       */
      public Builder clearLONGITUD() {
        bitField0_ = (bitField0_ & ~0x04000000);
        lONGITUD_ = 0F;
        onChanged();
        return this;
      }

      // required int32 SP_JUR = 28;
      private int sPJUR_ ;
      /**
       * <code>required int32 SP_JUR = 28;</code>
       */
      public boolean hasSPJUR() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>required int32 SP_JUR = 28;</code>
       */
      public int getSPJUR() {
        return sPJUR_;
      }
      /**
       * <code>required int32 SP_JUR = 28;</code>
       */
      public Builder setSPJUR(int value) {
        bitField0_ |= 0x08000000;
        sPJUR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 SP_JUR = 28;</code>
       */
      public Builder clearSPJUR() {
        bitField0_ = (bitField0_ & ~0x08000000);
        sPJUR_ = 0;
        onChanged();
        return this;
      }

      // required int32 HARM_EV = 29;
      private int hARMEV_ ;
      /**
       * <code>required int32 HARM_EV = 29;</code>
       */
      public boolean hasHARMEV() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>required int32 HARM_EV = 29;</code>
       */
      public int getHARMEV() {
        return hARMEV_;
      }
      /**
       * <code>required int32 HARM_EV = 29;</code>
       */
      public Builder setHARMEV(int value) {
        bitField0_ |= 0x10000000;
        hARMEV_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 HARM_EV = 29;</code>
       */
      public Builder clearHARMEV() {
        bitField0_ = (bitField0_ & ~0x10000000);
        hARMEV_ = 0;
        onChanged();
        return this;
      }

      // required int32 MAN_COLL = 30;
      private int mANCOLL_ ;
      /**
       * <code>required int32 MAN_COLL = 30;</code>
       */
      public boolean hasMANCOLL() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>required int32 MAN_COLL = 30;</code>
       */
      public int getMANCOLL() {
        return mANCOLL_;
      }
      /**
       * <code>required int32 MAN_COLL = 30;</code>
       */
      public Builder setMANCOLL(int value) {
        bitField0_ |= 0x20000000;
        mANCOLL_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 MAN_COLL = 30;</code>
       */
      public Builder clearMANCOLL() {
        bitField0_ = (bitField0_ & ~0x20000000);
        mANCOLL_ = 0;
        onChanged();
        return this;
      }

      // required int32 RELJCT1 = 31;
      private int rELJCT1_ ;
      /**
       * <code>required int32 RELJCT1 = 31;</code>
       */
      public boolean hasRELJCT1() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>required int32 RELJCT1 = 31;</code>
       */
      public int getRELJCT1() {
        return rELJCT1_;
      }
      /**
       * <code>required int32 RELJCT1 = 31;</code>
       */
      public Builder setRELJCT1(int value) {
        bitField0_ |= 0x40000000;
        rELJCT1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 RELJCT1 = 31;</code>
       */
      public Builder clearRELJCT1() {
        bitField0_ = (bitField0_ & ~0x40000000);
        rELJCT1_ = 0;
        onChanged();
        return this;
      }

      // required int32 RELJCT2 = 32;
      private int rELJCT2_ ;
      /**
       * <code>required int32 RELJCT2 = 32;</code>
       */
      public boolean hasRELJCT2() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>required int32 RELJCT2 = 32;</code>
       */
      public int getRELJCT2() {
        return rELJCT2_;
      }
      /**
       * <code>required int32 RELJCT2 = 32;</code>
       */
      public Builder setRELJCT2(int value) {
        bitField0_ |= 0x80000000;
        rELJCT2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 RELJCT2 = 32;</code>
       */
      public Builder clearRELJCT2() {
        bitField0_ = (bitField0_ & ~0x80000000);
        rELJCT2_ = 0;
        onChanged();
        return this;
      }

      // required int32 TYP_INT = 33;
      private int tYPINT_ ;
      /**
       * <code>required int32 TYP_INT = 33;</code>
       */
      public boolean hasTYPINT() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 TYP_INT = 33;</code>
       */
      public int getTYPINT() {
        return tYPINT_;
      }
      /**
       * <code>required int32 TYP_INT = 33;</code>
       */
      public Builder setTYPINT(int value) {
        bitField1_ |= 0x00000001;
        tYPINT_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 TYP_INT = 33;</code>
       */
      public Builder clearTYPINT() {
        bitField1_ = (bitField1_ & ~0x00000001);
        tYPINT_ = 0;
        onChanged();
        return this;
      }

      // required int32 WRK_ZONE = 34;
      private int wRKZONE_ ;
      /**
       * <code>required int32 WRK_ZONE = 34;</code>
       */
      public boolean hasWRKZONE() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 WRK_ZONE = 34;</code>
       */
      public int getWRKZONE() {
        return wRKZONE_;
      }
      /**
       * <code>required int32 WRK_ZONE = 34;</code>
       */
      public Builder setWRKZONE(int value) {
        bitField1_ |= 0x00000002;
        wRKZONE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 WRK_ZONE = 34;</code>
       */
      public Builder clearWRKZONE() {
        bitField1_ = (bitField1_ & ~0x00000002);
        wRKZONE_ = 0;
        onChanged();
        return this;
      }

      // required int32 REL_ROAD = 35;
      private int rELROAD_ ;
      /**
       * <code>required int32 REL_ROAD = 35;</code>
       */
      public boolean hasRELROAD() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 REL_ROAD = 35;</code>
       */
      public int getRELROAD() {
        return rELROAD_;
      }
      /**
       * <code>required int32 REL_ROAD = 35;</code>
       */
      public Builder setRELROAD(int value) {
        bitField1_ |= 0x00000004;
        rELROAD_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 REL_ROAD = 35;</code>
       */
      public Builder clearRELROAD() {
        bitField1_ = (bitField1_ & ~0x00000004);
        rELROAD_ = 0;
        onChanged();
        return this;
      }

      // required int32 LGT_COND = 36;
      private int lGTCOND_ ;
      /**
       * <code>required int32 LGT_COND = 36;</code>
       */
      public boolean hasLGTCOND() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 LGT_COND = 36;</code>
       */
      public int getLGTCOND() {
        return lGTCOND_;
      }
      /**
       * <code>required int32 LGT_COND = 36;</code>
       */
      public Builder setLGTCOND(int value) {
        bitField1_ |= 0x00000008;
        lGTCOND_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 LGT_COND = 36;</code>
       */
      public Builder clearLGTCOND() {
        bitField1_ = (bitField1_ & ~0x00000008);
        lGTCOND_ = 0;
        onChanged();
        return this;
      }

      // required int32 WEATHER1 = 37;
      private int wEATHER1_ ;
      /**
       * <code>required int32 WEATHER1 = 37;</code>
       */
      public boolean hasWEATHER1() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 WEATHER1 = 37;</code>
       */
      public int getWEATHER1() {
        return wEATHER1_;
      }
      /**
       * <code>required int32 WEATHER1 = 37;</code>
       */
      public Builder setWEATHER1(int value) {
        bitField1_ |= 0x00000010;
        wEATHER1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 WEATHER1 = 37;</code>
       */
      public Builder clearWEATHER1() {
        bitField1_ = (bitField1_ & ~0x00000010);
        wEATHER1_ = 0;
        onChanged();
        return this;
      }

      // required int32 WEATHER2 = 38;
      private int wEATHER2_ ;
      /**
       * <code>required int32 WEATHER2 = 38;</code>
       */
      public boolean hasWEATHER2() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 WEATHER2 = 38;</code>
       */
      public int getWEATHER2() {
        return wEATHER2_;
      }
      /**
       * <code>required int32 WEATHER2 = 38;</code>
       */
      public Builder setWEATHER2(int value) {
        bitField1_ |= 0x00000020;
        wEATHER2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 WEATHER2 = 38;</code>
       */
      public Builder clearWEATHER2() {
        bitField1_ = (bitField1_ & ~0x00000020);
        wEATHER2_ = 0;
        onChanged();
        return this;
      }

      // required int32 WEATHER = 39;
      private int wEATHER_ ;
      /**
       * <code>required int32 WEATHER = 39;</code>
       */
      public boolean hasWEATHER() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 WEATHER = 39;</code>
       */
      public int getWEATHER() {
        return wEATHER_;
      }
      /**
       * <code>required int32 WEATHER = 39;</code>
       */
      public Builder setWEATHER(int value) {
        bitField1_ |= 0x00000040;
        wEATHER_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 WEATHER = 39;</code>
       */
      public Builder clearWEATHER() {
        bitField1_ = (bitField1_ & ~0x00000040);
        wEATHER_ = 0;
        onChanged();
        return this;
      }

      // required int32 SCH_BUS = 40;
      private int sCHBUS_ ;
      /**
       * <code>required int32 SCH_BUS = 40;</code>
       */
      public boolean hasSCHBUS() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required int32 SCH_BUS = 40;</code>
       */
      public int getSCHBUS() {
        return sCHBUS_;
      }
      /**
       * <code>required int32 SCH_BUS = 40;</code>
       */
      public Builder setSCHBUS(int value) {
        bitField1_ |= 0x00000080;
        sCHBUS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 SCH_BUS = 40;</code>
       */
      public Builder clearSCHBUS() {
        bitField1_ = (bitField1_ & ~0x00000080);
        sCHBUS_ = 0;
        onChanged();
        return this;
      }

      // required string RAIL = 41;
      private java.lang.Object rAIL_ = "";
      /**
       * <code>required string RAIL = 41;</code>
       */
      public boolean hasRAIL() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required string RAIL = 41;</code>
       */
      public java.lang.String getRAIL() {
        java.lang.Object ref = rAIL_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          rAIL_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string RAIL = 41;</code>
       */
      public com.google.protobuf.ByteString
          getRAILBytes() {
        java.lang.Object ref = rAIL_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          rAIL_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string RAIL = 41;</code>
       */
      public Builder setRAIL(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000100;
        rAIL_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string RAIL = 41;</code>
       */
      public Builder clearRAIL() {
        bitField1_ = (bitField1_ & ~0x00000100);
        rAIL_ = getDefaultInstance().getRAIL();
        onChanged();
        return this;
      }
      /**
       * <code>required string RAIL = 41;</code>
       */
      public Builder setRAILBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000100;
        rAIL_ = value;
        onChanged();
        return this;
      }

      // required int32 NOT_HOUR = 42;
      private int nOTHOUR_ ;
      /**
       * <code>required int32 NOT_HOUR = 42;</code>
       */
      public boolean hasNOTHOUR() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required int32 NOT_HOUR = 42;</code>
       */
      public int getNOTHOUR() {
        return nOTHOUR_;
      }
      /**
       * <code>required int32 NOT_HOUR = 42;</code>
       */
      public Builder setNOTHOUR(int value) {
        bitField1_ |= 0x00000200;
        nOTHOUR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 NOT_HOUR = 42;</code>
       */
      public Builder clearNOTHOUR() {
        bitField1_ = (bitField1_ & ~0x00000200);
        nOTHOUR_ = 0;
        onChanged();
        return this;
      }

      // required int32 NOT_MIN = 43;
      private int nOTMIN_ ;
      /**
       * <code>required int32 NOT_MIN = 43;</code>
       */
      public boolean hasNOTMIN() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required int32 NOT_MIN = 43;</code>
       */
      public int getNOTMIN() {
        return nOTMIN_;
      }
      /**
       * <code>required int32 NOT_MIN = 43;</code>
       */
      public Builder setNOTMIN(int value) {
        bitField1_ |= 0x00000400;
        nOTMIN_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 NOT_MIN = 43;</code>
       */
      public Builder clearNOTMIN() {
        bitField1_ = (bitField1_ & ~0x00000400);
        nOTMIN_ = 0;
        onChanged();
        return this;
      }

      // required int32 ARR_HOUR = 44;
      private int aRRHOUR_ ;
      /**
       * <code>required int32 ARR_HOUR = 44;</code>
       */
      public boolean hasARRHOUR() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required int32 ARR_HOUR = 44;</code>
       */
      public int getARRHOUR() {
        return aRRHOUR_;
      }
      /**
       * <code>required int32 ARR_HOUR = 44;</code>
       */
      public Builder setARRHOUR(int value) {
        bitField1_ |= 0x00000800;
        aRRHOUR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 ARR_HOUR = 44;</code>
       */
      public Builder clearARRHOUR() {
        bitField1_ = (bitField1_ & ~0x00000800);
        aRRHOUR_ = 0;
        onChanged();
        return this;
      }

      // required int32 ARR_MIN = 45;
      private int aRRMIN_ ;
      /**
       * <code>required int32 ARR_MIN = 45;</code>
       */
      public boolean hasARRMIN() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required int32 ARR_MIN = 45;</code>
       */
      public int getARRMIN() {
        return aRRMIN_;
      }
      /**
       * <code>required int32 ARR_MIN = 45;</code>
       */
      public Builder setARRMIN(int value) {
        bitField1_ |= 0x00001000;
        aRRMIN_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 ARR_MIN = 45;</code>
       */
      public Builder clearARRMIN() {
        bitField1_ = (bitField1_ & ~0x00001000);
        aRRMIN_ = 0;
        onChanged();
        return this;
      }

      // required int32 HOSP_HR = 46;
      private int hOSPHR_ ;
      /**
       * <code>required int32 HOSP_HR = 46;</code>
       */
      public boolean hasHOSPHR() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required int32 HOSP_HR = 46;</code>
       */
      public int getHOSPHR() {
        return hOSPHR_;
      }
      /**
       * <code>required int32 HOSP_HR = 46;</code>
       */
      public Builder setHOSPHR(int value) {
        bitField1_ |= 0x00002000;
        hOSPHR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 HOSP_HR = 46;</code>
       */
      public Builder clearHOSPHR() {
        bitField1_ = (bitField1_ & ~0x00002000);
        hOSPHR_ = 0;
        onChanged();
        return this;
      }

      // required int32 HOSP_MN = 47;
      private int hOSPMN_ ;
      /**
       * <code>required int32 HOSP_MN = 47;</code>
       */
      public boolean hasHOSPMN() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>required int32 HOSP_MN = 47;</code>
       */
      public int getHOSPMN() {
        return hOSPMN_;
      }
      /**
       * <code>required int32 HOSP_MN = 47;</code>
       */
      public Builder setHOSPMN(int value) {
        bitField1_ |= 0x00004000;
        hOSPMN_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 HOSP_MN = 47;</code>
       */
      public Builder clearHOSPMN() {
        bitField1_ = (bitField1_ & ~0x00004000);
        hOSPMN_ = 0;
        onChanged();
        return this;
      }

      // required int32 CF1 = 48;
      private int cF1_ ;
      /**
       * <code>required int32 CF1 = 48;</code>
       */
      public boolean hasCF1() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>required int32 CF1 = 48;</code>
       */
      public int getCF1() {
        return cF1_;
      }
      /**
       * <code>required int32 CF1 = 48;</code>
       */
      public Builder setCF1(int value) {
        bitField1_ |= 0x00008000;
        cF1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 CF1 = 48;</code>
       */
      public Builder clearCF1() {
        bitField1_ = (bitField1_ & ~0x00008000);
        cF1_ = 0;
        onChanged();
        return this;
      }

      // required int32 CF2 = 49;
      private int cF2_ ;
      /**
       * <code>required int32 CF2 = 49;</code>
       */
      public boolean hasCF2() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>required int32 CF2 = 49;</code>
       */
      public int getCF2() {
        return cF2_;
      }
      /**
       * <code>required int32 CF2 = 49;</code>
       */
      public Builder setCF2(int value) {
        bitField1_ |= 0x00010000;
        cF2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 CF2 = 49;</code>
       */
      public Builder clearCF2() {
        bitField1_ = (bitField1_ & ~0x00010000);
        cF2_ = 0;
        onChanged();
        return this;
      }

      // required int32 CF3 = 50;
      private int cF3_ ;
      /**
       * <code>required int32 CF3 = 50;</code>
       */
      public boolean hasCF3() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>required int32 CF3 = 50;</code>
       */
      public int getCF3() {
        return cF3_;
      }
      /**
       * <code>required int32 CF3 = 50;</code>
       */
      public Builder setCF3(int value) {
        bitField1_ |= 0x00020000;
        cF3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 CF3 = 50;</code>
       */
      public Builder clearCF3() {
        bitField1_ = (bitField1_ & ~0x00020000);
        cF3_ = 0;
        onChanged();
        return this;
      }

      // required int32 FATALS = 51;
      private int fATALS_ ;
      /**
       * <code>required int32 FATALS = 51;</code>
       */
      public boolean hasFATALS() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>required int32 FATALS = 51;</code>
       */
      public int getFATALS() {
        return fATALS_;
      }
      /**
       * <code>required int32 FATALS = 51;</code>
       */
      public Builder setFATALS(int value) {
        bitField1_ |= 0x00040000;
        fATALS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 FATALS = 51;</code>
       */
      public Builder clearFATALS() {
        bitField1_ = (bitField1_ & ~0x00040000);
        fATALS_ = 0;
        onChanged();
        return this;
      }

      // required int32 DRUNK_DR = 52;
      private int dRUNKDR_ ;
      /**
       * <code>required int32 DRUNK_DR = 52;</code>
       */
      public boolean hasDRUNKDR() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>required int32 DRUNK_DR = 52;</code>
       */
      public int getDRUNKDR() {
        return dRUNKDR_;
      }
      /**
       * <code>required int32 DRUNK_DR = 52;</code>
       */
      public Builder setDRUNKDR(int value) {
        bitField1_ |= 0x00080000;
        dRUNKDR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 DRUNK_DR = 52;</code>
       */
      public Builder clearDRUNKDR() {
        bitField1_ = (bitField1_ & ~0x00080000);
        dRUNKDR_ = 0;
        onChanged();
        return this;
      }

      // repeated .boa.types.Person persons = 53;
      private java.util.List<boa.types.Transport.Person> persons_ =
        java.util.Collections.emptyList();
      private void ensurePersonsIsMutable() {
        if (!((bitField1_ & 0x00100000) == 0x00100000)) {
          persons_ = new java.util.ArrayList<boa.types.Transport.Person>(persons_);
          bitField1_ |= 0x00100000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          boa.types.Transport.Person, boa.types.Transport.Person.Builder, boa.types.Transport.PersonOrBuilder> personsBuilder_;

      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public java.util.List<boa.types.Transport.Person> getPersonsList() {
        if (personsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(persons_);
        } else {
          return personsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public int getPersonsCount() {
        if (personsBuilder_ == null) {
          return persons_.size();
        } else {
          return personsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public boa.types.Transport.Person getPersons(int index) {
        if (personsBuilder_ == null) {
          return persons_.get(index);
        } else {
          return personsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public Builder setPersons(
          int index, boa.types.Transport.Person value) {
        if (personsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePersonsIsMutable();
          persons_.set(index, value);
          onChanged();
        } else {
          personsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public Builder setPersons(
          int index, boa.types.Transport.Person.Builder builderForValue) {
        if (personsBuilder_ == null) {
          ensurePersonsIsMutable();
          persons_.set(index, builderForValue.build());
          onChanged();
        } else {
          personsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public Builder addPersons(boa.types.Transport.Person value) {
        if (personsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePersonsIsMutable();
          persons_.add(value);
          onChanged();
        } else {
          personsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public Builder addPersons(
          int index, boa.types.Transport.Person value) {
        if (personsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePersonsIsMutable();
          persons_.add(index, value);
          onChanged();
        } else {
          personsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public Builder addPersons(
          boa.types.Transport.Person.Builder builderForValue) {
        if (personsBuilder_ == null) {
          ensurePersonsIsMutable();
          persons_.add(builderForValue.build());
          onChanged();
        } else {
          personsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public Builder addPersons(
          int index, boa.types.Transport.Person.Builder builderForValue) {
        if (personsBuilder_ == null) {
          ensurePersonsIsMutable();
          persons_.add(index, builderForValue.build());
          onChanged();
        } else {
          personsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public Builder addAllPersons(
          java.lang.Iterable<? extends boa.types.Transport.Person> values) {
        if (personsBuilder_ == null) {
          ensurePersonsIsMutable();
          super.addAll(values, persons_);
          onChanged();
        } else {
          personsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public Builder clearPersons() {
        if (personsBuilder_ == null) {
          persons_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00100000);
          onChanged();
        } else {
          personsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public Builder removePersons(int index) {
        if (personsBuilder_ == null) {
          ensurePersonsIsMutable();
          persons_.remove(index);
          onChanged();
        } else {
          personsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public boa.types.Transport.Person.Builder getPersonsBuilder(
          int index) {
        return getPersonsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public boa.types.Transport.PersonOrBuilder getPersonsOrBuilder(
          int index) {
        if (personsBuilder_ == null) {
          return persons_.get(index);  } else {
          return personsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public java.util.List<? extends boa.types.Transport.PersonOrBuilder> 
           getPersonsOrBuilderList() {
        if (personsBuilder_ != null) {
          return personsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(persons_);
        }
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public boa.types.Transport.Person.Builder addPersonsBuilder() {
        return getPersonsFieldBuilder().addBuilder(
            boa.types.Transport.Person.getDefaultInstance());
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public boa.types.Transport.Person.Builder addPersonsBuilder(
          int index) {
        return getPersonsFieldBuilder().addBuilder(
            index, boa.types.Transport.Person.getDefaultInstance());
      }
      /**
       * <code>repeated .boa.types.Person persons = 53;</code>
       */
      public java.util.List<boa.types.Transport.Person.Builder> 
           getPersonsBuilderList() {
        return getPersonsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          boa.types.Transport.Person, boa.types.Transport.Person.Builder, boa.types.Transport.PersonOrBuilder> 
          getPersonsFieldBuilder() {
        if (personsBuilder_ == null) {
          personsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              boa.types.Transport.Person, boa.types.Transport.Person.Builder, boa.types.Transport.PersonOrBuilder>(
                  persons_,
                  ((bitField1_ & 0x00100000) == 0x00100000),
                  getParentForChildren(),
                  isClean());
          persons_ = null;
        }
        return personsBuilder_;
      }

      // repeated .boa.types.Vehicle vehicle = 54;
      private java.util.List<boa.types.Transport.Vehicle> vehicle_ =
        java.util.Collections.emptyList();
      private void ensureVehicleIsMutable() {
        if (!((bitField1_ & 0x00200000) == 0x00200000)) {
          vehicle_ = new java.util.ArrayList<boa.types.Transport.Vehicle>(vehicle_);
          bitField1_ |= 0x00200000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          boa.types.Transport.Vehicle, boa.types.Transport.Vehicle.Builder, boa.types.Transport.VehicleOrBuilder> vehicleBuilder_;

      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public java.util.List<boa.types.Transport.Vehicle> getVehicleList() {
        if (vehicleBuilder_ == null) {
          return java.util.Collections.unmodifiableList(vehicle_);
        } else {
          return vehicleBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public int getVehicleCount() {
        if (vehicleBuilder_ == null) {
          return vehicle_.size();
        } else {
          return vehicleBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public boa.types.Transport.Vehicle getVehicle(int index) {
        if (vehicleBuilder_ == null) {
          return vehicle_.get(index);
        } else {
          return vehicleBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public Builder setVehicle(
          int index, boa.types.Transport.Vehicle value) {
        if (vehicleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVehicleIsMutable();
          vehicle_.set(index, value);
          onChanged();
        } else {
          vehicleBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public Builder setVehicle(
          int index, boa.types.Transport.Vehicle.Builder builderForValue) {
        if (vehicleBuilder_ == null) {
          ensureVehicleIsMutable();
          vehicle_.set(index, builderForValue.build());
          onChanged();
        } else {
          vehicleBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public Builder addVehicle(boa.types.Transport.Vehicle value) {
        if (vehicleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVehicleIsMutable();
          vehicle_.add(value);
          onChanged();
        } else {
          vehicleBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public Builder addVehicle(
          int index, boa.types.Transport.Vehicle value) {
        if (vehicleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVehicleIsMutable();
          vehicle_.add(index, value);
          onChanged();
        } else {
          vehicleBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public Builder addVehicle(
          boa.types.Transport.Vehicle.Builder builderForValue) {
        if (vehicleBuilder_ == null) {
          ensureVehicleIsMutable();
          vehicle_.add(builderForValue.build());
          onChanged();
        } else {
          vehicleBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public Builder addVehicle(
          int index, boa.types.Transport.Vehicle.Builder builderForValue) {
        if (vehicleBuilder_ == null) {
          ensureVehicleIsMutable();
          vehicle_.add(index, builderForValue.build());
          onChanged();
        } else {
          vehicleBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public Builder addAllVehicle(
          java.lang.Iterable<? extends boa.types.Transport.Vehicle> values) {
        if (vehicleBuilder_ == null) {
          ensureVehicleIsMutable();
          super.addAll(values, vehicle_);
          onChanged();
        } else {
          vehicleBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public Builder clearVehicle() {
        if (vehicleBuilder_ == null) {
          vehicle_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00200000);
          onChanged();
        } else {
          vehicleBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public Builder removeVehicle(int index) {
        if (vehicleBuilder_ == null) {
          ensureVehicleIsMutable();
          vehicle_.remove(index);
          onChanged();
        } else {
          vehicleBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public boa.types.Transport.Vehicle.Builder getVehicleBuilder(
          int index) {
        return getVehicleFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public boa.types.Transport.VehicleOrBuilder getVehicleOrBuilder(
          int index) {
        if (vehicleBuilder_ == null) {
          return vehicle_.get(index);  } else {
          return vehicleBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public java.util.List<? extends boa.types.Transport.VehicleOrBuilder> 
           getVehicleOrBuilderList() {
        if (vehicleBuilder_ != null) {
          return vehicleBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(vehicle_);
        }
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public boa.types.Transport.Vehicle.Builder addVehicleBuilder() {
        return getVehicleFieldBuilder().addBuilder(
            boa.types.Transport.Vehicle.getDefaultInstance());
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public boa.types.Transport.Vehicle.Builder addVehicleBuilder(
          int index) {
        return getVehicleFieldBuilder().addBuilder(
            index, boa.types.Transport.Vehicle.getDefaultInstance());
      }
      /**
       * <code>repeated .boa.types.Vehicle vehicle = 54;</code>
       */
      public java.util.List<boa.types.Transport.Vehicle.Builder> 
           getVehicleBuilderList() {
        return getVehicleFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          boa.types.Transport.Vehicle, boa.types.Transport.Vehicle.Builder, boa.types.Transport.VehicleOrBuilder> 
          getVehicleFieldBuilder() {
        if (vehicleBuilder_ == null) {
          vehicleBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              boa.types.Transport.Vehicle, boa.types.Transport.Vehicle.Builder, boa.types.Transport.VehicleOrBuilder>(
                  vehicle_,
                  ((bitField1_ & 0x00200000) == 0x00200000),
                  getParentForChildren(),
                  isClean());
          vehicle_ = null;
        }
        return vehicleBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:boa.types.Crash)
    }

    static {
      defaultInstance = new Crash(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:boa.types.Crash)
  }

  public interface PersonOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .boa.types.STATE state = 1;
    /**
     * <code>required .boa.types.STATE state = 1;</code>
     */
    boolean hasState();
    /**
     * <code>required .boa.types.STATE state = 1;</code>
     */
    boa.types.Transport.STATE getState();

    // required float ST_CASE = 2;
    /**
     * <code>required float ST_CASE = 2;</code>
     */
    boolean hasSTCASE();
    /**
     * <code>required float ST_CASE = 2;</code>
     */
    float getSTCASE();

    // required float VE_FORMS = 3;
    /**
     * <code>required float VE_FORMS = 3;</code>
     */
    boolean hasVEFORMS();
    /**
     * <code>required float VE_FORMS = 3;</code>
     */
    float getVEFORMS();

    // required float VEH_NO = 4;
    /**
     * <code>required float VEH_NO = 4;</code>
     */
    boolean hasVEHNO();
    /**
     * <code>required float VEH_NO = 4;</code>
     */
    float getVEHNO();

    // required float PER_NO = 5;
    /**
     * <code>required float PER_NO = 5;</code>
     */
    boolean hasPERNO();
    /**
     * <code>required float PER_NO = 5;</code>
     */
    float getPERNO();

    // required float STR_VEH = 6;
    /**
     * <code>required float STR_VEH = 6;</code>
     */
    boolean hasSTRVEH();
    /**
     * <code>required float STR_VEH = 6;</code>
     */
    float getSTRVEH();

    // required float COUNTY = 7;
    /**
     * <code>required float COUNTY = 7;</code>
     */
    boolean hasCOUNTY();
    /**
     * <code>required float COUNTY = 7;</code>
     */
    float getCOUNTY();

    // required float DAY = 8;
    /**
     * <code>required float DAY = 8;</code>
     */
    boolean hasDAY();
    /**
     * <code>required float DAY = 8;</code>
     */
    float getDAY();

    // required float MONTH = 9;
    /**
     * <code>required float MONTH = 9;</code>
     */
    boolean hasMONTH();
    /**
     * <code>required float MONTH = 9;</code>
     */
    float getMONTH();

    // required float HOUR = 10;
    /**
     * <code>required float HOUR = 10;</code>
     */
    boolean hasHOUR();
    /**
     * <code>required float HOUR = 10;</code>
     */
    float getHOUR();

    // required float MINUTE = 11;
    /**
     * <code>required float MINUTE = 11;</code>
     */
    boolean hasMINUTE();
    /**
     * <code>required float MINUTE = 11;</code>
     */
    float getMINUTE();

    // required float RUR_URB = 12;
    /**
     * <code>required float RUR_URB = 12;</code>
     */
    boolean hasRURURB();
    /**
     * <code>required float RUR_URB = 12;</code>
     */
    float getRURURB();

    // required float FUNC_SYS = 13;
    /**
     * <code>required float FUNC_SYS = 13;</code>
     */
    boolean hasFUNCSYS();
    /**
     * <code>required float FUNC_SYS = 13;</code>
     */
    float getFUNCSYS();

    // required float HARM_EV = 14;
    /**
     * <code>required float HARM_EV = 14;</code>
     */
    boolean hasHARMEV();
    /**
     * <code>required float HARM_EV = 14;</code>
     */
    float getHARMEV();

    // required float MAN_COLL = 15;
    /**
     * <code>required float MAN_COLL = 15;</code>
     */
    boolean hasMANCOLL();
    /**
     * <code>required float MAN_COLL = 15;</code>
     */
    float getMANCOLL();

    // required float SCH_BUS = 16;
    /**
     * <code>required float SCH_BUS = 16;</code>
     */
    boolean hasSCHBUS();
    /**
     * <code>required float SCH_BUS = 16;</code>
     */
    float getSCHBUS();

    // required float MAKE = 17;
    /**
     * <code>required float MAKE = 17;</code>
     */
    boolean hasMAKE();
    /**
     * <code>required float MAKE = 17;</code>
     */
    float getMAKE();

    // required float MAK_MOD = 18;
    /**
     * <code>required float MAK_MOD = 18;</code>
     */
    boolean hasMAKMOD();
    /**
     * <code>required float MAK_MOD = 18;</code>
     */
    float getMAKMOD();

    // required float BODY_TYP = 19;
    /**
     * <code>required float BODY_TYP = 19;</code>
     */
    boolean hasBODYTYP();
    /**
     * <code>required float BODY_TYP = 19;</code>
     */
    float getBODYTYP();

    // required float MOD_YEAR = 20;
    /**
     * <code>required float MOD_YEAR = 20;</code>
     */
    boolean hasMODYEAR();
    /**
     * <code>required float MOD_YEAR = 20;</code>
     */
    float getMODYEAR();

    // required float TOW_VEH = 21;
    /**
     * <code>required float TOW_VEH = 21;</code>
     */
    boolean hasTOWVEH();
    /**
     * <code>required float TOW_VEH = 21;</code>
     */
    float getTOWVEH();

    // required float SPEC_USE = 22;
    /**
     * <code>required float SPEC_USE = 22;</code>
     */
    boolean hasSPECUSE();
    /**
     * <code>required float SPEC_USE = 22;</code>
     */
    float getSPECUSE();

    // required float EMER_USE = 23;
    /**
     * <code>required float EMER_USE = 23;</code>
     */
    boolean hasEMERUSE();
    /**
     * <code>required float EMER_USE = 23;</code>
     */
    float getEMERUSE();

    // required float ROLLOVER = 24;
    /**
     * <code>required float ROLLOVER = 24;</code>
     */
    boolean hasROLLOVER();
    /**
     * <code>required float ROLLOVER = 24;</code>
     */
    float getROLLOVER();

    // required float IMPACT1 = 25;
    /**
     * <code>required float IMPACT1 = 25;</code>
     */
    boolean hasIMPACT1();
    /**
     * <code>required float IMPACT1 = 25;</code>
     */
    float getIMPACT1();

    // required float FIRE_EXP = 26;
    /**
     * <code>required float FIRE_EXP = 26;</code>
     */
    boolean hasFIREEXP();
    /**
     * <code>required float FIRE_EXP = 26;</code>
     */
    float getFIREEXP();

    // required float AGE = 27;
    /**
     * <code>required float AGE = 27;</code>
     */
    boolean hasAGE();
    /**
     * <code>required float AGE = 27;</code>
     */
    float getAGE();

    // required float SEX = 28;
    /**
     * <code>required float SEX = 28;</code>
     */
    boolean hasSEX();
    /**
     * <code>required float SEX = 28;</code>
     */
    float getSEX();

    // required float PER_TYP = 29;
    /**
     * <code>required float PER_TYP = 29;</code>
     */
    boolean hasPERTYP();
    /**
     * <code>required float PER_TYP = 29;</code>
     */
    float getPERTYP();

    // required float INJ_SEV = 30;
    /**
     * <code>required float INJ_SEV = 30;</code>
     */
    boolean hasINJSEV();
    /**
     * <code>required float INJ_SEV = 30;</code>
     */
    float getINJSEV();

    // required float SEAT_POS = 31;
    /**
     * <code>required float SEAT_POS = 31;</code>
     */
    boolean hasSEATPOS();
    /**
     * <code>required float SEAT_POS = 31;</code>
     */
    float getSEATPOS();

    // required float REST_USE = 32;
    /**
     * <code>required float REST_USE = 32;</code>
     */
    boolean hasRESTUSE();
    /**
     * <code>required float REST_USE = 32;</code>
     */
    float getRESTUSE();

    // required float REST_MIS = 33;
    /**
     * <code>required float REST_MIS = 33;</code>
     */
    boolean hasRESTMIS();
    /**
     * <code>required float REST_MIS = 33;</code>
     */
    float getRESTMIS();

    // required float AIR_BAG = 34;
    /**
     * <code>required float AIR_BAG = 34;</code>
     */
    boolean hasAIRBAG();
    /**
     * <code>required float AIR_BAG = 34;</code>
     */
    float getAIRBAG();

    // required float EJECTION = 35;
    /**
     * <code>required float EJECTION = 35;</code>
     */
    boolean hasEJECTION();
    /**
     * <code>required float EJECTION = 35;</code>
     */
    float getEJECTION();

    // required float EJ_PATH = 36;
    /**
     * <code>required float EJ_PATH = 36;</code>
     */
    boolean hasEJPATH();
    /**
     * <code>required float EJ_PATH = 36;</code>
     */
    float getEJPATH();

    // required float EXTRICAT = 37;
    /**
     * <code>required float EXTRICAT = 37;</code>
     */
    boolean hasEXTRICAT();
    /**
     * <code>required float EXTRICAT = 37;</code>
     */
    float getEXTRICAT();

    // required float DRINKING = 38;
    /**
     * <code>required float DRINKING = 38;</code>
     */
    boolean hasDRINKING();
    /**
     * <code>required float DRINKING = 38;</code>
     */
    float getDRINKING();

    // required float ALC_DET = 39;
    /**
     * <code>required float ALC_DET = 39;</code>
     */
    boolean hasALCDET();
    /**
     * <code>required float ALC_DET = 39;</code>
     */
    float getALCDET();

    // required float ALC_STATUS = 40;
    /**
     * <code>required float ALC_STATUS = 40;</code>
     */
    boolean hasALCSTATUS();
    /**
     * <code>required float ALC_STATUS = 40;</code>
     */
    float getALCSTATUS();

    // required float ATST_TYP = 41;
    /**
     * <code>required float ATST_TYP = 41;</code>
     */
    boolean hasATSTTYP();
    /**
     * <code>required float ATST_TYP = 41;</code>
     */
    float getATSTTYP();

    // required float ALC_RES = 42;
    /**
     * <code>required float ALC_RES = 42;</code>
     */
    boolean hasALCRES();
    /**
     * <code>required float ALC_RES = 42;</code>
     */
    float getALCRES();

    // required float DRUGS = 43;
    /**
     * <code>required float DRUGS = 43;</code>
     */
    boolean hasDRUGS();
    /**
     * <code>required float DRUGS = 43;</code>
     */
    float getDRUGS();

    // required float DRUG_DET = 44;
    /**
     * <code>required float DRUG_DET = 44;</code>
     */
    boolean hasDRUGDET();
    /**
     * <code>required float DRUG_DET = 44;</code>
     */
    float getDRUGDET();

    // required float DSTATUS = 45;
    /**
     * <code>required float DSTATUS = 45;</code>
     */
    boolean hasDSTATUS();
    /**
     * <code>required float DSTATUS = 45;</code>
     */
    float getDSTATUS();

    // optional float DRUGTST1 = 46;
    /**
     * <code>optional float DRUGTST1 = 46;</code>
     */
    boolean hasDRUGTST1();
    /**
     * <code>optional float DRUGTST1 = 46;</code>
     */
    float getDRUGTST1();

    // optional float DRUGTST2 = 47;
    /**
     * <code>optional float DRUGTST2 = 47;</code>
     */
    boolean hasDRUGTST2();
    /**
     * <code>optional float DRUGTST2 = 47;</code>
     */
    float getDRUGTST2();

    // optional float DRUGTST3 = 48;
    /**
     * <code>optional float DRUGTST3 = 48;</code>
     */
    boolean hasDRUGTST3();
    /**
     * <code>optional float DRUGTST3 = 48;</code>
     */
    float getDRUGTST3();

    // optional float DRUGRES1 = 49;
    /**
     * <code>optional float DRUGRES1 = 49;</code>
     */
    boolean hasDRUGRES1();
    /**
     * <code>optional float DRUGRES1 = 49;</code>
     */
    float getDRUGRES1();

    // optional float DRUGRES2 = 50;
    /**
     * <code>optional float DRUGRES2 = 50;</code>
     */
    boolean hasDRUGRES2();
    /**
     * <code>optional float DRUGRES2 = 50;</code>
     */
    float getDRUGRES2();

    // optional float DRUGRES3 = 51;
    /**
     * <code>optional float DRUGRES3 = 51;</code>
     */
    boolean hasDRUGRES3();
    /**
     * <code>optional float DRUGRES3 = 51;</code>
     */
    float getDRUGRES3();

    // required float HOSPITAL = 52;
    /**
     * <code>required float HOSPITAL = 52;</code>
     */
    boolean hasHOSPITAL();
    /**
     * <code>required float HOSPITAL = 52;</code>
     */
    float getHOSPITAL();

    // required float DOA = 53;
    /**
     * <code>required float DOA = 53;</code>
     */
    boolean hasDOA();
    /**
     * <code>required float DOA = 53;</code>
     */
    float getDOA();

    // required float DEATH_DA = 54;
    /**
     * <code>required float DEATH_DA = 54;</code>
     */
    boolean hasDEATHDA();
    /**
     * <code>required float DEATH_DA = 54;</code>
     */
    float getDEATHDA();

    // required float DEATH_MO = 55;
    /**
     * <code>required float DEATH_MO = 55;</code>
     */
    boolean hasDEATHMO();
    /**
     * <code>required float DEATH_MO = 55;</code>
     */
    float getDEATHMO();

    // required float DEATH_YR = 56;
    /**
     * <code>required float DEATH_YR = 56;</code>
     */
    boolean hasDEATHYR();
    /**
     * <code>required float DEATH_YR = 56;</code>
     */
    float getDEATHYR();

    // required float DEATH_HR = 57;
    /**
     * <code>required float DEATH_HR = 57;</code>
     */
    boolean hasDEATHHR();
    /**
     * <code>required float DEATH_HR = 57;</code>
     */
    float getDEATHHR();

    // required float DEATH_MN = 58;
    /**
     * <code>required float DEATH_MN = 58;</code>
     */
    boolean hasDEATHMN();
    /**
     * <code>required float DEATH_MN = 58;</code>
     */
    float getDEATHMN();

    // required float DEATH_TM = 59;
    /**
     * <code>required float DEATH_TM = 59;</code>
     */
    boolean hasDEATHTM();
    /**
     * <code>required float DEATH_TM = 59;</code>
     */
    float getDEATHTM();

    // required float LAG_HRS = 60;
    /**
     * <code>required float LAG_HRS = 60;</code>
     */
    boolean hasLAGHRS();
    /**
     * <code>required float LAG_HRS = 60;</code>
     */
    float getLAGHRS();

    // required float LAG_MINS = 61;
    /**
     * <code>required float LAG_MINS = 61;</code>
     */
    boolean hasLAGMINS();
    /**
     * <code>required float LAG_MINS = 61;</code>
     */
    float getLAGMINS();

    // required float P_SF1 = 62;
    /**
     * <code>required float P_SF1 = 62;</code>
     */
    boolean hasPSF1();
    /**
     * <code>required float P_SF1 = 62;</code>
     */
    float getPSF1();

    // optional float P_SF2 = 63;
    /**
     * <code>optional float P_SF2 = 63;</code>
     */
    boolean hasPSF2();
    /**
     * <code>optional float P_SF2 = 63;</code>
     */
    float getPSF2();

    // optional float P_SF3 = 64;
    /**
     * <code>optional float P_SF3 = 64;</code>
     */
    boolean hasPSF3();
    /**
     * <code>optional float P_SF3 = 64;</code>
     */
    float getPSF3();

    // required float WORK_INJ = 65;
    /**
     * <code>required float WORK_INJ = 65;</code>
     */
    boolean hasWORKINJ();
    /**
     * <code>required float WORK_INJ = 65;</code>
     */
    float getWORKINJ();

    // required float HISPANIC = 66;
    /**
     * <code>required float HISPANIC = 66;</code>
     */
    boolean hasHISPANIC();
    /**
     * <code>required float HISPANIC = 66;</code>
     */
    float getHISPANIC();

    // required float RACE = 67;
    /**
     * <code>required float RACE = 67;</code>
     */
    boolean hasRACE();
    /**
     * <code>required float RACE = 67;</code>
     */
    float getRACE();

    // required float LOCATION = 68;
    /**
     * <code>required float LOCATION = 68;</code>
     */
    boolean hasLOCATION();
    /**
     * <code>required float LOCATION = 68;</code>
     */
    float getLOCATION();
  }
  /**
   * Protobuf type {@code boa.types.Person}
   */
  public static final class Person extends
      com.google.protobuf.GeneratedMessage
      implements PersonOrBuilder {
    // Use Person.newBuilder() to construct.
    private Person(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Person(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Person defaultInstance;
    public static Person getDefaultInstance() {
      return defaultInstance;
    }

    public Person getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Person(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      int mutable_bitField2_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              boa.types.Transport.STATE value = boa.types.Transport.STATE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                state_ = value;
              }
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              sTCASE_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              vEFORMS_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              vEHNO_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              pERNO_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              sTRVEH_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              cOUNTY_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              dAY_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              mONTH_ = input.readFloat();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000200;
              hOUR_ = input.readFloat();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000400;
              mINUTE_ = input.readFloat();
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              rURURB_ = input.readFloat();
              break;
            }
            case 109: {
              bitField0_ |= 0x00001000;
              fUNCSYS_ = input.readFloat();
              break;
            }
            case 117: {
              bitField0_ |= 0x00002000;
              hARMEV_ = input.readFloat();
              break;
            }
            case 125: {
              bitField0_ |= 0x00004000;
              mANCOLL_ = input.readFloat();
              break;
            }
            case 133: {
              bitField0_ |= 0x00008000;
              sCHBUS_ = input.readFloat();
              break;
            }
            case 141: {
              bitField0_ |= 0x00010000;
              mAKE_ = input.readFloat();
              break;
            }
            case 149: {
              bitField0_ |= 0x00020000;
              mAKMOD_ = input.readFloat();
              break;
            }
            case 157: {
              bitField0_ |= 0x00040000;
              bODYTYP_ = input.readFloat();
              break;
            }
            case 165: {
              bitField0_ |= 0x00080000;
              mODYEAR_ = input.readFloat();
              break;
            }
            case 173: {
              bitField0_ |= 0x00100000;
              tOWVEH_ = input.readFloat();
              break;
            }
            case 181: {
              bitField0_ |= 0x00200000;
              sPECUSE_ = input.readFloat();
              break;
            }
            case 189: {
              bitField0_ |= 0x00400000;
              eMERUSE_ = input.readFloat();
              break;
            }
            case 197: {
              bitField0_ |= 0x00800000;
              rOLLOVER_ = input.readFloat();
              break;
            }
            case 205: {
              bitField0_ |= 0x01000000;
              iMPACT1_ = input.readFloat();
              break;
            }
            case 213: {
              bitField0_ |= 0x02000000;
              fIREEXP_ = input.readFloat();
              break;
            }
            case 221: {
              bitField0_ |= 0x04000000;
              aGE_ = input.readFloat();
              break;
            }
            case 229: {
              bitField0_ |= 0x08000000;
              sEX_ = input.readFloat();
              break;
            }
            case 237: {
              bitField0_ |= 0x10000000;
              pERTYP_ = input.readFloat();
              break;
            }
            case 245: {
              bitField0_ |= 0x20000000;
              iNJSEV_ = input.readFloat();
              break;
            }
            case 253: {
              bitField0_ |= 0x40000000;
              sEATPOS_ = input.readFloat();
              break;
            }
            case 261: {
              bitField0_ |= 0x80000000;
              rESTUSE_ = input.readFloat();
              break;
            }
            case 269: {
              bitField1_ |= 0x00000001;
              rESTMIS_ = input.readFloat();
              break;
            }
            case 277: {
              bitField1_ |= 0x00000002;
              aIRBAG_ = input.readFloat();
              break;
            }
            case 285: {
              bitField1_ |= 0x00000004;
              eJECTION_ = input.readFloat();
              break;
            }
            case 293: {
              bitField1_ |= 0x00000008;
              eJPATH_ = input.readFloat();
              break;
            }
            case 301: {
              bitField1_ |= 0x00000010;
              eXTRICAT_ = input.readFloat();
              break;
            }
            case 309: {
              bitField1_ |= 0x00000020;
              dRINKING_ = input.readFloat();
              break;
            }
            case 317: {
              bitField1_ |= 0x00000040;
              aLCDET_ = input.readFloat();
              break;
            }
            case 325: {
              bitField1_ |= 0x00000080;
              aLCSTATUS_ = input.readFloat();
              break;
            }
            case 333: {
              bitField1_ |= 0x00000100;
              aTSTTYP_ = input.readFloat();
              break;
            }
            case 341: {
              bitField1_ |= 0x00000200;
              aLCRES_ = input.readFloat();
              break;
            }
            case 349: {
              bitField1_ |= 0x00000400;
              dRUGS_ = input.readFloat();
              break;
            }
            case 357: {
              bitField1_ |= 0x00000800;
              dRUGDET_ = input.readFloat();
              break;
            }
            case 365: {
              bitField1_ |= 0x00001000;
              dSTATUS_ = input.readFloat();
              break;
            }
            case 373: {
              bitField1_ |= 0x00002000;
              dRUGTST1_ = input.readFloat();
              break;
            }
            case 381: {
              bitField1_ |= 0x00004000;
              dRUGTST2_ = input.readFloat();
              break;
            }
            case 389: {
              bitField1_ |= 0x00008000;
              dRUGTST3_ = input.readFloat();
              break;
            }
            case 397: {
              bitField1_ |= 0x00010000;
              dRUGRES1_ = input.readFloat();
              break;
            }
            case 405: {
              bitField1_ |= 0x00020000;
              dRUGRES2_ = input.readFloat();
              break;
            }
            case 413: {
              bitField1_ |= 0x00040000;
              dRUGRES3_ = input.readFloat();
              break;
            }
            case 421: {
              bitField1_ |= 0x00080000;
              hOSPITAL_ = input.readFloat();
              break;
            }
            case 429: {
              bitField1_ |= 0x00100000;
              dOA_ = input.readFloat();
              break;
            }
            case 437: {
              bitField1_ |= 0x00200000;
              dEATHDA_ = input.readFloat();
              break;
            }
            case 445: {
              bitField1_ |= 0x00400000;
              dEATHMO_ = input.readFloat();
              break;
            }
            case 453: {
              bitField1_ |= 0x00800000;
              dEATHYR_ = input.readFloat();
              break;
            }
            case 461: {
              bitField1_ |= 0x01000000;
              dEATHHR_ = input.readFloat();
              break;
            }
            case 469: {
              bitField1_ |= 0x02000000;
              dEATHMN_ = input.readFloat();
              break;
            }
            case 477: {
              bitField1_ |= 0x04000000;
              dEATHTM_ = input.readFloat();
              break;
            }
            case 485: {
              bitField1_ |= 0x08000000;
              lAGHRS_ = input.readFloat();
              break;
            }
            case 493: {
              bitField1_ |= 0x10000000;
              lAGMINS_ = input.readFloat();
              break;
            }
            case 501: {
              bitField1_ |= 0x20000000;
              pSF1_ = input.readFloat();
              break;
            }
            case 509: {
              bitField1_ |= 0x40000000;
              pSF2_ = input.readFloat();
              break;
            }
            case 517: {
              bitField1_ |= 0x80000000;
              pSF3_ = input.readFloat();
              break;
            }
            case 525: {
              bitField2_ |= 0x00000001;
              wORKINJ_ = input.readFloat();
              break;
            }
            case 533: {
              bitField2_ |= 0x00000002;
              hISPANIC_ = input.readFloat();
              break;
            }
            case 541: {
              bitField2_ |= 0x00000004;
              rACE_ = input.readFloat();
              break;
            }
            case 549: {
              bitField2_ |= 0x00000008;
              lOCATION_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return boa.types.Transport.internal_static_boa_types_Person_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return boa.types.Transport.internal_static_boa_types_Person_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              boa.types.Transport.Person.class, boa.types.Transport.Person.Builder.class);
    }

    public static com.google.protobuf.Parser<Person> PARSER =
        new com.google.protobuf.AbstractParser<Person>() {
      public Person parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Person(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Person> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    private int bitField2_;
    // required .boa.types.STATE state = 1;
    public static final int STATE_FIELD_NUMBER = 1;
    private boa.types.Transport.STATE state_;
    /**
     * <code>required .boa.types.STATE state = 1;</code>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .boa.types.STATE state = 1;</code>
     */
    public boa.types.Transport.STATE getState() {
      return state_;
    }

    // required float ST_CASE = 2;
    public static final int ST_CASE_FIELD_NUMBER = 2;
    private float sTCASE_;
    /**
     * <code>required float ST_CASE = 2;</code>
     */
    public boolean hasSTCASE() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float ST_CASE = 2;</code>
     */
    public float getSTCASE() {
      return sTCASE_;
    }

    // required float VE_FORMS = 3;
    public static final int VE_FORMS_FIELD_NUMBER = 3;
    private float vEFORMS_;
    /**
     * <code>required float VE_FORMS = 3;</code>
     */
    public boolean hasVEFORMS() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float VE_FORMS = 3;</code>
     */
    public float getVEFORMS() {
      return vEFORMS_;
    }

    // required float VEH_NO = 4;
    public static final int VEH_NO_FIELD_NUMBER = 4;
    private float vEHNO_;
    /**
     * <code>required float VEH_NO = 4;</code>
     */
    public boolean hasVEHNO() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float VEH_NO = 4;</code>
     */
    public float getVEHNO() {
      return vEHNO_;
    }

    // required float PER_NO = 5;
    public static final int PER_NO_FIELD_NUMBER = 5;
    private float pERNO_;
    /**
     * <code>required float PER_NO = 5;</code>
     */
    public boolean hasPERNO() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required float PER_NO = 5;</code>
     */
    public float getPERNO() {
      return pERNO_;
    }

    // required float STR_VEH = 6;
    public static final int STR_VEH_FIELD_NUMBER = 6;
    private float sTRVEH_;
    /**
     * <code>required float STR_VEH = 6;</code>
     */
    public boolean hasSTRVEH() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required float STR_VEH = 6;</code>
     */
    public float getSTRVEH() {
      return sTRVEH_;
    }

    // required float COUNTY = 7;
    public static final int COUNTY_FIELD_NUMBER = 7;
    private float cOUNTY_;
    /**
     * <code>required float COUNTY = 7;</code>
     */
    public boolean hasCOUNTY() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required float COUNTY = 7;</code>
     */
    public float getCOUNTY() {
      return cOUNTY_;
    }

    // required float DAY = 8;
    public static final int DAY_FIELD_NUMBER = 8;
    private float dAY_;
    /**
     * <code>required float DAY = 8;</code>
     */
    public boolean hasDAY() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required float DAY = 8;</code>
     */
    public float getDAY() {
      return dAY_;
    }

    // required float MONTH = 9;
    public static final int MONTH_FIELD_NUMBER = 9;
    private float mONTH_;
    /**
     * <code>required float MONTH = 9;</code>
     */
    public boolean hasMONTH() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required float MONTH = 9;</code>
     */
    public float getMONTH() {
      return mONTH_;
    }

    // required float HOUR = 10;
    public static final int HOUR_FIELD_NUMBER = 10;
    private float hOUR_;
    /**
     * <code>required float HOUR = 10;</code>
     */
    public boolean hasHOUR() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required float HOUR = 10;</code>
     */
    public float getHOUR() {
      return hOUR_;
    }

    // required float MINUTE = 11;
    public static final int MINUTE_FIELD_NUMBER = 11;
    private float mINUTE_;
    /**
     * <code>required float MINUTE = 11;</code>
     */
    public boolean hasMINUTE() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required float MINUTE = 11;</code>
     */
    public float getMINUTE() {
      return mINUTE_;
    }

    // required float RUR_URB = 12;
    public static final int RUR_URB_FIELD_NUMBER = 12;
    private float rURURB_;
    /**
     * <code>required float RUR_URB = 12;</code>
     */
    public boolean hasRURURB() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required float RUR_URB = 12;</code>
     */
    public float getRURURB() {
      return rURURB_;
    }

    // required float FUNC_SYS = 13;
    public static final int FUNC_SYS_FIELD_NUMBER = 13;
    private float fUNCSYS_;
    /**
     * <code>required float FUNC_SYS = 13;</code>
     */
    public boolean hasFUNCSYS() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required float FUNC_SYS = 13;</code>
     */
    public float getFUNCSYS() {
      return fUNCSYS_;
    }

    // required float HARM_EV = 14;
    public static final int HARM_EV_FIELD_NUMBER = 14;
    private float hARMEV_;
    /**
     * <code>required float HARM_EV = 14;</code>
     */
    public boolean hasHARMEV() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required float HARM_EV = 14;</code>
     */
    public float getHARMEV() {
      return hARMEV_;
    }

    // required float MAN_COLL = 15;
    public static final int MAN_COLL_FIELD_NUMBER = 15;
    private float mANCOLL_;
    /**
     * <code>required float MAN_COLL = 15;</code>
     */
    public boolean hasMANCOLL() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>required float MAN_COLL = 15;</code>
     */
    public float getMANCOLL() {
      return mANCOLL_;
    }

    // required float SCH_BUS = 16;
    public static final int SCH_BUS_FIELD_NUMBER = 16;
    private float sCHBUS_;
    /**
     * <code>required float SCH_BUS = 16;</code>
     */
    public boolean hasSCHBUS() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>required float SCH_BUS = 16;</code>
     */
    public float getSCHBUS() {
      return sCHBUS_;
    }

    // required float MAKE = 17;
    public static final int MAKE_FIELD_NUMBER = 17;
    private float mAKE_;
    /**
     * <code>required float MAKE = 17;</code>
     */
    public boolean hasMAKE() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>required float MAKE = 17;</code>
     */
    public float getMAKE() {
      return mAKE_;
    }

    // required float MAK_MOD = 18;
    public static final int MAK_MOD_FIELD_NUMBER = 18;
    private float mAKMOD_;
    /**
     * <code>required float MAK_MOD = 18;</code>
     */
    public boolean hasMAKMOD() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>required float MAK_MOD = 18;</code>
     */
    public float getMAKMOD() {
      return mAKMOD_;
    }

    // required float BODY_TYP = 19;
    public static final int BODY_TYP_FIELD_NUMBER = 19;
    private float bODYTYP_;
    /**
     * <code>required float BODY_TYP = 19;</code>
     */
    public boolean hasBODYTYP() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>required float BODY_TYP = 19;</code>
     */
    public float getBODYTYP() {
      return bODYTYP_;
    }

    // required float MOD_YEAR = 20;
    public static final int MOD_YEAR_FIELD_NUMBER = 20;
    private float mODYEAR_;
    /**
     * <code>required float MOD_YEAR = 20;</code>
     */
    public boolean hasMODYEAR() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>required float MOD_YEAR = 20;</code>
     */
    public float getMODYEAR() {
      return mODYEAR_;
    }

    // required float TOW_VEH = 21;
    public static final int TOW_VEH_FIELD_NUMBER = 21;
    private float tOWVEH_;
    /**
     * <code>required float TOW_VEH = 21;</code>
     */
    public boolean hasTOWVEH() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>required float TOW_VEH = 21;</code>
     */
    public float getTOWVEH() {
      return tOWVEH_;
    }

    // required float SPEC_USE = 22;
    public static final int SPEC_USE_FIELD_NUMBER = 22;
    private float sPECUSE_;
    /**
     * <code>required float SPEC_USE = 22;</code>
     */
    public boolean hasSPECUSE() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>required float SPEC_USE = 22;</code>
     */
    public float getSPECUSE() {
      return sPECUSE_;
    }

    // required float EMER_USE = 23;
    public static final int EMER_USE_FIELD_NUMBER = 23;
    private float eMERUSE_;
    /**
     * <code>required float EMER_USE = 23;</code>
     */
    public boolean hasEMERUSE() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>required float EMER_USE = 23;</code>
     */
    public float getEMERUSE() {
      return eMERUSE_;
    }

    // required float ROLLOVER = 24;
    public static final int ROLLOVER_FIELD_NUMBER = 24;
    private float rOLLOVER_;
    /**
     * <code>required float ROLLOVER = 24;</code>
     */
    public boolean hasROLLOVER() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>required float ROLLOVER = 24;</code>
     */
    public float getROLLOVER() {
      return rOLLOVER_;
    }

    // required float IMPACT1 = 25;
    public static final int IMPACT1_FIELD_NUMBER = 25;
    private float iMPACT1_;
    /**
     * <code>required float IMPACT1 = 25;</code>
     */
    public boolean hasIMPACT1() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>required float IMPACT1 = 25;</code>
     */
    public float getIMPACT1() {
      return iMPACT1_;
    }

    // required float FIRE_EXP = 26;
    public static final int FIRE_EXP_FIELD_NUMBER = 26;
    private float fIREEXP_;
    /**
     * <code>required float FIRE_EXP = 26;</code>
     */
    public boolean hasFIREEXP() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>required float FIRE_EXP = 26;</code>
     */
    public float getFIREEXP() {
      return fIREEXP_;
    }

    // required float AGE = 27;
    public static final int AGE_FIELD_NUMBER = 27;
    private float aGE_;
    /**
     * <code>required float AGE = 27;</code>
     */
    public boolean hasAGE() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>required float AGE = 27;</code>
     */
    public float getAGE() {
      return aGE_;
    }

    // required float SEX = 28;
    public static final int SEX_FIELD_NUMBER = 28;
    private float sEX_;
    /**
     * <code>required float SEX = 28;</code>
     */
    public boolean hasSEX() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>required float SEX = 28;</code>
     */
    public float getSEX() {
      return sEX_;
    }

    // required float PER_TYP = 29;
    public static final int PER_TYP_FIELD_NUMBER = 29;
    private float pERTYP_;
    /**
     * <code>required float PER_TYP = 29;</code>
     */
    public boolean hasPERTYP() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>required float PER_TYP = 29;</code>
     */
    public float getPERTYP() {
      return pERTYP_;
    }

    // required float INJ_SEV = 30;
    public static final int INJ_SEV_FIELD_NUMBER = 30;
    private float iNJSEV_;
    /**
     * <code>required float INJ_SEV = 30;</code>
     */
    public boolean hasINJSEV() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>required float INJ_SEV = 30;</code>
     */
    public float getINJSEV() {
      return iNJSEV_;
    }

    // required float SEAT_POS = 31;
    public static final int SEAT_POS_FIELD_NUMBER = 31;
    private float sEATPOS_;
    /**
     * <code>required float SEAT_POS = 31;</code>
     */
    public boolean hasSEATPOS() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>required float SEAT_POS = 31;</code>
     */
    public float getSEATPOS() {
      return sEATPOS_;
    }

    // required float REST_USE = 32;
    public static final int REST_USE_FIELD_NUMBER = 32;
    private float rESTUSE_;
    /**
     * <code>required float REST_USE = 32;</code>
     */
    public boolean hasRESTUSE() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>required float REST_USE = 32;</code>
     */
    public float getRESTUSE() {
      return rESTUSE_;
    }

    // required float REST_MIS = 33;
    public static final int REST_MIS_FIELD_NUMBER = 33;
    private float rESTMIS_;
    /**
     * <code>required float REST_MIS = 33;</code>
     */
    public boolean hasRESTMIS() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required float REST_MIS = 33;</code>
     */
    public float getRESTMIS() {
      return rESTMIS_;
    }

    // required float AIR_BAG = 34;
    public static final int AIR_BAG_FIELD_NUMBER = 34;
    private float aIRBAG_;
    /**
     * <code>required float AIR_BAG = 34;</code>
     */
    public boolean hasAIRBAG() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float AIR_BAG = 34;</code>
     */
    public float getAIRBAG() {
      return aIRBAG_;
    }

    // required float EJECTION = 35;
    public static final int EJECTION_FIELD_NUMBER = 35;
    private float eJECTION_;
    /**
     * <code>required float EJECTION = 35;</code>
     */
    public boolean hasEJECTION() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float EJECTION = 35;</code>
     */
    public float getEJECTION() {
      return eJECTION_;
    }

    // required float EJ_PATH = 36;
    public static final int EJ_PATH_FIELD_NUMBER = 36;
    private float eJPATH_;
    /**
     * <code>required float EJ_PATH = 36;</code>
     */
    public boolean hasEJPATH() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float EJ_PATH = 36;</code>
     */
    public float getEJPATH() {
      return eJPATH_;
    }

    // required float EXTRICAT = 37;
    public static final int EXTRICAT_FIELD_NUMBER = 37;
    private float eXTRICAT_;
    /**
     * <code>required float EXTRICAT = 37;</code>
     */
    public boolean hasEXTRICAT() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required float EXTRICAT = 37;</code>
     */
    public float getEXTRICAT() {
      return eXTRICAT_;
    }

    // required float DRINKING = 38;
    public static final int DRINKING_FIELD_NUMBER = 38;
    private float dRINKING_;
    /**
     * <code>required float DRINKING = 38;</code>
     */
    public boolean hasDRINKING() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required float DRINKING = 38;</code>
     */
    public float getDRINKING() {
      return dRINKING_;
    }

    // required float ALC_DET = 39;
    public static final int ALC_DET_FIELD_NUMBER = 39;
    private float aLCDET_;
    /**
     * <code>required float ALC_DET = 39;</code>
     */
    public boolean hasALCDET() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required float ALC_DET = 39;</code>
     */
    public float getALCDET() {
      return aLCDET_;
    }

    // required float ALC_STATUS = 40;
    public static final int ALC_STATUS_FIELD_NUMBER = 40;
    private float aLCSTATUS_;
    /**
     * <code>required float ALC_STATUS = 40;</code>
     */
    public boolean hasALCSTATUS() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required float ALC_STATUS = 40;</code>
     */
    public float getALCSTATUS() {
      return aLCSTATUS_;
    }

    // required float ATST_TYP = 41;
    public static final int ATST_TYP_FIELD_NUMBER = 41;
    private float aTSTTYP_;
    /**
     * <code>required float ATST_TYP = 41;</code>
     */
    public boolean hasATSTTYP() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required float ATST_TYP = 41;</code>
     */
    public float getATSTTYP() {
      return aTSTTYP_;
    }

    // required float ALC_RES = 42;
    public static final int ALC_RES_FIELD_NUMBER = 42;
    private float aLCRES_;
    /**
     * <code>required float ALC_RES = 42;</code>
     */
    public boolean hasALCRES() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required float ALC_RES = 42;</code>
     */
    public float getALCRES() {
      return aLCRES_;
    }

    // required float DRUGS = 43;
    public static final int DRUGS_FIELD_NUMBER = 43;
    private float dRUGS_;
    /**
     * <code>required float DRUGS = 43;</code>
     */
    public boolean hasDRUGS() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required float DRUGS = 43;</code>
     */
    public float getDRUGS() {
      return dRUGS_;
    }

    // required float DRUG_DET = 44;
    public static final int DRUG_DET_FIELD_NUMBER = 44;
    private float dRUGDET_;
    /**
     * <code>required float DRUG_DET = 44;</code>
     */
    public boolean hasDRUGDET() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required float DRUG_DET = 44;</code>
     */
    public float getDRUGDET() {
      return dRUGDET_;
    }

    // required float DSTATUS = 45;
    public static final int DSTATUS_FIELD_NUMBER = 45;
    private float dSTATUS_;
    /**
     * <code>required float DSTATUS = 45;</code>
     */
    public boolean hasDSTATUS() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required float DSTATUS = 45;</code>
     */
    public float getDSTATUS() {
      return dSTATUS_;
    }

    // optional float DRUGTST1 = 46;
    public static final int DRUGTST1_FIELD_NUMBER = 46;
    private float dRUGTST1_;
    /**
     * <code>optional float DRUGTST1 = 46;</code>
     */
    public boolean hasDRUGTST1() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float DRUGTST1 = 46;</code>
     */
    public float getDRUGTST1() {
      return dRUGTST1_;
    }

    // optional float DRUGTST2 = 47;
    public static final int DRUGTST2_FIELD_NUMBER = 47;
    private float dRUGTST2_;
    /**
     * <code>optional float DRUGTST2 = 47;</code>
     */
    public boolean hasDRUGTST2() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float DRUGTST2 = 47;</code>
     */
    public float getDRUGTST2() {
      return dRUGTST2_;
    }

    // optional float DRUGTST3 = 48;
    public static final int DRUGTST3_FIELD_NUMBER = 48;
    private float dRUGTST3_;
    /**
     * <code>optional float DRUGTST3 = 48;</code>
     */
    public boolean hasDRUGTST3() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional float DRUGTST3 = 48;</code>
     */
    public float getDRUGTST3() {
      return dRUGTST3_;
    }

    // optional float DRUGRES1 = 49;
    public static final int DRUGRES1_FIELD_NUMBER = 49;
    private float dRUGRES1_;
    /**
     * <code>optional float DRUGRES1 = 49;</code>
     */
    public boolean hasDRUGRES1() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float DRUGRES1 = 49;</code>
     */
    public float getDRUGRES1() {
      return dRUGRES1_;
    }

    // optional float DRUGRES2 = 50;
    public static final int DRUGRES2_FIELD_NUMBER = 50;
    private float dRUGRES2_;
    /**
     * <code>optional float DRUGRES2 = 50;</code>
     */
    public boolean hasDRUGRES2() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float DRUGRES2 = 50;</code>
     */
    public float getDRUGRES2() {
      return dRUGRES2_;
    }

    // optional float DRUGRES3 = 51;
    public static final int DRUGRES3_FIELD_NUMBER = 51;
    private float dRUGRES3_;
    /**
     * <code>optional float DRUGRES3 = 51;</code>
     */
    public boolean hasDRUGRES3() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional float DRUGRES3 = 51;</code>
     */
    public float getDRUGRES3() {
      return dRUGRES3_;
    }

    // required float HOSPITAL = 52;
    public static final int HOSPITAL_FIELD_NUMBER = 52;
    private float hOSPITAL_;
    /**
     * <code>required float HOSPITAL = 52;</code>
     */
    public boolean hasHOSPITAL() {
      return ((bitField1_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>required float HOSPITAL = 52;</code>
     */
    public float getHOSPITAL() {
      return hOSPITAL_;
    }

    // required float DOA = 53;
    public static final int DOA_FIELD_NUMBER = 53;
    private float dOA_;
    /**
     * <code>required float DOA = 53;</code>
     */
    public boolean hasDOA() {
      return ((bitField1_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>required float DOA = 53;</code>
     */
    public float getDOA() {
      return dOA_;
    }

    // required float DEATH_DA = 54;
    public static final int DEATH_DA_FIELD_NUMBER = 54;
    private float dEATHDA_;
    /**
     * <code>required float DEATH_DA = 54;</code>
     */
    public boolean hasDEATHDA() {
      return ((bitField1_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>required float DEATH_DA = 54;</code>
     */
    public float getDEATHDA() {
      return dEATHDA_;
    }

    // required float DEATH_MO = 55;
    public static final int DEATH_MO_FIELD_NUMBER = 55;
    private float dEATHMO_;
    /**
     * <code>required float DEATH_MO = 55;</code>
     */
    public boolean hasDEATHMO() {
      return ((bitField1_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>required float DEATH_MO = 55;</code>
     */
    public float getDEATHMO() {
      return dEATHMO_;
    }

    // required float DEATH_YR = 56;
    public static final int DEATH_YR_FIELD_NUMBER = 56;
    private float dEATHYR_;
    /**
     * <code>required float DEATH_YR = 56;</code>
     */
    public boolean hasDEATHYR() {
      return ((bitField1_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>required float DEATH_YR = 56;</code>
     */
    public float getDEATHYR() {
      return dEATHYR_;
    }

    // required float DEATH_HR = 57;
    public static final int DEATH_HR_FIELD_NUMBER = 57;
    private float dEATHHR_;
    /**
     * <code>required float DEATH_HR = 57;</code>
     */
    public boolean hasDEATHHR() {
      return ((bitField1_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>required float DEATH_HR = 57;</code>
     */
    public float getDEATHHR() {
      return dEATHHR_;
    }

    // required float DEATH_MN = 58;
    public static final int DEATH_MN_FIELD_NUMBER = 58;
    private float dEATHMN_;
    /**
     * <code>required float DEATH_MN = 58;</code>
     */
    public boolean hasDEATHMN() {
      return ((bitField1_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>required float DEATH_MN = 58;</code>
     */
    public float getDEATHMN() {
      return dEATHMN_;
    }

    // required float DEATH_TM = 59;
    public static final int DEATH_TM_FIELD_NUMBER = 59;
    private float dEATHTM_;
    /**
     * <code>required float DEATH_TM = 59;</code>
     */
    public boolean hasDEATHTM() {
      return ((bitField1_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>required float DEATH_TM = 59;</code>
     */
    public float getDEATHTM() {
      return dEATHTM_;
    }

    // required float LAG_HRS = 60;
    public static final int LAG_HRS_FIELD_NUMBER = 60;
    private float lAGHRS_;
    /**
     * <code>required float LAG_HRS = 60;</code>
     */
    public boolean hasLAGHRS() {
      return ((bitField1_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>required float LAG_HRS = 60;</code>
     */
    public float getLAGHRS() {
      return lAGHRS_;
    }

    // required float LAG_MINS = 61;
    public static final int LAG_MINS_FIELD_NUMBER = 61;
    private float lAGMINS_;
    /**
     * <code>required float LAG_MINS = 61;</code>
     */
    public boolean hasLAGMINS() {
      return ((bitField1_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>required float LAG_MINS = 61;</code>
     */
    public float getLAGMINS() {
      return lAGMINS_;
    }

    // required float P_SF1 = 62;
    public static final int P_SF1_FIELD_NUMBER = 62;
    private float pSF1_;
    /**
     * <code>required float P_SF1 = 62;</code>
     */
    public boolean hasPSF1() {
      return ((bitField1_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>required float P_SF1 = 62;</code>
     */
    public float getPSF1() {
      return pSF1_;
    }

    // optional float P_SF2 = 63;
    public static final int P_SF2_FIELD_NUMBER = 63;
    private float pSF2_;
    /**
     * <code>optional float P_SF2 = 63;</code>
     */
    public boolean hasPSF2() {
      return ((bitField1_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional float P_SF2 = 63;</code>
     */
    public float getPSF2() {
      return pSF2_;
    }

    // optional float P_SF3 = 64;
    public static final int P_SF3_FIELD_NUMBER = 64;
    private float pSF3_;
    /**
     * <code>optional float P_SF3 = 64;</code>
     */
    public boolean hasPSF3() {
      return ((bitField1_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional float P_SF3 = 64;</code>
     */
    public float getPSF3() {
      return pSF3_;
    }

    // required float WORK_INJ = 65;
    public static final int WORK_INJ_FIELD_NUMBER = 65;
    private float wORKINJ_;
    /**
     * <code>required float WORK_INJ = 65;</code>
     */
    public boolean hasWORKINJ() {
      return ((bitField2_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required float WORK_INJ = 65;</code>
     */
    public float getWORKINJ() {
      return wORKINJ_;
    }

    // required float HISPANIC = 66;
    public static final int HISPANIC_FIELD_NUMBER = 66;
    private float hISPANIC_;
    /**
     * <code>required float HISPANIC = 66;</code>
     */
    public boolean hasHISPANIC() {
      return ((bitField2_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float HISPANIC = 66;</code>
     */
    public float getHISPANIC() {
      return hISPANIC_;
    }

    // required float RACE = 67;
    public static final int RACE_FIELD_NUMBER = 67;
    private float rACE_;
    /**
     * <code>required float RACE = 67;</code>
     */
    public boolean hasRACE() {
      return ((bitField2_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float RACE = 67;</code>
     */
    public float getRACE() {
      return rACE_;
    }

    // required float LOCATION = 68;
    public static final int LOCATION_FIELD_NUMBER = 68;
    private float lOCATION_;
    /**
     * <code>required float LOCATION = 68;</code>
     */
    public boolean hasLOCATION() {
      return ((bitField2_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float LOCATION = 68;</code>
     */
    public float getLOCATION() {
      return lOCATION_;
    }

    private void initFields() {
      state_ = boa.types.Transport.STATE.Alabama;
      sTCASE_ = 0F;
      vEFORMS_ = 0F;
      vEHNO_ = 0F;
      pERNO_ = 0F;
      sTRVEH_ = 0F;
      cOUNTY_ = 0F;
      dAY_ = 0F;
      mONTH_ = 0F;
      hOUR_ = 0F;
      mINUTE_ = 0F;
      rURURB_ = 0F;
      fUNCSYS_ = 0F;
      hARMEV_ = 0F;
      mANCOLL_ = 0F;
      sCHBUS_ = 0F;
      mAKE_ = 0F;
      mAKMOD_ = 0F;
      bODYTYP_ = 0F;
      mODYEAR_ = 0F;
      tOWVEH_ = 0F;
      sPECUSE_ = 0F;
      eMERUSE_ = 0F;
      rOLLOVER_ = 0F;
      iMPACT1_ = 0F;
      fIREEXP_ = 0F;
      aGE_ = 0F;
      sEX_ = 0F;
      pERTYP_ = 0F;
      iNJSEV_ = 0F;
      sEATPOS_ = 0F;
      rESTUSE_ = 0F;
      rESTMIS_ = 0F;
      aIRBAG_ = 0F;
      eJECTION_ = 0F;
      eJPATH_ = 0F;
      eXTRICAT_ = 0F;
      dRINKING_ = 0F;
      aLCDET_ = 0F;
      aLCSTATUS_ = 0F;
      aTSTTYP_ = 0F;
      aLCRES_ = 0F;
      dRUGS_ = 0F;
      dRUGDET_ = 0F;
      dSTATUS_ = 0F;
      dRUGTST1_ = 0F;
      dRUGTST2_ = 0F;
      dRUGTST3_ = 0F;
      dRUGRES1_ = 0F;
      dRUGRES2_ = 0F;
      dRUGRES3_ = 0F;
      hOSPITAL_ = 0F;
      dOA_ = 0F;
      dEATHDA_ = 0F;
      dEATHMO_ = 0F;
      dEATHYR_ = 0F;
      dEATHHR_ = 0F;
      dEATHMN_ = 0F;
      dEATHTM_ = 0F;
      lAGHRS_ = 0F;
      lAGMINS_ = 0F;
      pSF1_ = 0F;
      pSF2_ = 0F;
      pSF3_ = 0F;
      wORKINJ_ = 0F;
      hISPANIC_ = 0F;
      rACE_ = 0F;
      lOCATION_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSTCASE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVEFORMS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVEHNO()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPERNO()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSTRVEH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCOUNTY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDAY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMONTH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHOUR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMINUTE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRURURB()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFUNCSYS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHARMEV()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMANCOLL()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSCHBUS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMAKE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMAKMOD()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBODYTYP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMODYEAR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTOWVEH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSPECUSE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEMERUSE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasROLLOVER()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIMPACT1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFIREEXP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAGE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSEX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPERTYP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasINJSEV()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSEATPOS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRESTUSE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRESTMIS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAIRBAG()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEJECTION()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEJPATH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEXTRICAT()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDRINKING()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasALCDET()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasALCSTATUS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasATSTTYP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasALCRES()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDRUGS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDRUGDET()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDSTATUS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHOSPITAL()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDOA()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDEATHDA()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDEATHMO()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDEATHYR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDEATHHR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDEATHMN()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDEATHTM()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLAGHRS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLAGMINS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPSF1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWORKINJ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHISPANIC()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRACE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLOCATION()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, state_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, sTCASE_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, vEFORMS_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, vEHNO_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, pERNO_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, sTRVEH_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, cOUNTY_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, dAY_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, mONTH_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(10, hOUR_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(11, mINUTE_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, rURURB_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(13, fUNCSYS_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(14, hARMEV_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(15, mANCOLL_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(16, sCHBUS_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(17, mAKE_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(18, mAKMOD_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeFloat(19, bODYTYP_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeFloat(20, mODYEAR_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeFloat(21, tOWVEH_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeFloat(22, sPECUSE_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeFloat(23, eMERUSE_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeFloat(24, rOLLOVER_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeFloat(25, iMPACT1_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeFloat(26, fIREEXP_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeFloat(27, aGE_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeFloat(28, sEX_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeFloat(29, pERTYP_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeFloat(30, iNJSEV_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeFloat(31, sEATPOS_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeFloat(32, rESTUSE_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(33, rESTMIS_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(34, aIRBAG_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(35, eJECTION_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(36, eJPATH_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(37, eXTRICAT_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(38, dRINKING_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(39, aLCDET_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(40, aLCSTATUS_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(41, aTSTTYP_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(42, aLCRES_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(43, dRUGS_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(44, dRUGDET_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(45, dSTATUS_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(46, dRUGTST1_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(47, dRUGTST2_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(48, dRUGTST3_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(49, dRUGRES1_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(50, dRUGRES2_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeFloat(51, dRUGRES3_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        output.writeFloat(52, hOSPITAL_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        output.writeFloat(53, dOA_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        output.writeFloat(54, dEATHDA_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        output.writeFloat(55, dEATHMO_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        output.writeFloat(56, dEATHYR_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        output.writeFloat(57, dEATHHR_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        output.writeFloat(58, dEATHMN_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        output.writeFloat(59, dEATHTM_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        output.writeFloat(60, lAGHRS_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        output.writeFloat(61, lAGMINS_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        output.writeFloat(62, pSF1_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        output.writeFloat(63, pSF2_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        output.writeFloat(64, pSF3_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(65, wORKINJ_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(66, hISPANIC_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(67, rACE_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(68, lOCATION_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, sTCASE_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, vEFORMS_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, vEHNO_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, pERNO_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, sTRVEH_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, cOUNTY_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, dAY_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, mONTH_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, hOUR_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, mINUTE_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, rURURB_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, fUNCSYS_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, hARMEV_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, mANCOLL_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(16, sCHBUS_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, mAKE_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(18, mAKMOD_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(19, bODYTYP_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(20, mODYEAR_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(21, tOWVEH_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(22, sPECUSE_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(23, eMERUSE_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(24, rOLLOVER_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(25, iMPACT1_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(26, fIREEXP_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(27, aGE_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(28, sEX_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(29, pERTYP_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(30, iNJSEV_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(31, sEATPOS_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(32, rESTUSE_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(33, rESTMIS_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(34, aIRBAG_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(35, eJECTION_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(36, eJPATH_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(37, eXTRICAT_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(38, dRINKING_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(39, aLCDET_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(40, aLCSTATUS_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(41, aTSTTYP_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(42, aLCRES_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(43, dRUGS_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(44, dRUGDET_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(45, dSTATUS_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(46, dRUGTST1_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(47, dRUGTST2_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(48, dRUGTST3_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(49, dRUGRES1_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(50, dRUGRES2_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(51, dRUGRES3_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(52, hOSPITAL_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(53, dOA_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(54, dEATHDA_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(55, dEATHMO_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(56, dEATHYR_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(57, dEATHHR_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(58, dEATHMN_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(59, dEATHTM_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(60, lAGHRS_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(61, lAGMINS_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(62, pSF1_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(63, pSF2_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(64, pSF3_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(65, wORKINJ_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(66, hISPANIC_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(67, rACE_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(68, lOCATION_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static boa.types.Transport.Person parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boa.types.Transport.Person parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boa.types.Transport.Person parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boa.types.Transport.Person parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boa.types.Transport.Person parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boa.types.Transport.Person parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static boa.types.Transport.Person parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static boa.types.Transport.Person parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static boa.types.Transport.Person parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boa.types.Transport.Person parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(boa.types.Transport.Person prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code boa.types.Person}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements boa.types.Transport.PersonOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return boa.types.Transport.internal_static_boa_types_Person_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return boa.types.Transport.internal_static_boa_types_Person_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                boa.types.Transport.Person.class, boa.types.Transport.Person.Builder.class);
      }

      // Construct using boa.types.Transport.Person.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        state_ = boa.types.Transport.STATE.Alabama;
        bitField0_ = (bitField0_ & ~0x00000001);
        sTCASE_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        vEFORMS_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        vEHNO_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        pERNO_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        sTRVEH_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        cOUNTY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        dAY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        mONTH_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        hOUR_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        mINUTE_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        rURURB_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        fUNCSYS_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        hARMEV_ = 0F;
        bitField0_ = (bitField0_ & ~0x00002000);
        mANCOLL_ = 0F;
        bitField0_ = (bitField0_ & ~0x00004000);
        sCHBUS_ = 0F;
        bitField0_ = (bitField0_ & ~0x00008000);
        mAKE_ = 0F;
        bitField0_ = (bitField0_ & ~0x00010000);
        mAKMOD_ = 0F;
        bitField0_ = (bitField0_ & ~0x00020000);
        bODYTYP_ = 0F;
        bitField0_ = (bitField0_ & ~0x00040000);
        mODYEAR_ = 0F;
        bitField0_ = (bitField0_ & ~0x00080000);
        tOWVEH_ = 0F;
        bitField0_ = (bitField0_ & ~0x00100000);
        sPECUSE_ = 0F;
        bitField0_ = (bitField0_ & ~0x00200000);
        eMERUSE_ = 0F;
        bitField0_ = (bitField0_ & ~0x00400000);
        rOLLOVER_ = 0F;
        bitField0_ = (bitField0_ & ~0x00800000);
        iMPACT1_ = 0F;
        bitField0_ = (bitField0_ & ~0x01000000);
        fIREEXP_ = 0F;
        bitField0_ = (bitField0_ & ~0x02000000);
        aGE_ = 0F;
        bitField0_ = (bitField0_ & ~0x04000000);
        sEX_ = 0F;
        bitField0_ = (bitField0_ & ~0x08000000);
        pERTYP_ = 0F;
        bitField0_ = (bitField0_ & ~0x10000000);
        iNJSEV_ = 0F;
        bitField0_ = (bitField0_ & ~0x20000000);
        sEATPOS_ = 0F;
        bitField0_ = (bitField0_ & ~0x40000000);
        rESTUSE_ = 0F;
        bitField0_ = (bitField0_ & ~0x80000000);
        rESTMIS_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000001);
        aIRBAG_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000002);
        eJECTION_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000004);
        eJPATH_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000008);
        eXTRICAT_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000010);
        dRINKING_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000020);
        aLCDET_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000040);
        aLCSTATUS_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000080);
        aTSTTYP_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000100);
        aLCRES_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000200);
        dRUGS_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000400);
        dRUGDET_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000800);
        dSTATUS_ = 0F;
        bitField1_ = (bitField1_ & ~0x00001000);
        dRUGTST1_ = 0F;
        bitField1_ = (bitField1_ & ~0x00002000);
        dRUGTST2_ = 0F;
        bitField1_ = (bitField1_ & ~0x00004000);
        dRUGTST3_ = 0F;
        bitField1_ = (bitField1_ & ~0x00008000);
        dRUGRES1_ = 0F;
        bitField1_ = (bitField1_ & ~0x00010000);
        dRUGRES2_ = 0F;
        bitField1_ = (bitField1_ & ~0x00020000);
        dRUGRES3_ = 0F;
        bitField1_ = (bitField1_ & ~0x00040000);
        hOSPITAL_ = 0F;
        bitField1_ = (bitField1_ & ~0x00080000);
        dOA_ = 0F;
        bitField1_ = (bitField1_ & ~0x00100000);
        dEATHDA_ = 0F;
        bitField1_ = (bitField1_ & ~0x00200000);
        dEATHMO_ = 0F;
        bitField1_ = (bitField1_ & ~0x00400000);
        dEATHYR_ = 0F;
        bitField1_ = (bitField1_ & ~0x00800000);
        dEATHHR_ = 0F;
        bitField1_ = (bitField1_ & ~0x01000000);
        dEATHMN_ = 0F;
        bitField1_ = (bitField1_ & ~0x02000000);
        dEATHTM_ = 0F;
        bitField1_ = (bitField1_ & ~0x04000000);
        lAGHRS_ = 0F;
        bitField1_ = (bitField1_ & ~0x08000000);
        lAGMINS_ = 0F;
        bitField1_ = (bitField1_ & ~0x10000000);
        pSF1_ = 0F;
        bitField1_ = (bitField1_ & ~0x20000000);
        pSF2_ = 0F;
        bitField1_ = (bitField1_ & ~0x40000000);
        pSF3_ = 0F;
        bitField1_ = (bitField1_ & ~0x80000000);
        wORKINJ_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000001);
        hISPANIC_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000002);
        rACE_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000004);
        lOCATION_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return boa.types.Transport.internal_static_boa_types_Person_descriptor;
      }

      public boa.types.Transport.Person getDefaultInstanceForType() {
        return boa.types.Transport.Person.getDefaultInstance();
      }

      public boa.types.Transport.Person build() {
        boa.types.Transport.Person result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public boa.types.Transport.Person buildPartial() {
        boa.types.Transport.Person result = new boa.types.Transport.Person(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int from_bitField2_ = bitField2_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        int to_bitField2_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sTCASE_ = sTCASE_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.vEFORMS_ = vEFORMS_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.vEHNO_ = vEHNO_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.pERNO_ = pERNO_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.sTRVEH_ = sTRVEH_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.cOUNTY_ = cOUNTY_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.dAY_ = dAY_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.mONTH_ = mONTH_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.hOUR_ = hOUR_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.mINUTE_ = mINUTE_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.rURURB_ = rURURB_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.fUNCSYS_ = fUNCSYS_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.hARMEV_ = hARMEV_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.mANCOLL_ = mANCOLL_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.sCHBUS_ = sCHBUS_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.mAKE_ = mAKE_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.mAKMOD_ = mAKMOD_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.bODYTYP_ = bODYTYP_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.mODYEAR_ = mODYEAR_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.tOWVEH_ = tOWVEH_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.sPECUSE_ = sPECUSE_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.eMERUSE_ = eMERUSE_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.rOLLOVER_ = rOLLOVER_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.iMPACT1_ = iMPACT1_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.fIREEXP_ = fIREEXP_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.aGE_ = aGE_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.sEX_ = sEX_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.pERTYP_ = pERTYP_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.iNJSEV_ = iNJSEV_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.sEATPOS_ = sEATPOS_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.rESTUSE_ = rESTUSE_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        result.rESTMIS_ = rESTMIS_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        result.aIRBAG_ = aIRBAG_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        result.eJECTION_ = eJECTION_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000008;
        }
        result.eJPATH_ = eJPATH_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000010;
        }
        result.eXTRICAT_ = eXTRICAT_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000020;
        }
        result.dRINKING_ = dRINKING_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000040;
        }
        result.aLCDET_ = aLCDET_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000080;
        }
        result.aLCSTATUS_ = aLCSTATUS_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000100;
        }
        result.aTSTTYP_ = aTSTTYP_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000200;
        }
        result.aLCRES_ = aLCRES_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000400;
        }
        result.dRUGS_ = dRUGS_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000800;
        }
        result.dRUGDET_ = dRUGDET_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00001000;
        }
        result.dSTATUS_ = dSTATUS_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00002000;
        }
        result.dRUGTST1_ = dRUGTST1_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00004000;
        }
        result.dRUGTST2_ = dRUGTST2_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00008000;
        }
        result.dRUGTST3_ = dRUGTST3_;
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00010000;
        }
        result.dRUGRES1_ = dRUGRES1_;
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00020000;
        }
        result.dRUGRES2_ = dRUGRES2_;
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00040000;
        }
        result.dRUGRES3_ = dRUGRES3_;
        if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
          to_bitField1_ |= 0x00080000;
        }
        result.hOSPITAL_ = hOSPITAL_;
        if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
          to_bitField1_ |= 0x00100000;
        }
        result.dOA_ = dOA_;
        if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
          to_bitField1_ |= 0x00200000;
        }
        result.dEATHDA_ = dEATHDA_;
        if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
          to_bitField1_ |= 0x00400000;
        }
        result.dEATHMO_ = dEATHMO_;
        if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
          to_bitField1_ |= 0x00800000;
        }
        result.dEATHYR_ = dEATHYR_;
        if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
          to_bitField1_ |= 0x01000000;
        }
        result.dEATHHR_ = dEATHHR_;
        if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
          to_bitField1_ |= 0x02000000;
        }
        result.dEATHMN_ = dEATHMN_;
        if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
          to_bitField1_ |= 0x04000000;
        }
        result.dEATHTM_ = dEATHTM_;
        if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
          to_bitField1_ |= 0x08000000;
        }
        result.lAGHRS_ = lAGHRS_;
        if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
          to_bitField1_ |= 0x10000000;
        }
        result.lAGMINS_ = lAGMINS_;
        if (((from_bitField1_ & 0x20000000) == 0x20000000)) {
          to_bitField1_ |= 0x20000000;
        }
        result.pSF1_ = pSF1_;
        if (((from_bitField1_ & 0x40000000) == 0x40000000)) {
          to_bitField1_ |= 0x40000000;
        }
        result.pSF2_ = pSF2_;
        if (((from_bitField1_ & 0x80000000) == 0x80000000)) {
          to_bitField1_ |= 0x80000000;
        }
        result.pSF3_ = pSF3_;
        if (((from_bitField2_ & 0x00000001) == 0x00000001)) {
          to_bitField2_ |= 0x00000001;
        }
        result.wORKINJ_ = wORKINJ_;
        if (((from_bitField2_ & 0x00000002) == 0x00000002)) {
          to_bitField2_ |= 0x00000002;
        }
        result.hISPANIC_ = hISPANIC_;
        if (((from_bitField2_ & 0x00000004) == 0x00000004)) {
          to_bitField2_ |= 0x00000004;
        }
        result.rACE_ = rACE_;
        if (((from_bitField2_ & 0x00000008) == 0x00000008)) {
          to_bitField2_ |= 0x00000008;
        }
        result.lOCATION_ = lOCATION_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        result.bitField2_ = to_bitField2_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof boa.types.Transport.Person) {
          return mergeFrom((boa.types.Transport.Person)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(boa.types.Transport.Person other) {
        if (other == boa.types.Transport.Person.getDefaultInstance()) return this;
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasSTCASE()) {
          setSTCASE(other.getSTCASE());
        }
        if (other.hasVEFORMS()) {
          setVEFORMS(other.getVEFORMS());
        }
        if (other.hasVEHNO()) {
          setVEHNO(other.getVEHNO());
        }
        if (other.hasPERNO()) {
          setPERNO(other.getPERNO());
        }
        if (other.hasSTRVEH()) {
          setSTRVEH(other.getSTRVEH());
        }
        if (other.hasCOUNTY()) {
          setCOUNTY(other.getCOUNTY());
        }
        if (other.hasDAY()) {
          setDAY(other.getDAY());
        }
        if (other.hasMONTH()) {
          setMONTH(other.getMONTH());
        }
        if (other.hasHOUR()) {
          setHOUR(other.getHOUR());
        }
        if (other.hasMINUTE()) {
          setMINUTE(other.getMINUTE());
        }
        if (other.hasRURURB()) {
          setRURURB(other.getRURURB());
        }
        if (other.hasFUNCSYS()) {
          setFUNCSYS(other.getFUNCSYS());
        }
        if (other.hasHARMEV()) {
          setHARMEV(other.getHARMEV());
        }
        if (other.hasMANCOLL()) {
          setMANCOLL(other.getMANCOLL());
        }
        if (other.hasSCHBUS()) {
          setSCHBUS(other.getSCHBUS());
        }
        if (other.hasMAKE()) {
          setMAKE(other.getMAKE());
        }
        if (other.hasMAKMOD()) {
          setMAKMOD(other.getMAKMOD());
        }
        if (other.hasBODYTYP()) {
          setBODYTYP(other.getBODYTYP());
        }
        if (other.hasMODYEAR()) {
          setMODYEAR(other.getMODYEAR());
        }
        if (other.hasTOWVEH()) {
          setTOWVEH(other.getTOWVEH());
        }
        if (other.hasSPECUSE()) {
          setSPECUSE(other.getSPECUSE());
        }
        if (other.hasEMERUSE()) {
          setEMERUSE(other.getEMERUSE());
        }
        if (other.hasROLLOVER()) {
          setROLLOVER(other.getROLLOVER());
        }
        if (other.hasIMPACT1()) {
          setIMPACT1(other.getIMPACT1());
        }
        if (other.hasFIREEXP()) {
          setFIREEXP(other.getFIREEXP());
        }
        if (other.hasAGE()) {
          setAGE(other.getAGE());
        }
        if (other.hasSEX()) {
          setSEX(other.getSEX());
        }
        if (other.hasPERTYP()) {
          setPERTYP(other.getPERTYP());
        }
        if (other.hasINJSEV()) {
          setINJSEV(other.getINJSEV());
        }
        if (other.hasSEATPOS()) {
          setSEATPOS(other.getSEATPOS());
        }
        if (other.hasRESTUSE()) {
          setRESTUSE(other.getRESTUSE());
        }
        if (other.hasRESTMIS()) {
          setRESTMIS(other.getRESTMIS());
        }
        if (other.hasAIRBAG()) {
          setAIRBAG(other.getAIRBAG());
        }
        if (other.hasEJECTION()) {
          setEJECTION(other.getEJECTION());
        }
        if (other.hasEJPATH()) {
          setEJPATH(other.getEJPATH());
        }
        if (other.hasEXTRICAT()) {
          setEXTRICAT(other.getEXTRICAT());
        }
        if (other.hasDRINKING()) {
          setDRINKING(other.getDRINKING());
        }
        if (other.hasALCDET()) {
          setALCDET(other.getALCDET());
        }
        if (other.hasALCSTATUS()) {
          setALCSTATUS(other.getALCSTATUS());
        }
        if (other.hasATSTTYP()) {
          setATSTTYP(other.getATSTTYP());
        }
        if (other.hasALCRES()) {
          setALCRES(other.getALCRES());
        }
        if (other.hasDRUGS()) {
          setDRUGS(other.getDRUGS());
        }
        if (other.hasDRUGDET()) {
          setDRUGDET(other.getDRUGDET());
        }
        if (other.hasDSTATUS()) {
          setDSTATUS(other.getDSTATUS());
        }
        if (other.hasDRUGTST1()) {
          setDRUGTST1(other.getDRUGTST1());
        }
        if (other.hasDRUGTST2()) {
          setDRUGTST2(other.getDRUGTST2());
        }
        if (other.hasDRUGTST3()) {
          setDRUGTST3(other.getDRUGTST3());
        }
        if (other.hasDRUGRES1()) {
          setDRUGRES1(other.getDRUGRES1());
        }
        if (other.hasDRUGRES2()) {
          setDRUGRES2(other.getDRUGRES2());
        }
        if (other.hasDRUGRES3()) {
          setDRUGRES3(other.getDRUGRES3());
        }
        if (other.hasHOSPITAL()) {
          setHOSPITAL(other.getHOSPITAL());
        }
        if (other.hasDOA()) {
          setDOA(other.getDOA());
        }
        if (other.hasDEATHDA()) {
          setDEATHDA(other.getDEATHDA());
        }
        if (other.hasDEATHMO()) {
          setDEATHMO(other.getDEATHMO());
        }
        if (other.hasDEATHYR()) {
          setDEATHYR(other.getDEATHYR());
        }
        if (other.hasDEATHHR()) {
          setDEATHHR(other.getDEATHHR());
        }
        if (other.hasDEATHMN()) {
          setDEATHMN(other.getDEATHMN());
        }
        if (other.hasDEATHTM()) {
          setDEATHTM(other.getDEATHTM());
        }
        if (other.hasLAGHRS()) {
          setLAGHRS(other.getLAGHRS());
        }
        if (other.hasLAGMINS()) {
          setLAGMINS(other.getLAGMINS());
        }
        if (other.hasPSF1()) {
          setPSF1(other.getPSF1());
        }
        if (other.hasPSF2()) {
          setPSF2(other.getPSF2());
        }
        if (other.hasPSF3()) {
          setPSF3(other.getPSF3());
        }
        if (other.hasWORKINJ()) {
          setWORKINJ(other.getWORKINJ());
        }
        if (other.hasHISPANIC()) {
          setHISPANIC(other.getHISPANIC());
        }
        if (other.hasRACE()) {
          setRACE(other.getRACE());
        }
        if (other.hasLOCATION()) {
          setLOCATION(other.getLOCATION());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasState()) {
          
          return false;
        }
        if (!hasSTCASE()) {
          
          return false;
        }
        if (!hasVEFORMS()) {
          
          return false;
        }
        if (!hasVEHNO()) {
          
          return false;
        }
        if (!hasPERNO()) {
          
          return false;
        }
        if (!hasSTRVEH()) {
          
          return false;
        }
        if (!hasCOUNTY()) {
          
          return false;
        }
        if (!hasDAY()) {
          
          return false;
        }
        if (!hasMONTH()) {
          
          return false;
        }
        if (!hasHOUR()) {
          
          return false;
        }
        if (!hasMINUTE()) {
          
          return false;
        }
        if (!hasRURURB()) {
          
          return false;
        }
        if (!hasFUNCSYS()) {
          
          return false;
        }
        if (!hasHARMEV()) {
          
          return false;
        }
        if (!hasMANCOLL()) {
          
          return false;
        }
        if (!hasSCHBUS()) {
          
          return false;
        }
        if (!hasMAKE()) {
          
          return false;
        }
        if (!hasMAKMOD()) {
          
          return false;
        }
        if (!hasBODYTYP()) {
          
          return false;
        }
        if (!hasMODYEAR()) {
          
          return false;
        }
        if (!hasTOWVEH()) {
          
          return false;
        }
        if (!hasSPECUSE()) {
          
          return false;
        }
        if (!hasEMERUSE()) {
          
          return false;
        }
        if (!hasROLLOVER()) {
          
          return false;
        }
        if (!hasIMPACT1()) {
          
          return false;
        }
        if (!hasFIREEXP()) {
          
          return false;
        }
        if (!hasAGE()) {
          
          return false;
        }
        if (!hasSEX()) {
          
          return false;
        }
        if (!hasPERTYP()) {
          
          return false;
        }
        if (!hasINJSEV()) {
          
          return false;
        }
        if (!hasSEATPOS()) {
          
          return false;
        }
        if (!hasRESTUSE()) {
          
          return false;
        }
        if (!hasRESTMIS()) {
          
          return false;
        }
        if (!hasAIRBAG()) {
          
          return false;
        }
        if (!hasEJECTION()) {
          
          return false;
        }
        if (!hasEJPATH()) {
          
          return false;
        }
        if (!hasEXTRICAT()) {
          
          return false;
        }
        if (!hasDRINKING()) {
          
          return false;
        }
        if (!hasALCDET()) {
          
          return false;
        }
        if (!hasALCSTATUS()) {
          
          return false;
        }
        if (!hasATSTTYP()) {
          
          return false;
        }
        if (!hasALCRES()) {
          
          return false;
        }
        if (!hasDRUGS()) {
          
          return false;
        }
        if (!hasDRUGDET()) {
          
          return false;
        }
        if (!hasDSTATUS()) {
          
          return false;
        }
        if (!hasHOSPITAL()) {
          
          return false;
        }
        if (!hasDOA()) {
          
          return false;
        }
        if (!hasDEATHDA()) {
          
          return false;
        }
        if (!hasDEATHMO()) {
          
          return false;
        }
        if (!hasDEATHYR()) {
          
          return false;
        }
        if (!hasDEATHHR()) {
          
          return false;
        }
        if (!hasDEATHMN()) {
          
          return false;
        }
        if (!hasDEATHTM()) {
          
          return false;
        }
        if (!hasLAGHRS()) {
          
          return false;
        }
        if (!hasLAGMINS()) {
          
          return false;
        }
        if (!hasPSF1()) {
          
          return false;
        }
        if (!hasWORKINJ()) {
          
          return false;
        }
        if (!hasHISPANIC()) {
          
          return false;
        }
        if (!hasRACE()) {
          
          return false;
        }
        if (!hasLOCATION()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        boa.types.Transport.Person parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (boa.types.Transport.Person) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;
      private int bitField2_;

      // required .boa.types.STATE state = 1;
      private boa.types.Transport.STATE state_ = boa.types.Transport.STATE.Alabama;
      /**
       * <code>required .boa.types.STATE state = 1;</code>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .boa.types.STATE state = 1;</code>
       */
      public boa.types.Transport.STATE getState() {
        return state_;
      }
      /**
       * <code>required .boa.types.STATE state = 1;</code>
       */
      public Builder setState(boa.types.Transport.STATE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        state_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .boa.types.STATE state = 1;</code>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = boa.types.Transport.STATE.Alabama;
        onChanged();
        return this;
      }

      // required float ST_CASE = 2;
      private float sTCASE_ ;
      /**
       * <code>required float ST_CASE = 2;</code>
       */
      public boolean hasSTCASE() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float ST_CASE = 2;</code>
       */
      public float getSTCASE() {
        return sTCASE_;
      }
      /**
       * <code>required float ST_CASE = 2;</code>
       */
      public Builder setSTCASE(float value) {
        bitField0_ |= 0x00000002;
        sTCASE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float ST_CASE = 2;</code>
       */
      public Builder clearSTCASE() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sTCASE_ = 0F;
        onChanged();
        return this;
      }

      // required float VE_FORMS = 3;
      private float vEFORMS_ ;
      /**
       * <code>required float VE_FORMS = 3;</code>
       */
      public boolean hasVEFORMS() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float VE_FORMS = 3;</code>
       */
      public float getVEFORMS() {
        return vEFORMS_;
      }
      /**
       * <code>required float VE_FORMS = 3;</code>
       */
      public Builder setVEFORMS(float value) {
        bitField0_ |= 0x00000004;
        vEFORMS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float VE_FORMS = 3;</code>
       */
      public Builder clearVEFORMS() {
        bitField0_ = (bitField0_ & ~0x00000004);
        vEFORMS_ = 0F;
        onChanged();
        return this;
      }

      // required float VEH_NO = 4;
      private float vEHNO_ ;
      /**
       * <code>required float VEH_NO = 4;</code>
       */
      public boolean hasVEHNO() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float VEH_NO = 4;</code>
       */
      public float getVEHNO() {
        return vEHNO_;
      }
      /**
       * <code>required float VEH_NO = 4;</code>
       */
      public Builder setVEHNO(float value) {
        bitField0_ |= 0x00000008;
        vEHNO_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float VEH_NO = 4;</code>
       */
      public Builder clearVEHNO() {
        bitField0_ = (bitField0_ & ~0x00000008);
        vEHNO_ = 0F;
        onChanged();
        return this;
      }

      // required float PER_NO = 5;
      private float pERNO_ ;
      /**
       * <code>required float PER_NO = 5;</code>
       */
      public boolean hasPERNO() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required float PER_NO = 5;</code>
       */
      public float getPERNO() {
        return pERNO_;
      }
      /**
       * <code>required float PER_NO = 5;</code>
       */
      public Builder setPERNO(float value) {
        bitField0_ |= 0x00000010;
        pERNO_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float PER_NO = 5;</code>
       */
      public Builder clearPERNO() {
        bitField0_ = (bitField0_ & ~0x00000010);
        pERNO_ = 0F;
        onChanged();
        return this;
      }

      // required float STR_VEH = 6;
      private float sTRVEH_ ;
      /**
       * <code>required float STR_VEH = 6;</code>
       */
      public boolean hasSTRVEH() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required float STR_VEH = 6;</code>
       */
      public float getSTRVEH() {
        return sTRVEH_;
      }
      /**
       * <code>required float STR_VEH = 6;</code>
       */
      public Builder setSTRVEH(float value) {
        bitField0_ |= 0x00000020;
        sTRVEH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float STR_VEH = 6;</code>
       */
      public Builder clearSTRVEH() {
        bitField0_ = (bitField0_ & ~0x00000020);
        sTRVEH_ = 0F;
        onChanged();
        return this;
      }

      // required float COUNTY = 7;
      private float cOUNTY_ ;
      /**
       * <code>required float COUNTY = 7;</code>
       */
      public boolean hasCOUNTY() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required float COUNTY = 7;</code>
       */
      public float getCOUNTY() {
        return cOUNTY_;
      }
      /**
       * <code>required float COUNTY = 7;</code>
       */
      public Builder setCOUNTY(float value) {
        bitField0_ |= 0x00000040;
        cOUNTY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float COUNTY = 7;</code>
       */
      public Builder clearCOUNTY() {
        bitField0_ = (bitField0_ & ~0x00000040);
        cOUNTY_ = 0F;
        onChanged();
        return this;
      }

      // required float DAY = 8;
      private float dAY_ ;
      /**
       * <code>required float DAY = 8;</code>
       */
      public boolean hasDAY() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required float DAY = 8;</code>
       */
      public float getDAY() {
        return dAY_;
      }
      /**
       * <code>required float DAY = 8;</code>
       */
      public Builder setDAY(float value) {
        bitField0_ |= 0x00000080;
        dAY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DAY = 8;</code>
       */
      public Builder clearDAY() {
        bitField0_ = (bitField0_ & ~0x00000080);
        dAY_ = 0F;
        onChanged();
        return this;
      }

      // required float MONTH = 9;
      private float mONTH_ ;
      /**
       * <code>required float MONTH = 9;</code>
       */
      public boolean hasMONTH() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required float MONTH = 9;</code>
       */
      public float getMONTH() {
        return mONTH_;
      }
      /**
       * <code>required float MONTH = 9;</code>
       */
      public Builder setMONTH(float value) {
        bitField0_ |= 0x00000100;
        mONTH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float MONTH = 9;</code>
       */
      public Builder clearMONTH() {
        bitField0_ = (bitField0_ & ~0x00000100);
        mONTH_ = 0F;
        onChanged();
        return this;
      }

      // required float HOUR = 10;
      private float hOUR_ ;
      /**
       * <code>required float HOUR = 10;</code>
       */
      public boolean hasHOUR() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required float HOUR = 10;</code>
       */
      public float getHOUR() {
        return hOUR_;
      }
      /**
       * <code>required float HOUR = 10;</code>
       */
      public Builder setHOUR(float value) {
        bitField0_ |= 0x00000200;
        hOUR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float HOUR = 10;</code>
       */
      public Builder clearHOUR() {
        bitField0_ = (bitField0_ & ~0x00000200);
        hOUR_ = 0F;
        onChanged();
        return this;
      }

      // required float MINUTE = 11;
      private float mINUTE_ ;
      /**
       * <code>required float MINUTE = 11;</code>
       */
      public boolean hasMINUTE() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required float MINUTE = 11;</code>
       */
      public float getMINUTE() {
        return mINUTE_;
      }
      /**
       * <code>required float MINUTE = 11;</code>
       */
      public Builder setMINUTE(float value) {
        bitField0_ |= 0x00000400;
        mINUTE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float MINUTE = 11;</code>
       */
      public Builder clearMINUTE() {
        bitField0_ = (bitField0_ & ~0x00000400);
        mINUTE_ = 0F;
        onChanged();
        return this;
      }

      // required float RUR_URB = 12;
      private float rURURB_ ;
      /**
       * <code>required float RUR_URB = 12;</code>
       */
      public boolean hasRURURB() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required float RUR_URB = 12;</code>
       */
      public float getRURURB() {
        return rURURB_;
      }
      /**
       * <code>required float RUR_URB = 12;</code>
       */
      public Builder setRURURB(float value) {
        bitField0_ |= 0x00000800;
        rURURB_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float RUR_URB = 12;</code>
       */
      public Builder clearRURURB() {
        bitField0_ = (bitField0_ & ~0x00000800);
        rURURB_ = 0F;
        onChanged();
        return this;
      }

      // required float FUNC_SYS = 13;
      private float fUNCSYS_ ;
      /**
       * <code>required float FUNC_SYS = 13;</code>
       */
      public boolean hasFUNCSYS() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required float FUNC_SYS = 13;</code>
       */
      public float getFUNCSYS() {
        return fUNCSYS_;
      }
      /**
       * <code>required float FUNC_SYS = 13;</code>
       */
      public Builder setFUNCSYS(float value) {
        bitField0_ |= 0x00001000;
        fUNCSYS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float FUNC_SYS = 13;</code>
       */
      public Builder clearFUNCSYS() {
        bitField0_ = (bitField0_ & ~0x00001000);
        fUNCSYS_ = 0F;
        onChanged();
        return this;
      }

      // required float HARM_EV = 14;
      private float hARMEV_ ;
      /**
       * <code>required float HARM_EV = 14;</code>
       */
      public boolean hasHARMEV() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required float HARM_EV = 14;</code>
       */
      public float getHARMEV() {
        return hARMEV_;
      }
      /**
       * <code>required float HARM_EV = 14;</code>
       */
      public Builder setHARMEV(float value) {
        bitField0_ |= 0x00002000;
        hARMEV_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float HARM_EV = 14;</code>
       */
      public Builder clearHARMEV() {
        bitField0_ = (bitField0_ & ~0x00002000);
        hARMEV_ = 0F;
        onChanged();
        return this;
      }

      // required float MAN_COLL = 15;
      private float mANCOLL_ ;
      /**
       * <code>required float MAN_COLL = 15;</code>
       */
      public boolean hasMANCOLL() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>required float MAN_COLL = 15;</code>
       */
      public float getMANCOLL() {
        return mANCOLL_;
      }
      /**
       * <code>required float MAN_COLL = 15;</code>
       */
      public Builder setMANCOLL(float value) {
        bitField0_ |= 0x00004000;
        mANCOLL_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float MAN_COLL = 15;</code>
       */
      public Builder clearMANCOLL() {
        bitField0_ = (bitField0_ & ~0x00004000);
        mANCOLL_ = 0F;
        onChanged();
        return this;
      }

      // required float SCH_BUS = 16;
      private float sCHBUS_ ;
      /**
       * <code>required float SCH_BUS = 16;</code>
       */
      public boolean hasSCHBUS() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>required float SCH_BUS = 16;</code>
       */
      public float getSCHBUS() {
        return sCHBUS_;
      }
      /**
       * <code>required float SCH_BUS = 16;</code>
       */
      public Builder setSCHBUS(float value) {
        bitField0_ |= 0x00008000;
        sCHBUS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float SCH_BUS = 16;</code>
       */
      public Builder clearSCHBUS() {
        bitField0_ = (bitField0_ & ~0x00008000);
        sCHBUS_ = 0F;
        onChanged();
        return this;
      }

      // required float MAKE = 17;
      private float mAKE_ ;
      /**
       * <code>required float MAKE = 17;</code>
       */
      public boolean hasMAKE() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>required float MAKE = 17;</code>
       */
      public float getMAKE() {
        return mAKE_;
      }
      /**
       * <code>required float MAKE = 17;</code>
       */
      public Builder setMAKE(float value) {
        bitField0_ |= 0x00010000;
        mAKE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float MAKE = 17;</code>
       */
      public Builder clearMAKE() {
        bitField0_ = (bitField0_ & ~0x00010000);
        mAKE_ = 0F;
        onChanged();
        return this;
      }

      // required float MAK_MOD = 18;
      private float mAKMOD_ ;
      /**
       * <code>required float MAK_MOD = 18;</code>
       */
      public boolean hasMAKMOD() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>required float MAK_MOD = 18;</code>
       */
      public float getMAKMOD() {
        return mAKMOD_;
      }
      /**
       * <code>required float MAK_MOD = 18;</code>
       */
      public Builder setMAKMOD(float value) {
        bitField0_ |= 0x00020000;
        mAKMOD_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float MAK_MOD = 18;</code>
       */
      public Builder clearMAKMOD() {
        bitField0_ = (bitField0_ & ~0x00020000);
        mAKMOD_ = 0F;
        onChanged();
        return this;
      }

      // required float BODY_TYP = 19;
      private float bODYTYP_ ;
      /**
       * <code>required float BODY_TYP = 19;</code>
       */
      public boolean hasBODYTYP() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>required float BODY_TYP = 19;</code>
       */
      public float getBODYTYP() {
        return bODYTYP_;
      }
      /**
       * <code>required float BODY_TYP = 19;</code>
       */
      public Builder setBODYTYP(float value) {
        bitField0_ |= 0x00040000;
        bODYTYP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float BODY_TYP = 19;</code>
       */
      public Builder clearBODYTYP() {
        bitField0_ = (bitField0_ & ~0x00040000);
        bODYTYP_ = 0F;
        onChanged();
        return this;
      }

      // required float MOD_YEAR = 20;
      private float mODYEAR_ ;
      /**
       * <code>required float MOD_YEAR = 20;</code>
       */
      public boolean hasMODYEAR() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>required float MOD_YEAR = 20;</code>
       */
      public float getMODYEAR() {
        return mODYEAR_;
      }
      /**
       * <code>required float MOD_YEAR = 20;</code>
       */
      public Builder setMODYEAR(float value) {
        bitField0_ |= 0x00080000;
        mODYEAR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float MOD_YEAR = 20;</code>
       */
      public Builder clearMODYEAR() {
        bitField0_ = (bitField0_ & ~0x00080000);
        mODYEAR_ = 0F;
        onChanged();
        return this;
      }

      // required float TOW_VEH = 21;
      private float tOWVEH_ ;
      /**
       * <code>required float TOW_VEH = 21;</code>
       */
      public boolean hasTOWVEH() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>required float TOW_VEH = 21;</code>
       */
      public float getTOWVEH() {
        return tOWVEH_;
      }
      /**
       * <code>required float TOW_VEH = 21;</code>
       */
      public Builder setTOWVEH(float value) {
        bitField0_ |= 0x00100000;
        tOWVEH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float TOW_VEH = 21;</code>
       */
      public Builder clearTOWVEH() {
        bitField0_ = (bitField0_ & ~0x00100000);
        tOWVEH_ = 0F;
        onChanged();
        return this;
      }

      // required float SPEC_USE = 22;
      private float sPECUSE_ ;
      /**
       * <code>required float SPEC_USE = 22;</code>
       */
      public boolean hasSPECUSE() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>required float SPEC_USE = 22;</code>
       */
      public float getSPECUSE() {
        return sPECUSE_;
      }
      /**
       * <code>required float SPEC_USE = 22;</code>
       */
      public Builder setSPECUSE(float value) {
        bitField0_ |= 0x00200000;
        sPECUSE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float SPEC_USE = 22;</code>
       */
      public Builder clearSPECUSE() {
        bitField0_ = (bitField0_ & ~0x00200000);
        sPECUSE_ = 0F;
        onChanged();
        return this;
      }

      // required float EMER_USE = 23;
      private float eMERUSE_ ;
      /**
       * <code>required float EMER_USE = 23;</code>
       */
      public boolean hasEMERUSE() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>required float EMER_USE = 23;</code>
       */
      public float getEMERUSE() {
        return eMERUSE_;
      }
      /**
       * <code>required float EMER_USE = 23;</code>
       */
      public Builder setEMERUSE(float value) {
        bitField0_ |= 0x00400000;
        eMERUSE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float EMER_USE = 23;</code>
       */
      public Builder clearEMERUSE() {
        bitField0_ = (bitField0_ & ~0x00400000);
        eMERUSE_ = 0F;
        onChanged();
        return this;
      }

      // required float ROLLOVER = 24;
      private float rOLLOVER_ ;
      /**
       * <code>required float ROLLOVER = 24;</code>
       */
      public boolean hasROLLOVER() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>required float ROLLOVER = 24;</code>
       */
      public float getROLLOVER() {
        return rOLLOVER_;
      }
      /**
       * <code>required float ROLLOVER = 24;</code>
       */
      public Builder setROLLOVER(float value) {
        bitField0_ |= 0x00800000;
        rOLLOVER_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float ROLLOVER = 24;</code>
       */
      public Builder clearROLLOVER() {
        bitField0_ = (bitField0_ & ~0x00800000);
        rOLLOVER_ = 0F;
        onChanged();
        return this;
      }

      // required float IMPACT1 = 25;
      private float iMPACT1_ ;
      /**
       * <code>required float IMPACT1 = 25;</code>
       */
      public boolean hasIMPACT1() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>required float IMPACT1 = 25;</code>
       */
      public float getIMPACT1() {
        return iMPACT1_;
      }
      /**
       * <code>required float IMPACT1 = 25;</code>
       */
      public Builder setIMPACT1(float value) {
        bitField0_ |= 0x01000000;
        iMPACT1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float IMPACT1 = 25;</code>
       */
      public Builder clearIMPACT1() {
        bitField0_ = (bitField0_ & ~0x01000000);
        iMPACT1_ = 0F;
        onChanged();
        return this;
      }

      // required float FIRE_EXP = 26;
      private float fIREEXP_ ;
      /**
       * <code>required float FIRE_EXP = 26;</code>
       */
      public boolean hasFIREEXP() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>required float FIRE_EXP = 26;</code>
       */
      public float getFIREEXP() {
        return fIREEXP_;
      }
      /**
       * <code>required float FIRE_EXP = 26;</code>
       */
      public Builder setFIREEXP(float value) {
        bitField0_ |= 0x02000000;
        fIREEXP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float FIRE_EXP = 26;</code>
       */
      public Builder clearFIREEXP() {
        bitField0_ = (bitField0_ & ~0x02000000);
        fIREEXP_ = 0F;
        onChanged();
        return this;
      }

      // required float AGE = 27;
      private float aGE_ ;
      /**
       * <code>required float AGE = 27;</code>
       */
      public boolean hasAGE() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>required float AGE = 27;</code>
       */
      public float getAGE() {
        return aGE_;
      }
      /**
       * <code>required float AGE = 27;</code>
       */
      public Builder setAGE(float value) {
        bitField0_ |= 0x04000000;
        aGE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float AGE = 27;</code>
       */
      public Builder clearAGE() {
        bitField0_ = (bitField0_ & ~0x04000000);
        aGE_ = 0F;
        onChanged();
        return this;
      }

      // required float SEX = 28;
      private float sEX_ ;
      /**
       * <code>required float SEX = 28;</code>
       */
      public boolean hasSEX() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>required float SEX = 28;</code>
       */
      public float getSEX() {
        return sEX_;
      }
      /**
       * <code>required float SEX = 28;</code>
       */
      public Builder setSEX(float value) {
        bitField0_ |= 0x08000000;
        sEX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float SEX = 28;</code>
       */
      public Builder clearSEX() {
        bitField0_ = (bitField0_ & ~0x08000000);
        sEX_ = 0F;
        onChanged();
        return this;
      }

      // required float PER_TYP = 29;
      private float pERTYP_ ;
      /**
       * <code>required float PER_TYP = 29;</code>
       */
      public boolean hasPERTYP() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>required float PER_TYP = 29;</code>
       */
      public float getPERTYP() {
        return pERTYP_;
      }
      /**
       * <code>required float PER_TYP = 29;</code>
       */
      public Builder setPERTYP(float value) {
        bitField0_ |= 0x10000000;
        pERTYP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float PER_TYP = 29;</code>
       */
      public Builder clearPERTYP() {
        bitField0_ = (bitField0_ & ~0x10000000);
        pERTYP_ = 0F;
        onChanged();
        return this;
      }

      // required float INJ_SEV = 30;
      private float iNJSEV_ ;
      /**
       * <code>required float INJ_SEV = 30;</code>
       */
      public boolean hasINJSEV() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>required float INJ_SEV = 30;</code>
       */
      public float getINJSEV() {
        return iNJSEV_;
      }
      /**
       * <code>required float INJ_SEV = 30;</code>
       */
      public Builder setINJSEV(float value) {
        bitField0_ |= 0x20000000;
        iNJSEV_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float INJ_SEV = 30;</code>
       */
      public Builder clearINJSEV() {
        bitField0_ = (bitField0_ & ~0x20000000);
        iNJSEV_ = 0F;
        onChanged();
        return this;
      }

      // required float SEAT_POS = 31;
      private float sEATPOS_ ;
      /**
       * <code>required float SEAT_POS = 31;</code>
       */
      public boolean hasSEATPOS() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>required float SEAT_POS = 31;</code>
       */
      public float getSEATPOS() {
        return sEATPOS_;
      }
      /**
       * <code>required float SEAT_POS = 31;</code>
       */
      public Builder setSEATPOS(float value) {
        bitField0_ |= 0x40000000;
        sEATPOS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float SEAT_POS = 31;</code>
       */
      public Builder clearSEATPOS() {
        bitField0_ = (bitField0_ & ~0x40000000);
        sEATPOS_ = 0F;
        onChanged();
        return this;
      }

      // required float REST_USE = 32;
      private float rESTUSE_ ;
      /**
       * <code>required float REST_USE = 32;</code>
       */
      public boolean hasRESTUSE() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>required float REST_USE = 32;</code>
       */
      public float getRESTUSE() {
        return rESTUSE_;
      }
      /**
       * <code>required float REST_USE = 32;</code>
       */
      public Builder setRESTUSE(float value) {
        bitField0_ |= 0x80000000;
        rESTUSE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float REST_USE = 32;</code>
       */
      public Builder clearRESTUSE() {
        bitField0_ = (bitField0_ & ~0x80000000);
        rESTUSE_ = 0F;
        onChanged();
        return this;
      }

      // required float REST_MIS = 33;
      private float rESTMIS_ ;
      /**
       * <code>required float REST_MIS = 33;</code>
       */
      public boolean hasRESTMIS() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required float REST_MIS = 33;</code>
       */
      public float getRESTMIS() {
        return rESTMIS_;
      }
      /**
       * <code>required float REST_MIS = 33;</code>
       */
      public Builder setRESTMIS(float value) {
        bitField1_ |= 0x00000001;
        rESTMIS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float REST_MIS = 33;</code>
       */
      public Builder clearRESTMIS() {
        bitField1_ = (bitField1_ & ~0x00000001);
        rESTMIS_ = 0F;
        onChanged();
        return this;
      }

      // required float AIR_BAG = 34;
      private float aIRBAG_ ;
      /**
       * <code>required float AIR_BAG = 34;</code>
       */
      public boolean hasAIRBAG() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float AIR_BAG = 34;</code>
       */
      public float getAIRBAG() {
        return aIRBAG_;
      }
      /**
       * <code>required float AIR_BAG = 34;</code>
       */
      public Builder setAIRBAG(float value) {
        bitField1_ |= 0x00000002;
        aIRBAG_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float AIR_BAG = 34;</code>
       */
      public Builder clearAIRBAG() {
        bitField1_ = (bitField1_ & ~0x00000002);
        aIRBAG_ = 0F;
        onChanged();
        return this;
      }

      // required float EJECTION = 35;
      private float eJECTION_ ;
      /**
       * <code>required float EJECTION = 35;</code>
       */
      public boolean hasEJECTION() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float EJECTION = 35;</code>
       */
      public float getEJECTION() {
        return eJECTION_;
      }
      /**
       * <code>required float EJECTION = 35;</code>
       */
      public Builder setEJECTION(float value) {
        bitField1_ |= 0x00000004;
        eJECTION_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float EJECTION = 35;</code>
       */
      public Builder clearEJECTION() {
        bitField1_ = (bitField1_ & ~0x00000004);
        eJECTION_ = 0F;
        onChanged();
        return this;
      }

      // required float EJ_PATH = 36;
      private float eJPATH_ ;
      /**
       * <code>required float EJ_PATH = 36;</code>
       */
      public boolean hasEJPATH() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float EJ_PATH = 36;</code>
       */
      public float getEJPATH() {
        return eJPATH_;
      }
      /**
       * <code>required float EJ_PATH = 36;</code>
       */
      public Builder setEJPATH(float value) {
        bitField1_ |= 0x00000008;
        eJPATH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float EJ_PATH = 36;</code>
       */
      public Builder clearEJPATH() {
        bitField1_ = (bitField1_ & ~0x00000008);
        eJPATH_ = 0F;
        onChanged();
        return this;
      }

      // required float EXTRICAT = 37;
      private float eXTRICAT_ ;
      /**
       * <code>required float EXTRICAT = 37;</code>
       */
      public boolean hasEXTRICAT() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required float EXTRICAT = 37;</code>
       */
      public float getEXTRICAT() {
        return eXTRICAT_;
      }
      /**
       * <code>required float EXTRICAT = 37;</code>
       */
      public Builder setEXTRICAT(float value) {
        bitField1_ |= 0x00000010;
        eXTRICAT_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float EXTRICAT = 37;</code>
       */
      public Builder clearEXTRICAT() {
        bitField1_ = (bitField1_ & ~0x00000010);
        eXTRICAT_ = 0F;
        onChanged();
        return this;
      }

      // required float DRINKING = 38;
      private float dRINKING_ ;
      /**
       * <code>required float DRINKING = 38;</code>
       */
      public boolean hasDRINKING() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required float DRINKING = 38;</code>
       */
      public float getDRINKING() {
        return dRINKING_;
      }
      /**
       * <code>required float DRINKING = 38;</code>
       */
      public Builder setDRINKING(float value) {
        bitField1_ |= 0x00000020;
        dRINKING_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DRINKING = 38;</code>
       */
      public Builder clearDRINKING() {
        bitField1_ = (bitField1_ & ~0x00000020);
        dRINKING_ = 0F;
        onChanged();
        return this;
      }

      // required float ALC_DET = 39;
      private float aLCDET_ ;
      /**
       * <code>required float ALC_DET = 39;</code>
       */
      public boolean hasALCDET() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required float ALC_DET = 39;</code>
       */
      public float getALCDET() {
        return aLCDET_;
      }
      /**
       * <code>required float ALC_DET = 39;</code>
       */
      public Builder setALCDET(float value) {
        bitField1_ |= 0x00000040;
        aLCDET_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float ALC_DET = 39;</code>
       */
      public Builder clearALCDET() {
        bitField1_ = (bitField1_ & ~0x00000040);
        aLCDET_ = 0F;
        onChanged();
        return this;
      }

      // required float ALC_STATUS = 40;
      private float aLCSTATUS_ ;
      /**
       * <code>required float ALC_STATUS = 40;</code>
       */
      public boolean hasALCSTATUS() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required float ALC_STATUS = 40;</code>
       */
      public float getALCSTATUS() {
        return aLCSTATUS_;
      }
      /**
       * <code>required float ALC_STATUS = 40;</code>
       */
      public Builder setALCSTATUS(float value) {
        bitField1_ |= 0x00000080;
        aLCSTATUS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float ALC_STATUS = 40;</code>
       */
      public Builder clearALCSTATUS() {
        bitField1_ = (bitField1_ & ~0x00000080);
        aLCSTATUS_ = 0F;
        onChanged();
        return this;
      }

      // required float ATST_TYP = 41;
      private float aTSTTYP_ ;
      /**
       * <code>required float ATST_TYP = 41;</code>
       */
      public boolean hasATSTTYP() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required float ATST_TYP = 41;</code>
       */
      public float getATSTTYP() {
        return aTSTTYP_;
      }
      /**
       * <code>required float ATST_TYP = 41;</code>
       */
      public Builder setATSTTYP(float value) {
        bitField1_ |= 0x00000100;
        aTSTTYP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float ATST_TYP = 41;</code>
       */
      public Builder clearATSTTYP() {
        bitField1_ = (bitField1_ & ~0x00000100);
        aTSTTYP_ = 0F;
        onChanged();
        return this;
      }

      // required float ALC_RES = 42;
      private float aLCRES_ ;
      /**
       * <code>required float ALC_RES = 42;</code>
       */
      public boolean hasALCRES() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required float ALC_RES = 42;</code>
       */
      public float getALCRES() {
        return aLCRES_;
      }
      /**
       * <code>required float ALC_RES = 42;</code>
       */
      public Builder setALCRES(float value) {
        bitField1_ |= 0x00000200;
        aLCRES_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float ALC_RES = 42;</code>
       */
      public Builder clearALCRES() {
        bitField1_ = (bitField1_ & ~0x00000200);
        aLCRES_ = 0F;
        onChanged();
        return this;
      }

      // required float DRUGS = 43;
      private float dRUGS_ ;
      /**
       * <code>required float DRUGS = 43;</code>
       */
      public boolean hasDRUGS() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required float DRUGS = 43;</code>
       */
      public float getDRUGS() {
        return dRUGS_;
      }
      /**
       * <code>required float DRUGS = 43;</code>
       */
      public Builder setDRUGS(float value) {
        bitField1_ |= 0x00000400;
        dRUGS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DRUGS = 43;</code>
       */
      public Builder clearDRUGS() {
        bitField1_ = (bitField1_ & ~0x00000400);
        dRUGS_ = 0F;
        onChanged();
        return this;
      }

      // required float DRUG_DET = 44;
      private float dRUGDET_ ;
      /**
       * <code>required float DRUG_DET = 44;</code>
       */
      public boolean hasDRUGDET() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required float DRUG_DET = 44;</code>
       */
      public float getDRUGDET() {
        return dRUGDET_;
      }
      /**
       * <code>required float DRUG_DET = 44;</code>
       */
      public Builder setDRUGDET(float value) {
        bitField1_ |= 0x00000800;
        dRUGDET_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DRUG_DET = 44;</code>
       */
      public Builder clearDRUGDET() {
        bitField1_ = (bitField1_ & ~0x00000800);
        dRUGDET_ = 0F;
        onChanged();
        return this;
      }

      // required float DSTATUS = 45;
      private float dSTATUS_ ;
      /**
       * <code>required float DSTATUS = 45;</code>
       */
      public boolean hasDSTATUS() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required float DSTATUS = 45;</code>
       */
      public float getDSTATUS() {
        return dSTATUS_;
      }
      /**
       * <code>required float DSTATUS = 45;</code>
       */
      public Builder setDSTATUS(float value) {
        bitField1_ |= 0x00001000;
        dSTATUS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DSTATUS = 45;</code>
       */
      public Builder clearDSTATUS() {
        bitField1_ = (bitField1_ & ~0x00001000);
        dSTATUS_ = 0F;
        onChanged();
        return this;
      }

      // optional float DRUGTST1 = 46;
      private float dRUGTST1_ ;
      /**
       * <code>optional float DRUGTST1 = 46;</code>
       */
      public boolean hasDRUGTST1() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float DRUGTST1 = 46;</code>
       */
      public float getDRUGTST1() {
        return dRUGTST1_;
      }
      /**
       * <code>optional float DRUGTST1 = 46;</code>
       */
      public Builder setDRUGTST1(float value) {
        bitField1_ |= 0x00002000;
        dRUGTST1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float DRUGTST1 = 46;</code>
       */
      public Builder clearDRUGTST1() {
        bitField1_ = (bitField1_ & ~0x00002000);
        dRUGTST1_ = 0F;
        onChanged();
        return this;
      }

      // optional float DRUGTST2 = 47;
      private float dRUGTST2_ ;
      /**
       * <code>optional float DRUGTST2 = 47;</code>
       */
      public boolean hasDRUGTST2() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional float DRUGTST2 = 47;</code>
       */
      public float getDRUGTST2() {
        return dRUGTST2_;
      }
      /**
       * <code>optional float DRUGTST2 = 47;</code>
       */
      public Builder setDRUGTST2(float value) {
        bitField1_ |= 0x00004000;
        dRUGTST2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float DRUGTST2 = 47;</code>
       */
      public Builder clearDRUGTST2() {
        bitField1_ = (bitField1_ & ~0x00004000);
        dRUGTST2_ = 0F;
        onChanged();
        return this;
      }

      // optional float DRUGTST3 = 48;
      private float dRUGTST3_ ;
      /**
       * <code>optional float DRUGTST3 = 48;</code>
       */
      public boolean hasDRUGTST3() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional float DRUGTST3 = 48;</code>
       */
      public float getDRUGTST3() {
        return dRUGTST3_;
      }
      /**
       * <code>optional float DRUGTST3 = 48;</code>
       */
      public Builder setDRUGTST3(float value) {
        bitField1_ |= 0x00008000;
        dRUGTST3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float DRUGTST3 = 48;</code>
       */
      public Builder clearDRUGTST3() {
        bitField1_ = (bitField1_ & ~0x00008000);
        dRUGTST3_ = 0F;
        onChanged();
        return this;
      }

      // optional float DRUGRES1 = 49;
      private float dRUGRES1_ ;
      /**
       * <code>optional float DRUGRES1 = 49;</code>
       */
      public boolean hasDRUGRES1() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional float DRUGRES1 = 49;</code>
       */
      public float getDRUGRES1() {
        return dRUGRES1_;
      }
      /**
       * <code>optional float DRUGRES1 = 49;</code>
       */
      public Builder setDRUGRES1(float value) {
        bitField1_ |= 0x00010000;
        dRUGRES1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float DRUGRES1 = 49;</code>
       */
      public Builder clearDRUGRES1() {
        bitField1_ = (bitField1_ & ~0x00010000);
        dRUGRES1_ = 0F;
        onChanged();
        return this;
      }

      // optional float DRUGRES2 = 50;
      private float dRUGRES2_ ;
      /**
       * <code>optional float DRUGRES2 = 50;</code>
       */
      public boolean hasDRUGRES2() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional float DRUGRES2 = 50;</code>
       */
      public float getDRUGRES2() {
        return dRUGRES2_;
      }
      /**
       * <code>optional float DRUGRES2 = 50;</code>
       */
      public Builder setDRUGRES2(float value) {
        bitField1_ |= 0x00020000;
        dRUGRES2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float DRUGRES2 = 50;</code>
       */
      public Builder clearDRUGRES2() {
        bitField1_ = (bitField1_ & ~0x00020000);
        dRUGRES2_ = 0F;
        onChanged();
        return this;
      }

      // optional float DRUGRES3 = 51;
      private float dRUGRES3_ ;
      /**
       * <code>optional float DRUGRES3 = 51;</code>
       */
      public boolean hasDRUGRES3() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional float DRUGRES3 = 51;</code>
       */
      public float getDRUGRES3() {
        return dRUGRES3_;
      }
      /**
       * <code>optional float DRUGRES3 = 51;</code>
       */
      public Builder setDRUGRES3(float value) {
        bitField1_ |= 0x00040000;
        dRUGRES3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float DRUGRES3 = 51;</code>
       */
      public Builder clearDRUGRES3() {
        bitField1_ = (bitField1_ & ~0x00040000);
        dRUGRES3_ = 0F;
        onChanged();
        return this;
      }

      // required float HOSPITAL = 52;
      private float hOSPITAL_ ;
      /**
       * <code>required float HOSPITAL = 52;</code>
       */
      public boolean hasHOSPITAL() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>required float HOSPITAL = 52;</code>
       */
      public float getHOSPITAL() {
        return hOSPITAL_;
      }
      /**
       * <code>required float HOSPITAL = 52;</code>
       */
      public Builder setHOSPITAL(float value) {
        bitField1_ |= 0x00080000;
        hOSPITAL_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float HOSPITAL = 52;</code>
       */
      public Builder clearHOSPITAL() {
        bitField1_ = (bitField1_ & ~0x00080000);
        hOSPITAL_ = 0F;
        onChanged();
        return this;
      }

      // required float DOA = 53;
      private float dOA_ ;
      /**
       * <code>required float DOA = 53;</code>
       */
      public boolean hasDOA() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>required float DOA = 53;</code>
       */
      public float getDOA() {
        return dOA_;
      }
      /**
       * <code>required float DOA = 53;</code>
       */
      public Builder setDOA(float value) {
        bitField1_ |= 0x00100000;
        dOA_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DOA = 53;</code>
       */
      public Builder clearDOA() {
        bitField1_ = (bitField1_ & ~0x00100000);
        dOA_ = 0F;
        onChanged();
        return this;
      }

      // required float DEATH_DA = 54;
      private float dEATHDA_ ;
      /**
       * <code>required float DEATH_DA = 54;</code>
       */
      public boolean hasDEATHDA() {
        return ((bitField1_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>required float DEATH_DA = 54;</code>
       */
      public float getDEATHDA() {
        return dEATHDA_;
      }
      /**
       * <code>required float DEATH_DA = 54;</code>
       */
      public Builder setDEATHDA(float value) {
        bitField1_ |= 0x00200000;
        dEATHDA_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DEATH_DA = 54;</code>
       */
      public Builder clearDEATHDA() {
        bitField1_ = (bitField1_ & ~0x00200000);
        dEATHDA_ = 0F;
        onChanged();
        return this;
      }

      // required float DEATH_MO = 55;
      private float dEATHMO_ ;
      /**
       * <code>required float DEATH_MO = 55;</code>
       */
      public boolean hasDEATHMO() {
        return ((bitField1_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>required float DEATH_MO = 55;</code>
       */
      public float getDEATHMO() {
        return dEATHMO_;
      }
      /**
       * <code>required float DEATH_MO = 55;</code>
       */
      public Builder setDEATHMO(float value) {
        bitField1_ |= 0x00400000;
        dEATHMO_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DEATH_MO = 55;</code>
       */
      public Builder clearDEATHMO() {
        bitField1_ = (bitField1_ & ~0x00400000);
        dEATHMO_ = 0F;
        onChanged();
        return this;
      }

      // required float DEATH_YR = 56;
      private float dEATHYR_ ;
      /**
       * <code>required float DEATH_YR = 56;</code>
       */
      public boolean hasDEATHYR() {
        return ((bitField1_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>required float DEATH_YR = 56;</code>
       */
      public float getDEATHYR() {
        return dEATHYR_;
      }
      /**
       * <code>required float DEATH_YR = 56;</code>
       */
      public Builder setDEATHYR(float value) {
        bitField1_ |= 0x00800000;
        dEATHYR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DEATH_YR = 56;</code>
       */
      public Builder clearDEATHYR() {
        bitField1_ = (bitField1_ & ~0x00800000);
        dEATHYR_ = 0F;
        onChanged();
        return this;
      }

      // required float DEATH_HR = 57;
      private float dEATHHR_ ;
      /**
       * <code>required float DEATH_HR = 57;</code>
       */
      public boolean hasDEATHHR() {
        return ((bitField1_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>required float DEATH_HR = 57;</code>
       */
      public float getDEATHHR() {
        return dEATHHR_;
      }
      /**
       * <code>required float DEATH_HR = 57;</code>
       */
      public Builder setDEATHHR(float value) {
        bitField1_ |= 0x01000000;
        dEATHHR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DEATH_HR = 57;</code>
       */
      public Builder clearDEATHHR() {
        bitField1_ = (bitField1_ & ~0x01000000);
        dEATHHR_ = 0F;
        onChanged();
        return this;
      }

      // required float DEATH_MN = 58;
      private float dEATHMN_ ;
      /**
       * <code>required float DEATH_MN = 58;</code>
       */
      public boolean hasDEATHMN() {
        return ((bitField1_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>required float DEATH_MN = 58;</code>
       */
      public float getDEATHMN() {
        return dEATHMN_;
      }
      /**
       * <code>required float DEATH_MN = 58;</code>
       */
      public Builder setDEATHMN(float value) {
        bitField1_ |= 0x02000000;
        dEATHMN_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DEATH_MN = 58;</code>
       */
      public Builder clearDEATHMN() {
        bitField1_ = (bitField1_ & ~0x02000000);
        dEATHMN_ = 0F;
        onChanged();
        return this;
      }

      // required float DEATH_TM = 59;
      private float dEATHTM_ ;
      /**
       * <code>required float DEATH_TM = 59;</code>
       */
      public boolean hasDEATHTM() {
        return ((bitField1_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>required float DEATH_TM = 59;</code>
       */
      public float getDEATHTM() {
        return dEATHTM_;
      }
      /**
       * <code>required float DEATH_TM = 59;</code>
       */
      public Builder setDEATHTM(float value) {
        bitField1_ |= 0x04000000;
        dEATHTM_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DEATH_TM = 59;</code>
       */
      public Builder clearDEATHTM() {
        bitField1_ = (bitField1_ & ~0x04000000);
        dEATHTM_ = 0F;
        onChanged();
        return this;
      }

      // required float LAG_HRS = 60;
      private float lAGHRS_ ;
      /**
       * <code>required float LAG_HRS = 60;</code>
       */
      public boolean hasLAGHRS() {
        return ((bitField1_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>required float LAG_HRS = 60;</code>
       */
      public float getLAGHRS() {
        return lAGHRS_;
      }
      /**
       * <code>required float LAG_HRS = 60;</code>
       */
      public Builder setLAGHRS(float value) {
        bitField1_ |= 0x08000000;
        lAGHRS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float LAG_HRS = 60;</code>
       */
      public Builder clearLAGHRS() {
        bitField1_ = (bitField1_ & ~0x08000000);
        lAGHRS_ = 0F;
        onChanged();
        return this;
      }

      // required float LAG_MINS = 61;
      private float lAGMINS_ ;
      /**
       * <code>required float LAG_MINS = 61;</code>
       */
      public boolean hasLAGMINS() {
        return ((bitField1_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>required float LAG_MINS = 61;</code>
       */
      public float getLAGMINS() {
        return lAGMINS_;
      }
      /**
       * <code>required float LAG_MINS = 61;</code>
       */
      public Builder setLAGMINS(float value) {
        bitField1_ |= 0x10000000;
        lAGMINS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float LAG_MINS = 61;</code>
       */
      public Builder clearLAGMINS() {
        bitField1_ = (bitField1_ & ~0x10000000);
        lAGMINS_ = 0F;
        onChanged();
        return this;
      }

      // required float P_SF1 = 62;
      private float pSF1_ ;
      /**
       * <code>required float P_SF1 = 62;</code>
       */
      public boolean hasPSF1() {
        return ((bitField1_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>required float P_SF1 = 62;</code>
       */
      public float getPSF1() {
        return pSF1_;
      }
      /**
       * <code>required float P_SF1 = 62;</code>
       */
      public Builder setPSF1(float value) {
        bitField1_ |= 0x20000000;
        pSF1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float P_SF1 = 62;</code>
       */
      public Builder clearPSF1() {
        bitField1_ = (bitField1_ & ~0x20000000);
        pSF1_ = 0F;
        onChanged();
        return this;
      }

      // optional float P_SF2 = 63;
      private float pSF2_ ;
      /**
       * <code>optional float P_SF2 = 63;</code>
       */
      public boolean hasPSF2() {
        return ((bitField1_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional float P_SF2 = 63;</code>
       */
      public float getPSF2() {
        return pSF2_;
      }
      /**
       * <code>optional float P_SF2 = 63;</code>
       */
      public Builder setPSF2(float value) {
        bitField1_ |= 0x40000000;
        pSF2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float P_SF2 = 63;</code>
       */
      public Builder clearPSF2() {
        bitField1_ = (bitField1_ & ~0x40000000);
        pSF2_ = 0F;
        onChanged();
        return this;
      }

      // optional float P_SF3 = 64;
      private float pSF3_ ;
      /**
       * <code>optional float P_SF3 = 64;</code>
       */
      public boolean hasPSF3() {
        return ((bitField1_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional float P_SF3 = 64;</code>
       */
      public float getPSF3() {
        return pSF3_;
      }
      /**
       * <code>optional float P_SF3 = 64;</code>
       */
      public Builder setPSF3(float value) {
        bitField1_ |= 0x80000000;
        pSF3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float P_SF3 = 64;</code>
       */
      public Builder clearPSF3() {
        bitField1_ = (bitField1_ & ~0x80000000);
        pSF3_ = 0F;
        onChanged();
        return this;
      }

      // required float WORK_INJ = 65;
      private float wORKINJ_ ;
      /**
       * <code>required float WORK_INJ = 65;</code>
       */
      public boolean hasWORKINJ() {
        return ((bitField2_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required float WORK_INJ = 65;</code>
       */
      public float getWORKINJ() {
        return wORKINJ_;
      }
      /**
       * <code>required float WORK_INJ = 65;</code>
       */
      public Builder setWORKINJ(float value) {
        bitField2_ |= 0x00000001;
        wORKINJ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float WORK_INJ = 65;</code>
       */
      public Builder clearWORKINJ() {
        bitField2_ = (bitField2_ & ~0x00000001);
        wORKINJ_ = 0F;
        onChanged();
        return this;
      }

      // required float HISPANIC = 66;
      private float hISPANIC_ ;
      /**
       * <code>required float HISPANIC = 66;</code>
       */
      public boolean hasHISPANIC() {
        return ((bitField2_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float HISPANIC = 66;</code>
       */
      public float getHISPANIC() {
        return hISPANIC_;
      }
      /**
       * <code>required float HISPANIC = 66;</code>
       */
      public Builder setHISPANIC(float value) {
        bitField2_ |= 0x00000002;
        hISPANIC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float HISPANIC = 66;</code>
       */
      public Builder clearHISPANIC() {
        bitField2_ = (bitField2_ & ~0x00000002);
        hISPANIC_ = 0F;
        onChanged();
        return this;
      }

      // required float RACE = 67;
      private float rACE_ ;
      /**
       * <code>required float RACE = 67;</code>
       */
      public boolean hasRACE() {
        return ((bitField2_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float RACE = 67;</code>
       */
      public float getRACE() {
        return rACE_;
      }
      /**
       * <code>required float RACE = 67;</code>
       */
      public Builder setRACE(float value) {
        bitField2_ |= 0x00000004;
        rACE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float RACE = 67;</code>
       */
      public Builder clearRACE() {
        bitField2_ = (bitField2_ & ~0x00000004);
        rACE_ = 0F;
        onChanged();
        return this;
      }

      // required float LOCATION = 68;
      private float lOCATION_ ;
      /**
       * <code>required float LOCATION = 68;</code>
       */
      public boolean hasLOCATION() {
        return ((bitField2_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float LOCATION = 68;</code>
       */
      public float getLOCATION() {
        return lOCATION_;
      }
      /**
       * <code>required float LOCATION = 68;</code>
       */
      public Builder setLOCATION(float value) {
        bitField2_ |= 0x00000008;
        lOCATION_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float LOCATION = 68;</code>
       */
      public Builder clearLOCATION() {
        bitField2_ = (bitField2_ & ~0x00000008);
        lOCATION_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:boa.types.Person)
    }

    static {
      defaultInstance = new Person(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:boa.types.Person)
  }

  public interface VehicleOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .boa.types.STATE state = 1;
    /**
     * <code>required .boa.types.STATE state = 1;</code>
     */
    boolean hasState();
    /**
     * <code>required .boa.types.STATE state = 1;</code>
     */
    boa.types.Transport.STATE getState();

    // required int32 ST_CASE = 2;
    /**
     * <code>required int32 ST_CASE = 2;</code>
     */
    boolean hasSTCASE();
    /**
     * <code>required int32 ST_CASE = 2;</code>
     */
    int getSTCASE();

    // required int32 VEH_NO = 3;
    /**
     * <code>required int32 VEH_NO = 3;</code>
     */
    boolean hasVEHNO();
    /**
     * <code>required int32 VEH_NO = 3;</code>
     */
    int getVEHNO();

    // required int32 VE_FORMS = 4;
    /**
     * <code>required int32 VE_FORMS = 4;</code>
     */
    boolean hasVEFORMS();
    /**
     * <code>required int32 VE_FORMS = 4;</code>
     */
    int getVEFORMS();

    // required int32 NUMOCCS = 5;
    /**
     * <code>required int32 NUMOCCS = 5;</code>
     */
    boolean hasNUMOCCS();
    /**
     * <code>required int32 NUMOCCS = 5;</code>
     */
    int getNUMOCCS();

    // required int32 DAY = 6;
    /**
     * <code>required int32 DAY = 6;</code>
     */
    boolean hasDAY();
    /**
     * <code>required int32 DAY = 6;</code>
     */
    int getDAY();

    // required int32 MONTH = 7;
    /**
     * <code>required int32 MONTH = 7;</code>
     */
    boolean hasMONTH();
    /**
     * <code>required int32 MONTH = 7;</code>
     */
    int getMONTH();

    // required int32 HOUR = 8;
    /**
     * <code>required int32 HOUR = 8;</code>
     */
    boolean hasHOUR();
    /**
     * <code>required int32 HOUR = 8;</code>
     */
    int getHOUR();

    // required int32 MINUTE = 9;
    /**
     * <code>required int32 MINUTE = 9;</code>
     */
    boolean hasMINUTE();
    /**
     * <code>required int32 MINUTE = 9;</code>
     */
    int getMINUTE();

    // required int32 HARM_EV = 10;
    /**
     * <code>required int32 HARM_EV = 10;</code>
     */
    boolean hasHARMEV();
    /**
     * <code>required int32 HARM_EV = 10;</code>
     */
    int getHARMEV();

    // required int32 MAN_COLL = 11;
    /**
     * <code>required int32 MAN_COLL = 11;</code>
     */
    boolean hasMANCOLL();
    /**
     * <code>required int32 MAN_COLL = 11;</code>
     */
    int getMANCOLL();

    // required int32 UNITTYPE = 12;
    /**
     * <code>required int32 UNITTYPE = 12;</code>
     */
    boolean hasUNITTYPE();
    /**
     * <code>required int32 UNITTYPE = 12;</code>
     */
    int getUNITTYPE();

    // required int32 HIT_RUN = 13;
    /**
     * <code>required int32 HIT_RUN = 13;</code>
     */
    boolean hasHITRUN();
    /**
     * <code>required int32 HIT_RUN = 13;</code>
     */
    int getHITRUN();

    // required int32 REG_STAT = 14;
    /**
     * <code>required int32 REG_STAT = 14;</code>
     */
    boolean hasREGSTAT();
    /**
     * <code>required int32 REG_STAT = 14;</code>
     */
    int getREGSTAT();

    // required int32 OWNER = 15;
    /**
     * <code>required int32 OWNER = 15;</code>
     */
    boolean hasOWNER();
    /**
     * <code>required int32 OWNER = 15;</code>
     */
    int getOWNER();

    // required int32 MAKE = 16;
    /**
     * <code>required int32 MAKE = 16;</code>
     */
    boolean hasMAKE();
    /**
     * <code>required int32 MAKE = 16;</code>
     */
    int getMAKE();

    // required int32 MODEL = 17;
    /**
     * <code>required int32 MODEL = 17;</code>
     */
    boolean hasMODEL();
    /**
     * <code>required int32 MODEL = 17;</code>
     */
    int getMODEL();

    // required int32 MAK_MOD = 18;
    /**
     * <code>required int32 MAK_MOD = 18;</code>
     */
    boolean hasMAKMOD();
    /**
     * <code>required int32 MAK_MOD = 18;</code>
     */
    int getMAKMOD();

    // required int32 BODY_TYP = 19;
    /**
     * <code>required int32 BODY_TYP = 19;</code>
     */
    boolean hasBODYTYP();
    /**
     * <code>required int32 BODY_TYP = 19;</code>
     */
    int getBODYTYP();

    // required int32 MOD_YEAR = 20;
    /**
     * <code>required int32 MOD_YEAR = 20;</code>
     */
    boolean hasMODYEAR();
    /**
     * <code>required int32 MOD_YEAR = 20;</code>
     */
    int getMODYEAR();

    // required string VIN = 21;
    /**
     * <code>required string VIN = 21;</code>
     */
    boolean hasVIN();
    /**
     * <code>required string VIN = 21;</code>
     */
    java.lang.String getVIN();
    /**
     * <code>required string VIN = 21;</code>
     */
    com.google.protobuf.ByteString
        getVINBytes();

    // required string VIN_1 = 22;
    /**
     * <code>required string VIN_1 = 22;</code>
     */
    boolean hasVIN1();
    /**
     * <code>required string VIN_1 = 22;</code>
     */
    java.lang.String getVIN1();
    /**
     * <code>required string VIN_1 = 22;</code>
     */
    com.google.protobuf.ByteString
        getVIN1Bytes();

    // required string VIN_2 = 23;
    /**
     * <code>required string VIN_2 = 23;</code>
     */
    boolean hasVIN2();
    /**
     * <code>required string VIN_2 = 23;</code>
     */
    java.lang.String getVIN2();
    /**
     * <code>required string VIN_2 = 23;</code>
     */
    com.google.protobuf.ByteString
        getVIN2Bytes();

    // required string VIN_3 = 24;
    /**
     * <code>required string VIN_3 = 24;</code>
     */
    boolean hasVIN3();
    /**
     * <code>required string VIN_3 = 24;</code>
     */
    java.lang.String getVIN3();
    /**
     * <code>required string VIN_3 = 24;</code>
     */
    com.google.protobuf.ByteString
        getVIN3Bytes();

    // required string VIN_4 = 25;
    /**
     * <code>required string VIN_4 = 25;</code>
     */
    boolean hasVIN4();
    /**
     * <code>required string VIN_4 = 25;</code>
     */
    java.lang.String getVIN4();
    /**
     * <code>required string VIN_4 = 25;</code>
     */
    com.google.protobuf.ByteString
        getVIN4Bytes();

    // required string VIN_5 = 26;
    /**
     * <code>required string VIN_5 = 26;</code>
     */
    boolean hasVIN5();
    /**
     * <code>required string VIN_5 = 26;</code>
     */
    java.lang.String getVIN5();
    /**
     * <code>required string VIN_5 = 26;</code>
     */
    com.google.protobuf.ByteString
        getVIN5Bytes();

    // required string VIN_6 = 27;
    /**
     * <code>required string VIN_6 = 27;</code>
     */
    boolean hasVIN6();
    /**
     * <code>required string VIN_6 = 27;</code>
     */
    java.lang.String getVIN6();
    /**
     * <code>required string VIN_6 = 27;</code>
     */
    com.google.protobuf.ByteString
        getVIN6Bytes();

    // required string VIN_7 = 28;
    /**
     * <code>required string VIN_7 = 28;</code>
     */
    boolean hasVIN7();
    /**
     * <code>required string VIN_7 = 28;</code>
     */
    java.lang.String getVIN7();
    /**
     * <code>required string VIN_7 = 28;</code>
     */
    com.google.protobuf.ByteString
        getVIN7Bytes();

    // required string VIN_8 = 29;
    /**
     * <code>required string VIN_8 = 29;</code>
     */
    boolean hasVIN8();
    /**
     * <code>required string VIN_8 = 29;</code>
     */
    java.lang.String getVIN8();
    /**
     * <code>required string VIN_8 = 29;</code>
     */
    com.google.protobuf.ByteString
        getVIN8Bytes();

    // required string VIN_9 = 30;
    /**
     * <code>required string VIN_9 = 30;</code>
     */
    boolean hasVIN9();
    /**
     * <code>required string VIN_9 = 30;</code>
     */
    java.lang.String getVIN9();
    /**
     * <code>required string VIN_9 = 30;</code>
     */
    com.google.protobuf.ByteString
        getVIN9Bytes();

    // required string VIN_10 = 31;
    /**
     * <code>required string VIN_10 = 31;</code>
     */
    boolean hasVIN10();
    /**
     * <code>required string VIN_10 = 31;</code>
     */
    java.lang.String getVIN10();
    /**
     * <code>required string VIN_10 = 31;</code>
     */
    com.google.protobuf.ByteString
        getVIN10Bytes();

    // required string VIN_11 = 32;
    /**
     * <code>required string VIN_11 = 32;</code>
     */
    boolean hasVIN11();
    /**
     * <code>required string VIN_11 = 32;</code>
     */
    java.lang.String getVIN11();
    /**
     * <code>required string VIN_11 = 32;</code>
     */
    com.google.protobuf.ByteString
        getVIN11Bytes();

    // required string VIN_12 = 33;
    /**
     * <code>required string VIN_12 = 33;</code>
     */
    boolean hasVIN12();
    /**
     * <code>required string VIN_12 = 33;</code>
     */
    java.lang.String getVIN12();
    /**
     * <code>required string VIN_12 = 33;</code>
     */
    com.google.protobuf.ByteString
        getVIN12Bytes();

    // required int32 TOW_VEH = 34;
    /**
     * <code>required int32 TOW_VEH = 34;</code>
     */
    boolean hasTOWVEH();
    /**
     * <code>required int32 TOW_VEH = 34;</code>
     */
    int getTOWVEH();

    // required int32 J_KNIFE = 35;
    /**
     * <code>required int32 J_KNIFE = 35;</code>
     */
    boolean hasJKNIFE();
    /**
     * <code>required int32 J_KNIFE = 35;</code>
     */
    int getJKNIFE();

    // required string MCARR_I1 = 36;
    /**
     * <code>required string MCARR_I1 = 36;</code>
     */
    boolean hasMCARRI1();
    /**
     * <code>required string MCARR_I1 = 36;</code>
     */
    java.lang.String getMCARRI1();
    /**
     * <code>required string MCARR_I1 = 36;</code>
     */
    com.google.protobuf.ByteString
        getMCARRI1Bytes();

    // required string MCARR_I2 = 37;
    /**
     * <code>required string MCARR_I2 = 37;</code>
     */
    boolean hasMCARRI2();
    /**
     * <code>required string MCARR_I2 = 37;</code>
     */
    java.lang.String getMCARRI2();
    /**
     * <code>required string MCARR_I2 = 37;</code>
     */
    com.google.protobuf.ByteString
        getMCARRI2Bytes();

    // required string MCARR_ID = 38;
    /**
     * <code>required string MCARR_ID = 38;</code>
     */
    boolean hasMCARRID();
    /**
     * <code>required string MCARR_ID = 38;</code>
     */
    java.lang.String getMCARRID();
    /**
     * <code>required string MCARR_ID = 38;</code>
     */
    com.google.protobuf.ByteString
        getMCARRIDBytes();

    // required int32 GVWR = 39;
    /**
     * <code>required int32 GVWR = 39;</code>
     */
    boolean hasGVWR();
    /**
     * <code>required int32 GVWR = 39;</code>
     */
    int getGVWR();

    // required int32 V_CONFIG = 40;
    /**
     * <code>required int32 V_CONFIG = 40;</code>
     */
    boolean hasVCONFIG();
    /**
     * <code>required int32 V_CONFIG = 40;</code>
     */
    int getVCONFIG();

    // required int32 CARGO_BT = 41;
    /**
     * <code>required int32 CARGO_BT = 41;</code>
     */
    boolean hasCARGOBT();
    /**
     * <code>required int32 CARGO_BT = 41;</code>
     */
    int getCARGOBT();

    // required int32 HAZ_INV = 42;
    /**
     * <code>required int32 HAZ_INV = 42;</code>
     */
    boolean hasHAZINV();
    /**
     * <code>required int32 HAZ_INV = 42;</code>
     */
    int getHAZINV();

    // required int32 HAZ_PLAC = 43;
    /**
     * <code>required int32 HAZ_PLAC = 43;</code>
     */
    boolean hasHAZPLAC();
    /**
     * <code>required int32 HAZ_PLAC = 43;</code>
     */
    int getHAZPLAC();

    // required int32 HAZ_ID = 44;
    /**
     * <code>required int32 HAZ_ID = 44;</code>
     */
    boolean hasHAZID();
    /**
     * <code>required int32 HAZ_ID = 44;</code>
     */
    int getHAZID();

    // required int32 HAZ_CNO = 45;
    /**
     * <code>required int32 HAZ_CNO = 45;</code>
     */
    boolean hasHAZCNO();
    /**
     * <code>required int32 HAZ_CNO = 45;</code>
     */
    int getHAZCNO();

    // required int32 HAZ_REL = 46;
    /**
     * <code>required int32 HAZ_REL = 46;</code>
     */
    boolean hasHAZREL();
    /**
     * <code>required int32 HAZ_REL = 46;</code>
     */
    int getHAZREL();

    // required int32 BUS_USE = 47;
    /**
     * <code>required int32 BUS_USE = 47;</code>
     */
    boolean hasBUSUSE();
    /**
     * <code>required int32 BUS_USE = 47;</code>
     */
    int getBUSUSE();

    // required int32 SPEC_USE = 48;
    /**
     * <code>required int32 SPEC_USE = 48;</code>
     */
    boolean hasSPECUSE();
    /**
     * <code>required int32 SPEC_USE = 48;</code>
     */
    int getSPECUSE();

    // required int32 EMER_USE = 49;
    /**
     * <code>required int32 EMER_USE = 49;</code>
     */
    boolean hasEMERUSE();
    /**
     * <code>required int32 EMER_USE = 49;</code>
     */
    int getEMERUSE();

    // required int32 TRAV_SP = 50;
    /**
     * <code>required int32 TRAV_SP = 50;</code>
     */
    boolean hasTRAVSP();
    /**
     * <code>required int32 TRAV_SP = 50;</code>
     */
    int getTRAVSP();

    // required int32 UNDERIDE = 51;
    /**
     * <code>required int32 UNDERIDE = 51;</code>
     */
    boolean hasUNDERIDE();
    /**
     * <code>required int32 UNDERIDE = 51;</code>
     */
    int getUNDERIDE();

    // required int32 ROLLOVER = 52;
    /**
     * <code>required int32 ROLLOVER = 52;</code>
     */
    boolean hasROLLOVER();
    /**
     * <code>required int32 ROLLOVER = 52;</code>
     */
    int getROLLOVER();

    // required int32 ROLINLOC = 53;
    /**
     * <code>required int32 ROLINLOC = 53;</code>
     */
    boolean hasROLINLOC();
    /**
     * <code>required int32 ROLINLOC = 53;</code>
     */
    int getROLINLOC();

    // required int32 IMPACT1 = 54;
    /**
     * <code>required int32 IMPACT1 = 54;</code>
     */
    boolean hasIMPACT1();
    /**
     * <code>required int32 IMPACT1 = 54;</code>
     */
    int getIMPACT1();

    // required int32 DEFORMED = 55;
    /**
     * <code>required int32 DEFORMED = 55;</code>
     */
    boolean hasDEFORMED();
    /**
     * <code>required int32 DEFORMED = 55;</code>
     */
    int getDEFORMED();

    // required int32 TOWED = 56;
    /**
     * <code>required int32 TOWED = 56;</code>
     */
    boolean hasTOWED();
    /**
     * <code>required int32 TOWED = 56;</code>
     */
    int getTOWED();

    // required int32 M_HARM = 57;
    /**
     * <code>required int32 M_HARM = 57;</code>
     */
    boolean hasMHARM();
    /**
     * <code>required int32 M_HARM = 57;</code>
     */
    int getMHARM();

    // required int32 VEH_SC1 = 58;
    /**
     * <code>required int32 VEH_SC1 = 58;</code>
     */
    boolean hasVEHSC1();
    /**
     * <code>required int32 VEH_SC1 = 58;</code>
     */
    int getVEHSC1();

    // required int32 VEH_SC2 = 59;
    /**
     * <code>required int32 VEH_SC2 = 59;</code>
     */
    boolean hasVEHSC2();
    /**
     * <code>required int32 VEH_SC2 = 59;</code>
     */
    int getVEHSC2();

    // required int32 FIRE_EXP = 60;
    /**
     * <code>required int32 FIRE_EXP = 60;</code>
     */
    boolean hasFIREEXP();
    /**
     * <code>required int32 FIRE_EXP = 60;</code>
     */
    int getFIREEXP();

    // required int32 DR_PRES = 61;
    /**
     * <code>required int32 DR_PRES = 61;</code>
     */
    boolean hasDRPRES();
    /**
     * <code>required int32 DR_PRES = 61;</code>
     */
    int getDRPRES();

    // required int32 L_STATE = 62;
    /**
     * <code>required int32 L_STATE = 62;</code>
     */
    boolean hasLSTATE();
    /**
     * <code>required int32 L_STATE = 62;</code>
     */
    int getLSTATE();

    // required int32 DR_ZIP = 63;
    /**
     * <code>required int32 DR_ZIP = 63;</code>
     */
    boolean hasDRZIP();
    /**
     * <code>required int32 DR_ZIP = 63;</code>
     */
    int getDRZIP();

    // required int32 L_STATUS = 64;
    /**
     * <code>required int32 L_STATUS = 64;</code>
     */
    boolean hasLSTATUS();
    /**
     * <code>required int32 L_STATUS = 64;</code>
     */
    int getLSTATUS();

    // required int32 L_TYPE = 65;
    /**
     * <code>required int32 L_TYPE = 65;</code>
     */
    boolean hasLTYPE();
    /**
     * <code>required int32 L_TYPE = 65;</code>
     */
    int getLTYPE();

    // required int32 CDL_STAT = 66;
    /**
     * <code>required int32 CDL_STAT = 66;</code>
     */
    boolean hasCDLSTAT();
    /**
     * <code>required int32 CDL_STAT = 66;</code>
     */
    int getCDLSTAT();

    // required int32 L_ENDORS = 67;
    /**
     * <code>required int32 L_ENDORS = 67;</code>
     */
    boolean hasLENDORS();
    /**
     * <code>required int32 L_ENDORS = 67;</code>
     */
    int getLENDORS();

    // required int32 L_COMPL = 68;
    /**
     * <code>required int32 L_COMPL = 68;</code>
     */
    boolean hasLCOMPL();
    /**
     * <code>required int32 L_COMPL = 68;</code>
     */
    int getLCOMPL();

    // required int32 L_RESTRI = 69;
    /**
     * <code>required int32 L_RESTRI = 69;</code>
     */
    boolean hasLRESTRI();
    /**
     * <code>required int32 L_RESTRI = 69;</code>
     */
    int getLRESTRI();

    // required int32 DR_HGT = 70;
    /**
     * <code>required int32 DR_HGT = 70;</code>
     */
    boolean hasDRHGT();
    /**
     * <code>required int32 DR_HGT = 70;</code>
     */
    int getDRHGT();

    // required int32 DR_WGT = 71;
    /**
     * <code>required int32 DR_WGT = 71;</code>
     */
    boolean hasDRWGT();
    /**
     * <code>required int32 DR_WGT = 71;</code>
     */
    int getDRWGT();

    // required int32 PREV_ACC = 72;
    /**
     * <code>required int32 PREV_ACC = 72;</code>
     */
    boolean hasPREVACC();
    /**
     * <code>required int32 PREV_ACC = 72;</code>
     */
    int getPREVACC();

    // required int32 PREV_SUS = 73;
    /**
     * <code>required int32 PREV_SUS = 73;</code>
     */
    boolean hasPREVSUS();
    /**
     * <code>required int32 PREV_SUS = 73;</code>
     */
    int getPREVSUS();

    // required int32 PREV_DWI = 74;
    /**
     * <code>required int32 PREV_DWI = 74;</code>
     */
    boolean hasPREVDWI();
    /**
     * <code>required int32 PREV_DWI = 74;</code>
     */
    int getPREVDWI();

    // required int32 PREV_SPD = 75;
    /**
     * <code>required int32 PREV_SPD = 75;</code>
     */
    boolean hasPREVSPD();
    /**
     * <code>required int32 PREV_SPD = 75;</code>
     */
    int getPREVSPD();

    // required int32 PREV_OTH = 76;
    /**
     * <code>required int32 PREV_OTH = 76;</code>
     */
    boolean hasPREVOTH();
    /**
     * <code>required int32 PREV_OTH = 76;</code>
     */
    int getPREVOTH();

    // required int32 FIRST_MO = 77;
    /**
     * <code>required int32 FIRST_MO = 77;</code>
     */
    boolean hasFIRSTMO();
    /**
     * <code>required int32 FIRST_MO = 77;</code>
     */
    int getFIRSTMO();

    // required int32 FIRST_YR = 78;
    /**
     * <code>required int32 FIRST_YR = 78;</code>
     */
    boolean hasFIRSTYR();
    /**
     * <code>required int32 FIRST_YR = 78;</code>
     */
    int getFIRSTYR();

    // required int32 LAST_MO = 79;
    /**
     * <code>required int32 LAST_MO = 79;</code>
     */
    boolean hasLASTMO();
    /**
     * <code>required int32 LAST_MO = 79;</code>
     */
    int getLASTMO();

    // required int32 LAST_YR = 80;
    /**
     * <code>required int32 LAST_YR = 80;</code>
     */
    boolean hasLASTYR();
    /**
     * <code>required int32 LAST_YR = 80;</code>
     */
    int getLASTYR();

    // required int32 SPEEDREL = 81;
    /**
     * <code>required int32 SPEEDREL = 81;</code>
     */
    boolean hasSPEEDREL();
    /**
     * <code>required int32 SPEEDREL = 81;</code>
     */
    int getSPEEDREL();

    // required int32 DR_SF1 = 82;
    /**
     * <code>required int32 DR_SF1 = 82;</code>
     */
    boolean hasDRSF1();
    /**
     * <code>required int32 DR_SF1 = 82;</code>
     */
    int getDRSF1();

    // optional int32 DR_SF2 = 83;
    /**
     * <code>optional int32 DR_SF2 = 83;</code>
     */
    boolean hasDRSF2();
    /**
     * <code>optional int32 DR_SF2 = 83;</code>
     */
    int getDRSF2();

    // optional int32 DR_SF3 = 84;
    /**
     * <code>optional int32 DR_SF3 = 84;</code>
     */
    boolean hasDRSF3();
    /**
     * <code>optional int32 DR_SF3 = 84;</code>
     */
    int getDRSF3();

    // optional int32 DR_SF4 = 85;
    /**
     * <code>optional int32 DR_SF4 = 85;</code>
     */
    boolean hasDRSF4();
    /**
     * <code>optional int32 DR_SF4 = 85;</code>
     */
    int getDRSF4();

    // required int32 VTRAFWAY = 86;
    /**
     * <code>required int32 VTRAFWAY = 86;</code>
     */
    boolean hasVTRAFWAY();
    /**
     * <code>required int32 VTRAFWAY = 86;</code>
     */
    int getVTRAFWAY();

    // required int32 VNUM_LAN = 87;
    /**
     * <code>required int32 VNUM_LAN = 87;</code>
     */
    boolean hasVNUMLAN();
    /**
     * <code>required int32 VNUM_LAN = 87;</code>
     */
    int getVNUMLAN();

    // required int32 VSPD_LIM = 88;
    /**
     * <code>required int32 VSPD_LIM = 88;</code>
     */
    boolean hasVSPDLIM();
    /**
     * <code>required int32 VSPD_LIM = 88;</code>
     */
    int getVSPDLIM();

    // required int32 VALIGN = 89;
    /**
     * <code>required int32 VALIGN = 89;</code>
     */
    boolean hasVALIGN();
    /**
     * <code>required int32 VALIGN = 89;</code>
     */
    int getVALIGN();

    // required int32 VPROFILE = 90;
    /**
     * <code>required int32 VPROFILE = 90;</code>
     */
    boolean hasVPROFILE();
    /**
     * <code>required int32 VPROFILE = 90;</code>
     */
    int getVPROFILE();

    // required int32 VPAVETYP = 91;
    /**
     * <code>required int32 VPAVETYP = 91;</code>
     */
    boolean hasVPAVETYP();
    /**
     * <code>required int32 VPAVETYP = 91;</code>
     */
    int getVPAVETYP();

    // required int32 VSURCOND = 92;
    /**
     * <code>required int32 VSURCOND = 92;</code>
     */
    boolean hasVSURCOND();
    /**
     * <code>required int32 VSURCOND = 92;</code>
     */
    int getVSURCOND();

    // required int32 VTRAFCON = 93;
    /**
     * <code>required int32 VTRAFCON = 93;</code>
     */
    boolean hasVTRAFCON();
    /**
     * <code>required int32 VTRAFCON = 93;</code>
     */
    int getVTRAFCON();

    // required int32 VTCONT_F = 94;
    /**
     * <code>required int32 VTCONT_F = 94;</code>
     */
    boolean hasVTCONTF();
    /**
     * <code>required int32 VTCONT_F = 94;</code>
     */
    int getVTCONTF();

    // required int32 P_CRASH1 = 95;
    /**
     * <code>required int32 P_CRASH1 = 95;</code>
     */
    boolean hasPCRASH1();
    /**
     * <code>required int32 P_CRASH1 = 95;</code>
     */
    int getPCRASH1();

    // required int32 P_CRASH2 = 96;
    /**
     * <code>required int32 P_CRASH2 = 96;</code>
     */
    boolean hasPCRASH2();
    /**
     * <code>required int32 P_CRASH2 = 96;</code>
     */
    int getPCRASH2();

    // required int32 P_CRASH3 = 97;
    /**
     * <code>required int32 P_CRASH3 = 97;</code>
     */
    boolean hasPCRASH3();
    /**
     * <code>required int32 P_CRASH3 = 97;</code>
     */
    int getPCRASH3();

    // required int32 PCRASH4 = 98;
    /**
     * <code>required int32 PCRASH4 = 98;</code>
     */
    boolean hasPCRASH4();
    /**
     * <code>required int32 PCRASH4 = 98;</code>
     */
    int getPCRASH4();

    // required int32 PCRASH5 = 99;
    /**
     * <code>required int32 PCRASH5 = 99;</code>
     */
    boolean hasPCRASH5();
    /**
     * <code>required int32 PCRASH5 = 99;</code>
     */
    int getPCRASH5();

    // required int32 ACC_TYPE = 100;
    /**
     * <code>required int32 ACC_TYPE = 100;</code>
     */
    boolean hasACCTYPE();
    /**
     * <code>required int32 ACC_TYPE = 100;</code>
     */
    int getACCTYPE();

    // required int32 DEATHS = 101;
    /**
     * <code>required int32 DEATHS = 101;</code>
     */
    boolean hasDEATHS();
    /**
     * <code>required int32 DEATHS = 101;</code>
     */
    int getDEATHS();

    // required int32 DR_DRINK = 102;
    /**
     * <code>required int32 DR_DRINK = 102;</code>
     */
    boolean hasDRDRINK();
    /**
     * <code>required int32 DR_DRINK = 102;</code>
     */
    int getDRDRINK();
  }
  /**
   * Protobuf type {@code boa.types.Vehicle}
   */
  public static final class Vehicle extends
      com.google.protobuf.GeneratedMessage
      implements VehicleOrBuilder {
    // Use Vehicle.newBuilder() to construct.
    private Vehicle(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Vehicle(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Vehicle defaultInstance;
    public static Vehicle getDefaultInstance() {
      return defaultInstance;
    }

    public Vehicle getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Vehicle(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      int mutable_bitField2_ = 0;
      int mutable_bitField3_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              boa.types.Transport.STATE value = boa.types.Transport.STATE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                state_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              sTCASE_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              vEHNO_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              vEFORMS_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              nUMOCCS_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              dAY_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              mONTH_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              hOUR_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              mINUTE_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              hARMEV_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              mANCOLL_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              uNITTYPE_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              hITRUN_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              rEGSTAT_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              oWNER_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              mAKE_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              mODEL_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              mAKMOD_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              bODYTYP_ = input.readInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              mODYEAR_ = input.readInt32();
              break;
            }
            case 170: {
              bitField0_ |= 0x00100000;
              vIN_ = input.readBytes();
              break;
            }
            case 178: {
              bitField0_ |= 0x00200000;
              vIN1_ = input.readBytes();
              break;
            }
            case 186: {
              bitField0_ |= 0x00400000;
              vIN2_ = input.readBytes();
              break;
            }
            case 194: {
              bitField0_ |= 0x00800000;
              vIN3_ = input.readBytes();
              break;
            }
            case 202: {
              bitField0_ |= 0x01000000;
              vIN4_ = input.readBytes();
              break;
            }
            case 210: {
              bitField0_ |= 0x02000000;
              vIN5_ = input.readBytes();
              break;
            }
            case 218: {
              bitField0_ |= 0x04000000;
              vIN6_ = input.readBytes();
              break;
            }
            case 226: {
              bitField0_ |= 0x08000000;
              vIN7_ = input.readBytes();
              break;
            }
            case 234: {
              bitField0_ |= 0x10000000;
              vIN8_ = input.readBytes();
              break;
            }
            case 242: {
              bitField0_ |= 0x20000000;
              vIN9_ = input.readBytes();
              break;
            }
            case 250: {
              bitField0_ |= 0x40000000;
              vIN10_ = input.readBytes();
              break;
            }
            case 258: {
              bitField0_ |= 0x80000000;
              vIN11_ = input.readBytes();
              break;
            }
            case 266: {
              bitField1_ |= 0x00000001;
              vIN12_ = input.readBytes();
              break;
            }
            case 272: {
              bitField1_ |= 0x00000002;
              tOWVEH_ = input.readInt32();
              break;
            }
            case 280: {
              bitField1_ |= 0x00000004;
              jKNIFE_ = input.readInt32();
              break;
            }
            case 290: {
              bitField1_ |= 0x00000008;
              mCARRI1_ = input.readBytes();
              break;
            }
            case 298: {
              bitField1_ |= 0x00000010;
              mCARRI2_ = input.readBytes();
              break;
            }
            case 306: {
              bitField1_ |= 0x00000020;
              mCARRID_ = input.readBytes();
              break;
            }
            case 312: {
              bitField1_ |= 0x00000040;
              gVWR_ = input.readInt32();
              break;
            }
            case 320: {
              bitField1_ |= 0x00000080;
              vCONFIG_ = input.readInt32();
              break;
            }
            case 328: {
              bitField1_ |= 0x00000100;
              cARGOBT_ = input.readInt32();
              break;
            }
            case 336: {
              bitField1_ |= 0x00000200;
              hAZINV_ = input.readInt32();
              break;
            }
            case 344: {
              bitField1_ |= 0x00000400;
              hAZPLAC_ = input.readInt32();
              break;
            }
            case 352: {
              bitField1_ |= 0x00000800;
              hAZID_ = input.readInt32();
              break;
            }
            case 360: {
              bitField1_ |= 0x00001000;
              hAZCNO_ = input.readInt32();
              break;
            }
            case 368: {
              bitField1_ |= 0x00002000;
              hAZREL_ = input.readInt32();
              break;
            }
            case 376: {
              bitField1_ |= 0x00004000;
              bUSUSE_ = input.readInt32();
              break;
            }
            case 384: {
              bitField1_ |= 0x00008000;
              sPECUSE_ = input.readInt32();
              break;
            }
            case 392: {
              bitField1_ |= 0x00010000;
              eMERUSE_ = input.readInt32();
              break;
            }
            case 400: {
              bitField1_ |= 0x00020000;
              tRAVSP_ = input.readInt32();
              break;
            }
            case 408: {
              bitField1_ |= 0x00040000;
              uNDERIDE_ = input.readInt32();
              break;
            }
            case 416: {
              bitField1_ |= 0x00080000;
              rOLLOVER_ = input.readInt32();
              break;
            }
            case 424: {
              bitField1_ |= 0x00100000;
              rOLINLOC_ = input.readInt32();
              break;
            }
            case 432: {
              bitField1_ |= 0x00200000;
              iMPACT1_ = input.readInt32();
              break;
            }
            case 440: {
              bitField1_ |= 0x00400000;
              dEFORMED_ = input.readInt32();
              break;
            }
            case 448: {
              bitField1_ |= 0x00800000;
              tOWED_ = input.readInt32();
              break;
            }
            case 456: {
              bitField1_ |= 0x01000000;
              mHARM_ = input.readInt32();
              break;
            }
            case 464: {
              bitField1_ |= 0x02000000;
              vEHSC1_ = input.readInt32();
              break;
            }
            case 472: {
              bitField1_ |= 0x04000000;
              vEHSC2_ = input.readInt32();
              break;
            }
            case 480: {
              bitField1_ |= 0x08000000;
              fIREEXP_ = input.readInt32();
              break;
            }
            case 488: {
              bitField1_ |= 0x10000000;
              dRPRES_ = input.readInt32();
              break;
            }
            case 496: {
              bitField1_ |= 0x20000000;
              lSTATE_ = input.readInt32();
              break;
            }
            case 504: {
              bitField1_ |= 0x40000000;
              dRZIP_ = input.readInt32();
              break;
            }
            case 512: {
              bitField1_ |= 0x80000000;
              lSTATUS_ = input.readInt32();
              break;
            }
            case 520: {
              bitField2_ |= 0x00000001;
              lTYPE_ = input.readInt32();
              break;
            }
            case 528: {
              bitField2_ |= 0x00000002;
              cDLSTAT_ = input.readInt32();
              break;
            }
            case 536: {
              bitField2_ |= 0x00000004;
              lENDORS_ = input.readInt32();
              break;
            }
            case 544: {
              bitField2_ |= 0x00000008;
              lCOMPL_ = input.readInt32();
              break;
            }
            case 552: {
              bitField2_ |= 0x00000010;
              lRESTRI_ = input.readInt32();
              break;
            }
            case 560: {
              bitField2_ |= 0x00000020;
              dRHGT_ = input.readInt32();
              break;
            }
            case 568: {
              bitField2_ |= 0x00000040;
              dRWGT_ = input.readInt32();
              break;
            }
            case 576: {
              bitField2_ |= 0x00000080;
              pREVACC_ = input.readInt32();
              break;
            }
            case 584: {
              bitField2_ |= 0x00000100;
              pREVSUS_ = input.readInt32();
              break;
            }
            case 592: {
              bitField2_ |= 0x00000200;
              pREVDWI_ = input.readInt32();
              break;
            }
            case 600: {
              bitField2_ |= 0x00000400;
              pREVSPD_ = input.readInt32();
              break;
            }
            case 608: {
              bitField2_ |= 0x00000800;
              pREVOTH_ = input.readInt32();
              break;
            }
            case 616: {
              bitField2_ |= 0x00001000;
              fIRSTMO_ = input.readInt32();
              break;
            }
            case 624: {
              bitField2_ |= 0x00002000;
              fIRSTYR_ = input.readInt32();
              break;
            }
            case 632: {
              bitField2_ |= 0x00004000;
              lASTMO_ = input.readInt32();
              break;
            }
            case 640: {
              bitField2_ |= 0x00008000;
              lASTYR_ = input.readInt32();
              break;
            }
            case 648: {
              bitField2_ |= 0x00010000;
              sPEEDREL_ = input.readInt32();
              break;
            }
            case 656: {
              bitField2_ |= 0x00020000;
              dRSF1_ = input.readInt32();
              break;
            }
            case 664: {
              bitField2_ |= 0x00040000;
              dRSF2_ = input.readInt32();
              break;
            }
            case 672: {
              bitField2_ |= 0x00080000;
              dRSF3_ = input.readInt32();
              break;
            }
            case 680: {
              bitField2_ |= 0x00100000;
              dRSF4_ = input.readInt32();
              break;
            }
            case 688: {
              bitField2_ |= 0x00200000;
              vTRAFWAY_ = input.readInt32();
              break;
            }
            case 696: {
              bitField2_ |= 0x00400000;
              vNUMLAN_ = input.readInt32();
              break;
            }
            case 704: {
              bitField2_ |= 0x00800000;
              vSPDLIM_ = input.readInt32();
              break;
            }
            case 712: {
              bitField2_ |= 0x01000000;
              vALIGN_ = input.readInt32();
              break;
            }
            case 720: {
              bitField2_ |= 0x02000000;
              vPROFILE_ = input.readInt32();
              break;
            }
            case 728: {
              bitField2_ |= 0x04000000;
              vPAVETYP_ = input.readInt32();
              break;
            }
            case 736: {
              bitField2_ |= 0x08000000;
              vSURCOND_ = input.readInt32();
              break;
            }
            case 744: {
              bitField2_ |= 0x10000000;
              vTRAFCON_ = input.readInt32();
              break;
            }
            case 752: {
              bitField2_ |= 0x20000000;
              vTCONTF_ = input.readInt32();
              break;
            }
            case 760: {
              bitField2_ |= 0x40000000;
              pCRASH1_ = input.readInt32();
              break;
            }
            case 768: {
              bitField2_ |= 0x80000000;
              pCRASH2_ = input.readInt32();
              break;
            }
            case 776: {
              bitField3_ |= 0x00000001;
              pCRASH3_ = input.readInt32();
              break;
            }
            case 784: {
              bitField3_ |= 0x00000002;
              pCRASH4_ = input.readInt32();
              break;
            }
            case 792: {
              bitField3_ |= 0x00000004;
              pCRASH5_ = input.readInt32();
              break;
            }
            case 800: {
              bitField3_ |= 0x00000008;
              aCCTYPE_ = input.readInt32();
              break;
            }
            case 808: {
              bitField3_ |= 0x00000010;
              dEATHS_ = input.readInt32();
              break;
            }
            case 816: {
              bitField3_ |= 0x00000020;
              dRDRINK_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return boa.types.Transport.internal_static_boa_types_Vehicle_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return boa.types.Transport.internal_static_boa_types_Vehicle_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              boa.types.Transport.Vehicle.class, boa.types.Transport.Vehicle.Builder.class);
    }

    public static com.google.protobuf.Parser<Vehicle> PARSER =
        new com.google.protobuf.AbstractParser<Vehicle>() {
      public Vehicle parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Vehicle(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Vehicle> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    private int bitField2_;
    private int bitField3_;
    // required .boa.types.STATE state = 1;
    public static final int STATE_FIELD_NUMBER = 1;
    private boa.types.Transport.STATE state_;
    /**
     * <code>required .boa.types.STATE state = 1;</code>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .boa.types.STATE state = 1;</code>
     */
    public boa.types.Transport.STATE getState() {
      return state_;
    }

    // required int32 ST_CASE = 2;
    public static final int ST_CASE_FIELD_NUMBER = 2;
    private int sTCASE_;
    /**
     * <code>required int32 ST_CASE = 2;</code>
     */
    public boolean hasSTCASE() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 ST_CASE = 2;</code>
     */
    public int getSTCASE() {
      return sTCASE_;
    }

    // required int32 VEH_NO = 3;
    public static final int VEH_NO_FIELD_NUMBER = 3;
    private int vEHNO_;
    /**
     * <code>required int32 VEH_NO = 3;</code>
     */
    public boolean hasVEHNO() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 VEH_NO = 3;</code>
     */
    public int getVEHNO() {
      return vEHNO_;
    }

    // required int32 VE_FORMS = 4;
    public static final int VE_FORMS_FIELD_NUMBER = 4;
    private int vEFORMS_;
    /**
     * <code>required int32 VE_FORMS = 4;</code>
     */
    public boolean hasVEFORMS() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 VE_FORMS = 4;</code>
     */
    public int getVEFORMS() {
      return vEFORMS_;
    }

    // required int32 NUMOCCS = 5;
    public static final int NUMOCCS_FIELD_NUMBER = 5;
    private int nUMOCCS_;
    /**
     * <code>required int32 NUMOCCS = 5;</code>
     */
    public boolean hasNUMOCCS() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 NUMOCCS = 5;</code>
     */
    public int getNUMOCCS() {
      return nUMOCCS_;
    }

    // required int32 DAY = 6;
    public static final int DAY_FIELD_NUMBER = 6;
    private int dAY_;
    /**
     * <code>required int32 DAY = 6;</code>
     */
    public boolean hasDAY() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 DAY = 6;</code>
     */
    public int getDAY() {
      return dAY_;
    }

    // required int32 MONTH = 7;
    public static final int MONTH_FIELD_NUMBER = 7;
    private int mONTH_;
    /**
     * <code>required int32 MONTH = 7;</code>
     */
    public boolean hasMONTH() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required int32 MONTH = 7;</code>
     */
    public int getMONTH() {
      return mONTH_;
    }

    // required int32 HOUR = 8;
    public static final int HOUR_FIELD_NUMBER = 8;
    private int hOUR_;
    /**
     * <code>required int32 HOUR = 8;</code>
     */
    public boolean hasHOUR() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required int32 HOUR = 8;</code>
     */
    public int getHOUR() {
      return hOUR_;
    }

    // required int32 MINUTE = 9;
    public static final int MINUTE_FIELD_NUMBER = 9;
    private int mINUTE_;
    /**
     * <code>required int32 MINUTE = 9;</code>
     */
    public boolean hasMINUTE() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required int32 MINUTE = 9;</code>
     */
    public int getMINUTE() {
      return mINUTE_;
    }

    // required int32 HARM_EV = 10;
    public static final int HARM_EV_FIELD_NUMBER = 10;
    private int hARMEV_;
    /**
     * <code>required int32 HARM_EV = 10;</code>
     */
    public boolean hasHARMEV() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required int32 HARM_EV = 10;</code>
     */
    public int getHARMEV() {
      return hARMEV_;
    }

    // required int32 MAN_COLL = 11;
    public static final int MAN_COLL_FIELD_NUMBER = 11;
    private int mANCOLL_;
    /**
     * <code>required int32 MAN_COLL = 11;</code>
     */
    public boolean hasMANCOLL() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required int32 MAN_COLL = 11;</code>
     */
    public int getMANCOLL() {
      return mANCOLL_;
    }

    // required int32 UNITTYPE = 12;
    public static final int UNITTYPE_FIELD_NUMBER = 12;
    private int uNITTYPE_;
    /**
     * <code>required int32 UNITTYPE = 12;</code>
     */
    public boolean hasUNITTYPE() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required int32 UNITTYPE = 12;</code>
     */
    public int getUNITTYPE() {
      return uNITTYPE_;
    }

    // required int32 HIT_RUN = 13;
    public static final int HIT_RUN_FIELD_NUMBER = 13;
    private int hITRUN_;
    /**
     * <code>required int32 HIT_RUN = 13;</code>
     */
    public boolean hasHITRUN() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required int32 HIT_RUN = 13;</code>
     */
    public int getHITRUN() {
      return hITRUN_;
    }

    // required int32 REG_STAT = 14;
    public static final int REG_STAT_FIELD_NUMBER = 14;
    private int rEGSTAT_;
    /**
     * <code>required int32 REG_STAT = 14;</code>
     */
    public boolean hasREGSTAT() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required int32 REG_STAT = 14;</code>
     */
    public int getREGSTAT() {
      return rEGSTAT_;
    }

    // required int32 OWNER = 15;
    public static final int OWNER_FIELD_NUMBER = 15;
    private int oWNER_;
    /**
     * <code>required int32 OWNER = 15;</code>
     */
    public boolean hasOWNER() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>required int32 OWNER = 15;</code>
     */
    public int getOWNER() {
      return oWNER_;
    }

    // required int32 MAKE = 16;
    public static final int MAKE_FIELD_NUMBER = 16;
    private int mAKE_;
    /**
     * <code>required int32 MAKE = 16;</code>
     */
    public boolean hasMAKE() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>required int32 MAKE = 16;</code>
     */
    public int getMAKE() {
      return mAKE_;
    }

    // required int32 MODEL = 17;
    public static final int MODEL_FIELD_NUMBER = 17;
    private int mODEL_;
    /**
     * <code>required int32 MODEL = 17;</code>
     */
    public boolean hasMODEL() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>required int32 MODEL = 17;</code>
     */
    public int getMODEL() {
      return mODEL_;
    }

    // required int32 MAK_MOD = 18;
    public static final int MAK_MOD_FIELD_NUMBER = 18;
    private int mAKMOD_;
    /**
     * <code>required int32 MAK_MOD = 18;</code>
     */
    public boolean hasMAKMOD() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>required int32 MAK_MOD = 18;</code>
     */
    public int getMAKMOD() {
      return mAKMOD_;
    }

    // required int32 BODY_TYP = 19;
    public static final int BODY_TYP_FIELD_NUMBER = 19;
    private int bODYTYP_;
    /**
     * <code>required int32 BODY_TYP = 19;</code>
     */
    public boolean hasBODYTYP() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>required int32 BODY_TYP = 19;</code>
     */
    public int getBODYTYP() {
      return bODYTYP_;
    }

    // required int32 MOD_YEAR = 20;
    public static final int MOD_YEAR_FIELD_NUMBER = 20;
    private int mODYEAR_;
    /**
     * <code>required int32 MOD_YEAR = 20;</code>
     */
    public boolean hasMODYEAR() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>required int32 MOD_YEAR = 20;</code>
     */
    public int getMODYEAR() {
      return mODYEAR_;
    }

    // required string VIN = 21;
    public static final int VIN_FIELD_NUMBER = 21;
    private java.lang.Object vIN_;
    /**
     * <code>required string VIN = 21;</code>
     */
    public boolean hasVIN() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>required string VIN = 21;</code>
     */
    public java.lang.String getVIN() {
      java.lang.Object ref = vIN_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vIN_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string VIN = 21;</code>
     */
    public com.google.protobuf.ByteString
        getVINBytes() {
      java.lang.Object ref = vIN_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vIN_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string VIN_1 = 22;
    public static final int VIN_1_FIELD_NUMBER = 22;
    private java.lang.Object vIN1_;
    /**
     * <code>required string VIN_1 = 22;</code>
     */
    public boolean hasVIN1() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>required string VIN_1 = 22;</code>
     */
    public java.lang.String getVIN1() {
      java.lang.Object ref = vIN1_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vIN1_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string VIN_1 = 22;</code>
     */
    public com.google.protobuf.ByteString
        getVIN1Bytes() {
      java.lang.Object ref = vIN1_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vIN1_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string VIN_2 = 23;
    public static final int VIN_2_FIELD_NUMBER = 23;
    private java.lang.Object vIN2_;
    /**
     * <code>required string VIN_2 = 23;</code>
     */
    public boolean hasVIN2() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>required string VIN_2 = 23;</code>
     */
    public java.lang.String getVIN2() {
      java.lang.Object ref = vIN2_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vIN2_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string VIN_2 = 23;</code>
     */
    public com.google.protobuf.ByteString
        getVIN2Bytes() {
      java.lang.Object ref = vIN2_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vIN2_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string VIN_3 = 24;
    public static final int VIN_3_FIELD_NUMBER = 24;
    private java.lang.Object vIN3_;
    /**
     * <code>required string VIN_3 = 24;</code>
     */
    public boolean hasVIN3() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>required string VIN_3 = 24;</code>
     */
    public java.lang.String getVIN3() {
      java.lang.Object ref = vIN3_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vIN3_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string VIN_3 = 24;</code>
     */
    public com.google.protobuf.ByteString
        getVIN3Bytes() {
      java.lang.Object ref = vIN3_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vIN3_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string VIN_4 = 25;
    public static final int VIN_4_FIELD_NUMBER = 25;
    private java.lang.Object vIN4_;
    /**
     * <code>required string VIN_4 = 25;</code>
     */
    public boolean hasVIN4() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>required string VIN_4 = 25;</code>
     */
    public java.lang.String getVIN4() {
      java.lang.Object ref = vIN4_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vIN4_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string VIN_4 = 25;</code>
     */
    public com.google.protobuf.ByteString
        getVIN4Bytes() {
      java.lang.Object ref = vIN4_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vIN4_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string VIN_5 = 26;
    public static final int VIN_5_FIELD_NUMBER = 26;
    private java.lang.Object vIN5_;
    /**
     * <code>required string VIN_5 = 26;</code>
     */
    public boolean hasVIN5() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>required string VIN_5 = 26;</code>
     */
    public java.lang.String getVIN5() {
      java.lang.Object ref = vIN5_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vIN5_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string VIN_5 = 26;</code>
     */
    public com.google.protobuf.ByteString
        getVIN5Bytes() {
      java.lang.Object ref = vIN5_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vIN5_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string VIN_6 = 27;
    public static final int VIN_6_FIELD_NUMBER = 27;
    private java.lang.Object vIN6_;
    /**
     * <code>required string VIN_6 = 27;</code>
     */
    public boolean hasVIN6() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>required string VIN_6 = 27;</code>
     */
    public java.lang.String getVIN6() {
      java.lang.Object ref = vIN6_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vIN6_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string VIN_6 = 27;</code>
     */
    public com.google.protobuf.ByteString
        getVIN6Bytes() {
      java.lang.Object ref = vIN6_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vIN6_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string VIN_7 = 28;
    public static final int VIN_7_FIELD_NUMBER = 28;
    private java.lang.Object vIN7_;
    /**
     * <code>required string VIN_7 = 28;</code>
     */
    public boolean hasVIN7() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>required string VIN_7 = 28;</code>
     */
    public java.lang.String getVIN7() {
      java.lang.Object ref = vIN7_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vIN7_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string VIN_7 = 28;</code>
     */
    public com.google.protobuf.ByteString
        getVIN7Bytes() {
      java.lang.Object ref = vIN7_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vIN7_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string VIN_8 = 29;
    public static final int VIN_8_FIELD_NUMBER = 29;
    private java.lang.Object vIN8_;
    /**
     * <code>required string VIN_8 = 29;</code>
     */
    public boolean hasVIN8() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>required string VIN_8 = 29;</code>
     */
    public java.lang.String getVIN8() {
      java.lang.Object ref = vIN8_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vIN8_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string VIN_8 = 29;</code>
     */
    public com.google.protobuf.ByteString
        getVIN8Bytes() {
      java.lang.Object ref = vIN8_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vIN8_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string VIN_9 = 30;
    public static final int VIN_9_FIELD_NUMBER = 30;
    private java.lang.Object vIN9_;
    /**
     * <code>required string VIN_9 = 30;</code>
     */
    public boolean hasVIN9() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>required string VIN_9 = 30;</code>
     */
    public java.lang.String getVIN9() {
      java.lang.Object ref = vIN9_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vIN9_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string VIN_9 = 30;</code>
     */
    public com.google.protobuf.ByteString
        getVIN9Bytes() {
      java.lang.Object ref = vIN9_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vIN9_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string VIN_10 = 31;
    public static final int VIN_10_FIELD_NUMBER = 31;
    private java.lang.Object vIN10_;
    /**
     * <code>required string VIN_10 = 31;</code>
     */
    public boolean hasVIN10() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>required string VIN_10 = 31;</code>
     */
    public java.lang.String getVIN10() {
      java.lang.Object ref = vIN10_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vIN10_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string VIN_10 = 31;</code>
     */
    public com.google.protobuf.ByteString
        getVIN10Bytes() {
      java.lang.Object ref = vIN10_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vIN10_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string VIN_11 = 32;
    public static final int VIN_11_FIELD_NUMBER = 32;
    private java.lang.Object vIN11_;
    /**
     * <code>required string VIN_11 = 32;</code>
     */
    public boolean hasVIN11() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>required string VIN_11 = 32;</code>
     */
    public java.lang.String getVIN11() {
      java.lang.Object ref = vIN11_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vIN11_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string VIN_11 = 32;</code>
     */
    public com.google.protobuf.ByteString
        getVIN11Bytes() {
      java.lang.Object ref = vIN11_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vIN11_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string VIN_12 = 33;
    public static final int VIN_12_FIELD_NUMBER = 33;
    private java.lang.Object vIN12_;
    /**
     * <code>required string VIN_12 = 33;</code>
     */
    public boolean hasVIN12() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string VIN_12 = 33;</code>
     */
    public java.lang.String getVIN12() {
      java.lang.Object ref = vIN12_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vIN12_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string VIN_12 = 33;</code>
     */
    public com.google.protobuf.ByteString
        getVIN12Bytes() {
      java.lang.Object ref = vIN12_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vIN12_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required int32 TOW_VEH = 34;
    public static final int TOW_VEH_FIELD_NUMBER = 34;
    private int tOWVEH_;
    /**
     * <code>required int32 TOW_VEH = 34;</code>
     */
    public boolean hasTOWVEH() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 TOW_VEH = 34;</code>
     */
    public int getTOWVEH() {
      return tOWVEH_;
    }

    // required int32 J_KNIFE = 35;
    public static final int J_KNIFE_FIELD_NUMBER = 35;
    private int jKNIFE_;
    /**
     * <code>required int32 J_KNIFE = 35;</code>
     */
    public boolean hasJKNIFE() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 J_KNIFE = 35;</code>
     */
    public int getJKNIFE() {
      return jKNIFE_;
    }

    // required string MCARR_I1 = 36;
    public static final int MCARR_I1_FIELD_NUMBER = 36;
    private java.lang.Object mCARRI1_;
    /**
     * <code>required string MCARR_I1 = 36;</code>
     */
    public boolean hasMCARRI1() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required string MCARR_I1 = 36;</code>
     */
    public java.lang.String getMCARRI1() {
      java.lang.Object ref = mCARRI1_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mCARRI1_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string MCARR_I1 = 36;</code>
     */
    public com.google.protobuf.ByteString
        getMCARRI1Bytes() {
      java.lang.Object ref = mCARRI1_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mCARRI1_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string MCARR_I2 = 37;
    public static final int MCARR_I2_FIELD_NUMBER = 37;
    private java.lang.Object mCARRI2_;
    /**
     * <code>required string MCARR_I2 = 37;</code>
     */
    public boolean hasMCARRI2() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required string MCARR_I2 = 37;</code>
     */
    public java.lang.String getMCARRI2() {
      java.lang.Object ref = mCARRI2_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mCARRI2_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string MCARR_I2 = 37;</code>
     */
    public com.google.protobuf.ByteString
        getMCARRI2Bytes() {
      java.lang.Object ref = mCARRI2_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mCARRI2_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string MCARR_ID = 38;
    public static final int MCARR_ID_FIELD_NUMBER = 38;
    private java.lang.Object mCARRID_;
    /**
     * <code>required string MCARR_ID = 38;</code>
     */
    public boolean hasMCARRID() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required string MCARR_ID = 38;</code>
     */
    public java.lang.String getMCARRID() {
      java.lang.Object ref = mCARRID_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          mCARRID_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string MCARR_ID = 38;</code>
     */
    public com.google.protobuf.ByteString
        getMCARRIDBytes() {
      java.lang.Object ref = mCARRID_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mCARRID_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required int32 GVWR = 39;
    public static final int GVWR_FIELD_NUMBER = 39;
    private int gVWR_;
    /**
     * <code>required int32 GVWR = 39;</code>
     */
    public boolean hasGVWR() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required int32 GVWR = 39;</code>
     */
    public int getGVWR() {
      return gVWR_;
    }

    // required int32 V_CONFIG = 40;
    public static final int V_CONFIG_FIELD_NUMBER = 40;
    private int vCONFIG_;
    /**
     * <code>required int32 V_CONFIG = 40;</code>
     */
    public boolean hasVCONFIG() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required int32 V_CONFIG = 40;</code>
     */
    public int getVCONFIG() {
      return vCONFIG_;
    }

    // required int32 CARGO_BT = 41;
    public static final int CARGO_BT_FIELD_NUMBER = 41;
    private int cARGOBT_;
    /**
     * <code>required int32 CARGO_BT = 41;</code>
     */
    public boolean hasCARGOBT() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required int32 CARGO_BT = 41;</code>
     */
    public int getCARGOBT() {
      return cARGOBT_;
    }

    // required int32 HAZ_INV = 42;
    public static final int HAZ_INV_FIELD_NUMBER = 42;
    private int hAZINV_;
    /**
     * <code>required int32 HAZ_INV = 42;</code>
     */
    public boolean hasHAZINV() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required int32 HAZ_INV = 42;</code>
     */
    public int getHAZINV() {
      return hAZINV_;
    }

    // required int32 HAZ_PLAC = 43;
    public static final int HAZ_PLAC_FIELD_NUMBER = 43;
    private int hAZPLAC_;
    /**
     * <code>required int32 HAZ_PLAC = 43;</code>
     */
    public boolean hasHAZPLAC() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required int32 HAZ_PLAC = 43;</code>
     */
    public int getHAZPLAC() {
      return hAZPLAC_;
    }

    // required int32 HAZ_ID = 44;
    public static final int HAZ_ID_FIELD_NUMBER = 44;
    private int hAZID_;
    /**
     * <code>required int32 HAZ_ID = 44;</code>
     */
    public boolean hasHAZID() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required int32 HAZ_ID = 44;</code>
     */
    public int getHAZID() {
      return hAZID_;
    }

    // required int32 HAZ_CNO = 45;
    public static final int HAZ_CNO_FIELD_NUMBER = 45;
    private int hAZCNO_;
    /**
     * <code>required int32 HAZ_CNO = 45;</code>
     */
    public boolean hasHAZCNO() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required int32 HAZ_CNO = 45;</code>
     */
    public int getHAZCNO() {
      return hAZCNO_;
    }

    // required int32 HAZ_REL = 46;
    public static final int HAZ_REL_FIELD_NUMBER = 46;
    private int hAZREL_;
    /**
     * <code>required int32 HAZ_REL = 46;</code>
     */
    public boolean hasHAZREL() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required int32 HAZ_REL = 46;</code>
     */
    public int getHAZREL() {
      return hAZREL_;
    }

    // required int32 BUS_USE = 47;
    public static final int BUS_USE_FIELD_NUMBER = 47;
    private int bUSUSE_;
    /**
     * <code>required int32 BUS_USE = 47;</code>
     */
    public boolean hasBUSUSE() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>required int32 BUS_USE = 47;</code>
     */
    public int getBUSUSE() {
      return bUSUSE_;
    }

    // required int32 SPEC_USE = 48;
    public static final int SPEC_USE_FIELD_NUMBER = 48;
    private int sPECUSE_;
    /**
     * <code>required int32 SPEC_USE = 48;</code>
     */
    public boolean hasSPECUSE() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>required int32 SPEC_USE = 48;</code>
     */
    public int getSPECUSE() {
      return sPECUSE_;
    }

    // required int32 EMER_USE = 49;
    public static final int EMER_USE_FIELD_NUMBER = 49;
    private int eMERUSE_;
    /**
     * <code>required int32 EMER_USE = 49;</code>
     */
    public boolean hasEMERUSE() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>required int32 EMER_USE = 49;</code>
     */
    public int getEMERUSE() {
      return eMERUSE_;
    }

    // required int32 TRAV_SP = 50;
    public static final int TRAV_SP_FIELD_NUMBER = 50;
    private int tRAVSP_;
    /**
     * <code>required int32 TRAV_SP = 50;</code>
     */
    public boolean hasTRAVSP() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>required int32 TRAV_SP = 50;</code>
     */
    public int getTRAVSP() {
      return tRAVSP_;
    }

    // required int32 UNDERIDE = 51;
    public static final int UNDERIDE_FIELD_NUMBER = 51;
    private int uNDERIDE_;
    /**
     * <code>required int32 UNDERIDE = 51;</code>
     */
    public boolean hasUNDERIDE() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>required int32 UNDERIDE = 51;</code>
     */
    public int getUNDERIDE() {
      return uNDERIDE_;
    }

    // required int32 ROLLOVER = 52;
    public static final int ROLLOVER_FIELD_NUMBER = 52;
    private int rOLLOVER_;
    /**
     * <code>required int32 ROLLOVER = 52;</code>
     */
    public boolean hasROLLOVER() {
      return ((bitField1_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>required int32 ROLLOVER = 52;</code>
     */
    public int getROLLOVER() {
      return rOLLOVER_;
    }

    // required int32 ROLINLOC = 53;
    public static final int ROLINLOC_FIELD_NUMBER = 53;
    private int rOLINLOC_;
    /**
     * <code>required int32 ROLINLOC = 53;</code>
     */
    public boolean hasROLINLOC() {
      return ((bitField1_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>required int32 ROLINLOC = 53;</code>
     */
    public int getROLINLOC() {
      return rOLINLOC_;
    }

    // required int32 IMPACT1 = 54;
    public static final int IMPACT1_FIELD_NUMBER = 54;
    private int iMPACT1_;
    /**
     * <code>required int32 IMPACT1 = 54;</code>
     */
    public boolean hasIMPACT1() {
      return ((bitField1_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>required int32 IMPACT1 = 54;</code>
     */
    public int getIMPACT1() {
      return iMPACT1_;
    }

    // required int32 DEFORMED = 55;
    public static final int DEFORMED_FIELD_NUMBER = 55;
    private int dEFORMED_;
    /**
     * <code>required int32 DEFORMED = 55;</code>
     */
    public boolean hasDEFORMED() {
      return ((bitField1_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>required int32 DEFORMED = 55;</code>
     */
    public int getDEFORMED() {
      return dEFORMED_;
    }

    // required int32 TOWED = 56;
    public static final int TOWED_FIELD_NUMBER = 56;
    private int tOWED_;
    /**
     * <code>required int32 TOWED = 56;</code>
     */
    public boolean hasTOWED() {
      return ((bitField1_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>required int32 TOWED = 56;</code>
     */
    public int getTOWED() {
      return tOWED_;
    }

    // required int32 M_HARM = 57;
    public static final int M_HARM_FIELD_NUMBER = 57;
    private int mHARM_;
    /**
     * <code>required int32 M_HARM = 57;</code>
     */
    public boolean hasMHARM() {
      return ((bitField1_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>required int32 M_HARM = 57;</code>
     */
    public int getMHARM() {
      return mHARM_;
    }

    // required int32 VEH_SC1 = 58;
    public static final int VEH_SC1_FIELD_NUMBER = 58;
    private int vEHSC1_;
    /**
     * <code>required int32 VEH_SC1 = 58;</code>
     */
    public boolean hasVEHSC1() {
      return ((bitField1_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>required int32 VEH_SC1 = 58;</code>
     */
    public int getVEHSC1() {
      return vEHSC1_;
    }

    // required int32 VEH_SC2 = 59;
    public static final int VEH_SC2_FIELD_NUMBER = 59;
    private int vEHSC2_;
    /**
     * <code>required int32 VEH_SC2 = 59;</code>
     */
    public boolean hasVEHSC2() {
      return ((bitField1_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>required int32 VEH_SC2 = 59;</code>
     */
    public int getVEHSC2() {
      return vEHSC2_;
    }

    // required int32 FIRE_EXP = 60;
    public static final int FIRE_EXP_FIELD_NUMBER = 60;
    private int fIREEXP_;
    /**
     * <code>required int32 FIRE_EXP = 60;</code>
     */
    public boolean hasFIREEXP() {
      return ((bitField1_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>required int32 FIRE_EXP = 60;</code>
     */
    public int getFIREEXP() {
      return fIREEXP_;
    }

    // required int32 DR_PRES = 61;
    public static final int DR_PRES_FIELD_NUMBER = 61;
    private int dRPRES_;
    /**
     * <code>required int32 DR_PRES = 61;</code>
     */
    public boolean hasDRPRES() {
      return ((bitField1_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>required int32 DR_PRES = 61;</code>
     */
    public int getDRPRES() {
      return dRPRES_;
    }

    // required int32 L_STATE = 62;
    public static final int L_STATE_FIELD_NUMBER = 62;
    private int lSTATE_;
    /**
     * <code>required int32 L_STATE = 62;</code>
     */
    public boolean hasLSTATE() {
      return ((bitField1_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>required int32 L_STATE = 62;</code>
     */
    public int getLSTATE() {
      return lSTATE_;
    }

    // required int32 DR_ZIP = 63;
    public static final int DR_ZIP_FIELD_NUMBER = 63;
    private int dRZIP_;
    /**
     * <code>required int32 DR_ZIP = 63;</code>
     */
    public boolean hasDRZIP() {
      return ((bitField1_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>required int32 DR_ZIP = 63;</code>
     */
    public int getDRZIP() {
      return dRZIP_;
    }

    // required int32 L_STATUS = 64;
    public static final int L_STATUS_FIELD_NUMBER = 64;
    private int lSTATUS_;
    /**
     * <code>required int32 L_STATUS = 64;</code>
     */
    public boolean hasLSTATUS() {
      return ((bitField1_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>required int32 L_STATUS = 64;</code>
     */
    public int getLSTATUS() {
      return lSTATUS_;
    }

    // required int32 L_TYPE = 65;
    public static final int L_TYPE_FIELD_NUMBER = 65;
    private int lTYPE_;
    /**
     * <code>required int32 L_TYPE = 65;</code>
     */
    public boolean hasLTYPE() {
      return ((bitField2_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 L_TYPE = 65;</code>
     */
    public int getLTYPE() {
      return lTYPE_;
    }

    // required int32 CDL_STAT = 66;
    public static final int CDL_STAT_FIELD_NUMBER = 66;
    private int cDLSTAT_;
    /**
     * <code>required int32 CDL_STAT = 66;</code>
     */
    public boolean hasCDLSTAT() {
      return ((bitField2_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 CDL_STAT = 66;</code>
     */
    public int getCDLSTAT() {
      return cDLSTAT_;
    }

    // required int32 L_ENDORS = 67;
    public static final int L_ENDORS_FIELD_NUMBER = 67;
    private int lENDORS_;
    /**
     * <code>required int32 L_ENDORS = 67;</code>
     */
    public boolean hasLENDORS() {
      return ((bitField2_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 L_ENDORS = 67;</code>
     */
    public int getLENDORS() {
      return lENDORS_;
    }

    // required int32 L_COMPL = 68;
    public static final int L_COMPL_FIELD_NUMBER = 68;
    private int lCOMPL_;
    /**
     * <code>required int32 L_COMPL = 68;</code>
     */
    public boolean hasLCOMPL() {
      return ((bitField2_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 L_COMPL = 68;</code>
     */
    public int getLCOMPL() {
      return lCOMPL_;
    }

    // required int32 L_RESTRI = 69;
    public static final int L_RESTRI_FIELD_NUMBER = 69;
    private int lRESTRI_;
    /**
     * <code>required int32 L_RESTRI = 69;</code>
     */
    public boolean hasLRESTRI() {
      return ((bitField2_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 L_RESTRI = 69;</code>
     */
    public int getLRESTRI() {
      return lRESTRI_;
    }

    // required int32 DR_HGT = 70;
    public static final int DR_HGT_FIELD_NUMBER = 70;
    private int dRHGT_;
    /**
     * <code>required int32 DR_HGT = 70;</code>
     */
    public boolean hasDRHGT() {
      return ((bitField2_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 DR_HGT = 70;</code>
     */
    public int getDRHGT() {
      return dRHGT_;
    }

    // required int32 DR_WGT = 71;
    public static final int DR_WGT_FIELD_NUMBER = 71;
    private int dRWGT_;
    /**
     * <code>required int32 DR_WGT = 71;</code>
     */
    public boolean hasDRWGT() {
      return ((bitField2_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required int32 DR_WGT = 71;</code>
     */
    public int getDRWGT() {
      return dRWGT_;
    }

    // required int32 PREV_ACC = 72;
    public static final int PREV_ACC_FIELD_NUMBER = 72;
    private int pREVACC_;
    /**
     * <code>required int32 PREV_ACC = 72;</code>
     */
    public boolean hasPREVACC() {
      return ((bitField2_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required int32 PREV_ACC = 72;</code>
     */
    public int getPREVACC() {
      return pREVACC_;
    }

    // required int32 PREV_SUS = 73;
    public static final int PREV_SUS_FIELD_NUMBER = 73;
    private int pREVSUS_;
    /**
     * <code>required int32 PREV_SUS = 73;</code>
     */
    public boolean hasPREVSUS() {
      return ((bitField2_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required int32 PREV_SUS = 73;</code>
     */
    public int getPREVSUS() {
      return pREVSUS_;
    }

    // required int32 PREV_DWI = 74;
    public static final int PREV_DWI_FIELD_NUMBER = 74;
    private int pREVDWI_;
    /**
     * <code>required int32 PREV_DWI = 74;</code>
     */
    public boolean hasPREVDWI() {
      return ((bitField2_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required int32 PREV_DWI = 74;</code>
     */
    public int getPREVDWI() {
      return pREVDWI_;
    }

    // required int32 PREV_SPD = 75;
    public static final int PREV_SPD_FIELD_NUMBER = 75;
    private int pREVSPD_;
    /**
     * <code>required int32 PREV_SPD = 75;</code>
     */
    public boolean hasPREVSPD() {
      return ((bitField2_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required int32 PREV_SPD = 75;</code>
     */
    public int getPREVSPD() {
      return pREVSPD_;
    }

    // required int32 PREV_OTH = 76;
    public static final int PREV_OTH_FIELD_NUMBER = 76;
    private int pREVOTH_;
    /**
     * <code>required int32 PREV_OTH = 76;</code>
     */
    public boolean hasPREVOTH() {
      return ((bitField2_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required int32 PREV_OTH = 76;</code>
     */
    public int getPREVOTH() {
      return pREVOTH_;
    }

    // required int32 FIRST_MO = 77;
    public static final int FIRST_MO_FIELD_NUMBER = 77;
    private int fIRSTMO_;
    /**
     * <code>required int32 FIRST_MO = 77;</code>
     */
    public boolean hasFIRSTMO() {
      return ((bitField2_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required int32 FIRST_MO = 77;</code>
     */
    public int getFIRSTMO() {
      return fIRSTMO_;
    }

    // required int32 FIRST_YR = 78;
    public static final int FIRST_YR_FIELD_NUMBER = 78;
    private int fIRSTYR_;
    /**
     * <code>required int32 FIRST_YR = 78;</code>
     */
    public boolean hasFIRSTYR() {
      return ((bitField2_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required int32 FIRST_YR = 78;</code>
     */
    public int getFIRSTYR() {
      return fIRSTYR_;
    }

    // required int32 LAST_MO = 79;
    public static final int LAST_MO_FIELD_NUMBER = 79;
    private int lASTMO_;
    /**
     * <code>required int32 LAST_MO = 79;</code>
     */
    public boolean hasLASTMO() {
      return ((bitField2_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>required int32 LAST_MO = 79;</code>
     */
    public int getLASTMO() {
      return lASTMO_;
    }

    // required int32 LAST_YR = 80;
    public static final int LAST_YR_FIELD_NUMBER = 80;
    private int lASTYR_;
    /**
     * <code>required int32 LAST_YR = 80;</code>
     */
    public boolean hasLASTYR() {
      return ((bitField2_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>required int32 LAST_YR = 80;</code>
     */
    public int getLASTYR() {
      return lASTYR_;
    }

    // required int32 SPEEDREL = 81;
    public static final int SPEEDREL_FIELD_NUMBER = 81;
    private int sPEEDREL_;
    /**
     * <code>required int32 SPEEDREL = 81;</code>
     */
    public boolean hasSPEEDREL() {
      return ((bitField2_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>required int32 SPEEDREL = 81;</code>
     */
    public int getSPEEDREL() {
      return sPEEDREL_;
    }

    // required int32 DR_SF1 = 82;
    public static final int DR_SF1_FIELD_NUMBER = 82;
    private int dRSF1_;
    /**
     * <code>required int32 DR_SF1 = 82;</code>
     */
    public boolean hasDRSF1() {
      return ((bitField2_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>required int32 DR_SF1 = 82;</code>
     */
    public int getDRSF1() {
      return dRSF1_;
    }

    // optional int32 DR_SF2 = 83;
    public static final int DR_SF2_FIELD_NUMBER = 83;
    private int dRSF2_;
    /**
     * <code>optional int32 DR_SF2 = 83;</code>
     */
    public boolean hasDRSF2() {
      return ((bitField2_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional int32 DR_SF2 = 83;</code>
     */
    public int getDRSF2() {
      return dRSF2_;
    }

    // optional int32 DR_SF3 = 84;
    public static final int DR_SF3_FIELD_NUMBER = 84;
    private int dRSF3_;
    /**
     * <code>optional int32 DR_SF3 = 84;</code>
     */
    public boolean hasDRSF3() {
      return ((bitField2_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional int32 DR_SF3 = 84;</code>
     */
    public int getDRSF3() {
      return dRSF3_;
    }

    // optional int32 DR_SF4 = 85;
    public static final int DR_SF4_FIELD_NUMBER = 85;
    private int dRSF4_;
    /**
     * <code>optional int32 DR_SF4 = 85;</code>
     */
    public boolean hasDRSF4() {
      return ((bitField2_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional int32 DR_SF4 = 85;</code>
     */
    public int getDRSF4() {
      return dRSF4_;
    }

    // required int32 VTRAFWAY = 86;
    public static final int VTRAFWAY_FIELD_NUMBER = 86;
    private int vTRAFWAY_;
    /**
     * <code>required int32 VTRAFWAY = 86;</code>
     */
    public boolean hasVTRAFWAY() {
      return ((bitField2_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>required int32 VTRAFWAY = 86;</code>
     */
    public int getVTRAFWAY() {
      return vTRAFWAY_;
    }

    // required int32 VNUM_LAN = 87;
    public static final int VNUM_LAN_FIELD_NUMBER = 87;
    private int vNUMLAN_;
    /**
     * <code>required int32 VNUM_LAN = 87;</code>
     */
    public boolean hasVNUMLAN() {
      return ((bitField2_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>required int32 VNUM_LAN = 87;</code>
     */
    public int getVNUMLAN() {
      return vNUMLAN_;
    }

    // required int32 VSPD_LIM = 88;
    public static final int VSPD_LIM_FIELD_NUMBER = 88;
    private int vSPDLIM_;
    /**
     * <code>required int32 VSPD_LIM = 88;</code>
     */
    public boolean hasVSPDLIM() {
      return ((bitField2_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>required int32 VSPD_LIM = 88;</code>
     */
    public int getVSPDLIM() {
      return vSPDLIM_;
    }

    // required int32 VALIGN = 89;
    public static final int VALIGN_FIELD_NUMBER = 89;
    private int vALIGN_;
    /**
     * <code>required int32 VALIGN = 89;</code>
     */
    public boolean hasVALIGN() {
      return ((bitField2_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>required int32 VALIGN = 89;</code>
     */
    public int getVALIGN() {
      return vALIGN_;
    }

    // required int32 VPROFILE = 90;
    public static final int VPROFILE_FIELD_NUMBER = 90;
    private int vPROFILE_;
    /**
     * <code>required int32 VPROFILE = 90;</code>
     */
    public boolean hasVPROFILE() {
      return ((bitField2_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>required int32 VPROFILE = 90;</code>
     */
    public int getVPROFILE() {
      return vPROFILE_;
    }

    // required int32 VPAVETYP = 91;
    public static final int VPAVETYP_FIELD_NUMBER = 91;
    private int vPAVETYP_;
    /**
     * <code>required int32 VPAVETYP = 91;</code>
     */
    public boolean hasVPAVETYP() {
      return ((bitField2_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>required int32 VPAVETYP = 91;</code>
     */
    public int getVPAVETYP() {
      return vPAVETYP_;
    }

    // required int32 VSURCOND = 92;
    public static final int VSURCOND_FIELD_NUMBER = 92;
    private int vSURCOND_;
    /**
     * <code>required int32 VSURCOND = 92;</code>
     */
    public boolean hasVSURCOND() {
      return ((bitField2_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>required int32 VSURCOND = 92;</code>
     */
    public int getVSURCOND() {
      return vSURCOND_;
    }

    // required int32 VTRAFCON = 93;
    public static final int VTRAFCON_FIELD_NUMBER = 93;
    private int vTRAFCON_;
    /**
     * <code>required int32 VTRAFCON = 93;</code>
     */
    public boolean hasVTRAFCON() {
      return ((bitField2_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>required int32 VTRAFCON = 93;</code>
     */
    public int getVTRAFCON() {
      return vTRAFCON_;
    }

    // required int32 VTCONT_F = 94;
    public static final int VTCONT_F_FIELD_NUMBER = 94;
    private int vTCONTF_;
    /**
     * <code>required int32 VTCONT_F = 94;</code>
     */
    public boolean hasVTCONTF() {
      return ((bitField2_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>required int32 VTCONT_F = 94;</code>
     */
    public int getVTCONTF() {
      return vTCONTF_;
    }

    // required int32 P_CRASH1 = 95;
    public static final int P_CRASH1_FIELD_NUMBER = 95;
    private int pCRASH1_;
    /**
     * <code>required int32 P_CRASH1 = 95;</code>
     */
    public boolean hasPCRASH1() {
      return ((bitField2_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>required int32 P_CRASH1 = 95;</code>
     */
    public int getPCRASH1() {
      return pCRASH1_;
    }

    // required int32 P_CRASH2 = 96;
    public static final int P_CRASH2_FIELD_NUMBER = 96;
    private int pCRASH2_;
    /**
     * <code>required int32 P_CRASH2 = 96;</code>
     */
    public boolean hasPCRASH2() {
      return ((bitField2_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>required int32 P_CRASH2 = 96;</code>
     */
    public int getPCRASH2() {
      return pCRASH2_;
    }

    // required int32 P_CRASH3 = 97;
    public static final int P_CRASH3_FIELD_NUMBER = 97;
    private int pCRASH3_;
    /**
     * <code>required int32 P_CRASH3 = 97;</code>
     */
    public boolean hasPCRASH3() {
      return ((bitField3_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 P_CRASH3 = 97;</code>
     */
    public int getPCRASH3() {
      return pCRASH3_;
    }

    // required int32 PCRASH4 = 98;
    public static final int PCRASH4_FIELD_NUMBER = 98;
    private int pCRASH4_;
    /**
     * <code>required int32 PCRASH4 = 98;</code>
     */
    public boolean hasPCRASH4() {
      return ((bitField3_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 PCRASH4 = 98;</code>
     */
    public int getPCRASH4() {
      return pCRASH4_;
    }

    // required int32 PCRASH5 = 99;
    public static final int PCRASH5_FIELD_NUMBER = 99;
    private int pCRASH5_;
    /**
     * <code>required int32 PCRASH5 = 99;</code>
     */
    public boolean hasPCRASH5() {
      return ((bitField3_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 PCRASH5 = 99;</code>
     */
    public int getPCRASH5() {
      return pCRASH5_;
    }

    // required int32 ACC_TYPE = 100;
    public static final int ACC_TYPE_FIELD_NUMBER = 100;
    private int aCCTYPE_;
    /**
     * <code>required int32 ACC_TYPE = 100;</code>
     */
    public boolean hasACCTYPE() {
      return ((bitField3_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 ACC_TYPE = 100;</code>
     */
    public int getACCTYPE() {
      return aCCTYPE_;
    }

    // required int32 DEATHS = 101;
    public static final int DEATHS_FIELD_NUMBER = 101;
    private int dEATHS_;
    /**
     * <code>required int32 DEATHS = 101;</code>
     */
    public boolean hasDEATHS() {
      return ((bitField3_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 DEATHS = 101;</code>
     */
    public int getDEATHS() {
      return dEATHS_;
    }

    // required int32 DR_DRINK = 102;
    public static final int DR_DRINK_FIELD_NUMBER = 102;
    private int dRDRINK_;
    /**
     * <code>required int32 DR_DRINK = 102;</code>
     */
    public boolean hasDRDRINK() {
      return ((bitField3_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 DR_DRINK = 102;</code>
     */
    public int getDRDRINK() {
      return dRDRINK_;
    }

    private void initFields() {
      state_ = boa.types.Transport.STATE.Alabama;
      sTCASE_ = 0;
      vEHNO_ = 0;
      vEFORMS_ = 0;
      nUMOCCS_ = 0;
      dAY_ = 0;
      mONTH_ = 0;
      hOUR_ = 0;
      mINUTE_ = 0;
      hARMEV_ = 0;
      mANCOLL_ = 0;
      uNITTYPE_ = 0;
      hITRUN_ = 0;
      rEGSTAT_ = 0;
      oWNER_ = 0;
      mAKE_ = 0;
      mODEL_ = 0;
      mAKMOD_ = 0;
      bODYTYP_ = 0;
      mODYEAR_ = 0;
      vIN_ = "";
      vIN1_ = "";
      vIN2_ = "";
      vIN3_ = "";
      vIN4_ = "";
      vIN5_ = "";
      vIN6_ = "";
      vIN7_ = "";
      vIN8_ = "";
      vIN9_ = "";
      vIN10_ = "";
      vIN11_ = "";
      vIN12_ = "";
      tOWVEH_ = 0;
      jKNIFE_ = 0;
      mCARRI1_ = "";
      mCARRI2_ = "";
      mCARRID_ = "";
      gVWR_ = 0;
      vCONFIG_ = 0;
      cARGOBT_ = 0;
      hAZINV_ = 0;
      hAZPLAC_ = 0;
      hAZID_ = 0;
      hAZCNO_ = 0;
      hAZREL_ = 0;
      bUSUSE_ = 0;
      sPECUSE_ = 0;
      eMERUSE_ = 0;
      tRAVSP_ = 0;
      uNDERIDE_ = 0;
      rOLLOVER_ = 0;
      rOLINLOC_ = 0;
      iMPACT1_ = 0;
      dEFORMED_ = 0;
      tOWED_ = 0;
      mHARM_ = 0;
      vEHSC1_ = 0;
      vEHSC2_ = 0;
      fIREEXP_ = 0;
      dRPRES_ = 0;
      lSTATE_ = 0;
      dRZIP_ = 0;
      lSTATUS_ = 0;
      lTYPE_ = 0;
      cDLSTAT_ = 0;
      lENDORS_ = 0;
      lCOMPL_ = 0;
      lRESTRI_ = 0;
      dRHGT_ = 0;
      dRWGT_ = 0;
      pREVACC_ = 0;
      pREVSUS_ = 0;
      pREVDWI_ = 0;
      pREVSPD_ = 0;
      pREVOTH_ = 0;
      fIRSTMO_ = 0;
      fIRSTYR_ = 0;
      lASTMO_ = 0;
      lASTYR_ = 0;
      sPEEDREL_ = 0;
      dRSF1_ = 0;
      dRSF2_ = 0;
      dRSF3_ = 0;
      dRSF4_ = 0;
      vTRAFWAY_ = 0;
      vNUMLAN_ = 0;
      vSPDLIM_ = 0;
      vALIGN_ = 0;
      vPROFILE_ = 0;
      vPAVETYP_ = 0;
      vSURCOND_ = 0;
      vTRAFCON_ = 0;
      vTCONTF_ = 0;
      pCRASH1_ = 0;
      pCRASH2_ = 0;
      pCRASH3_ = 0;
      pCRASH4_ = 0;
      pCRASH5_ = 0;
      aCCTYPE_ = 0;
      dEATHS_ = 0;
      dRDRINK_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSTCASE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVEHNO()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVEFORMS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNUMOCCS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDAY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMONTH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHOUR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMINUTE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHARMEV()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMANCOLL()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUNITTYPE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHITRUN()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasREGSTAT()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOWNER()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMAKE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMODEL()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMAKMOD()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBODYTYP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMODYEAR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVIN()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVIN1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVIN2()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVIN3()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVIN4()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVIN5()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVIN6()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVIN7()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVIN8()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVIN9()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVIN10()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVIN11()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVIN12()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTOWVEH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasJKNIFE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMCARRI1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMCARRI2()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMCARRID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGVWR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVCONFIG()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCARGOBT()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHAZINV()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHAZPLAC()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHAZID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHAZCNO()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHAZREL()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBUSUSE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSPECUSE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEMERUSE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTRAVSP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUNDERIDE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasROLLOVER()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasROLINLOC()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIMPACT1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDEFORMED()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTOWED()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMHARM()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVEHSC1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVEHSC2()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFIREEXP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDRPRES()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLSTATE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDRZIP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLSTATUS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLTYPE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCDLSTAT()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLENDORS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLCOMPL()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLRESTRI()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDRHGT()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDRWGT()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPREVACC()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPREVSUS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPREVDWI()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPREVSPD()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPREVOTH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFIRSTMO()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFIRSTYR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLASTMO()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLASTYR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSPEEDREL()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDRSF1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVTRAFWAY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVNUMLAN()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVSPDLIM()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVALIGN()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVPROFILE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVPAVETYP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVSURCOND()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVTRAFCON()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVTCONTF()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPCRASH1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPCRASH2()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPCRASH3()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPCRASH4()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPCRASH5()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasACCTYPE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDEATHS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDRDRINK()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, state_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, sTCASE_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, vEHNO_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, vEFORMS_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, nUMOCCS_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, dAY_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, mONTH_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, hOUR_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, mINUTE_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, hARMEV_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, mANCOLL_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(12, uNITTYPE_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, hITRUN_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, rEGSTAT_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, oWNER_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(16, mAKE_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(17, mODEL_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(18, mAKMOD_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(19, bODYTYP_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(20, mODYEAR_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeBytes(21, getVINBytes());
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeBytes(22, getVIN1Bytes());
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeBytes(23, getVIN2Bytes());
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeBytes(24, getVIN3Bytes());
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeBytes(25, getVIN4Bytes());
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeBytes(26, getVIN5Bytes());
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeBytes(27, getVIN6Bytes());
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeBytes(28, getVIN7Bytes());
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeBytes(29, getVIN8Bytes());
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeBytes(30, getVIN9Bytes());
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeBytes(31, getVIN10Bytes());
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeBytes(32, getVIN11Bytes());
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(33, getVIN12Bytes());
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(34, tOWVEH_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(35, jKNIFE_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(36, getMCARRI1Bytes());
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(37, getMCARRI2Bytes());
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(38, getMCARRIDBytes());
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(39, gVWR_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(40, vCONFIG_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(41, cARGOBT_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(42, hAZINV_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(43, hAZPLAC_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(44, hAZID_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(45, hAZCNO_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(46, hAZREL_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(47, bUSUSE_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(48, sPECUSE_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(49, eMERUSE_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(50, tRAVSP_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(51, uNDERIDE_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(52, rOLLOVER_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        output.writeInt32(53, rOLINLOC_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        output.writeInt32(54, iMPACT1_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        output.writeInt32(55, dEFORMED_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        output.writeInt32(56, tOWED_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        output.writeInt32(57, mHARM_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        output.writeInt32(58, vEHSC1_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        output.writeInt32(59, vEHSC2_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        output.writeInt32(60, fIREEXP_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        output.writeInt32(61, dRPRES_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        output.writeInt32(62, lSTATE_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        output.writeInt32(63, dRZIP_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        output.writeInt32(64, lSTATUS_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(65, lTYPE_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(66, cDLSTAT_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(67, lENDORS_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(68, lCOMPL_);
      }
      if (((bitField2_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(69, lRESTRI_);
      }
      if (((bitField2_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(70, dRHGT_);
      }
      if (((bitField2_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(71, dRWGT_);
      }
      if (((bitField2_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(72, pREVACC_);
      }
      if (((bitField2_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(73, pREVSUS_);
      }
      if (((bitField2_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(74, pREVDWI_);
      }
      if (((bitField2_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(75, pREVSPD_);
      }
      if (((bitField2_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(76, pREVOTH_);
      }
      if (((bitField2_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(77, fIRSTMO_);
      }
      if (((bitField2_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(78, fIRSTYR_);
      }
      if (((bitField2_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(79, lASTMO_);
      }
      if (((bitField2_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(80, lASTYR_);
      }
      if (((bitField2_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(81, sPEEDREL_);
      }
      if (((bitField2_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(82, dRSF1_);
      }
      if (((bitField2_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(83, dRSF2_);
      }
      if (((bitField2_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(84, dRSF3_);
      }
      if (((bitField2_ & 0x00100000) == 0x00100000)) {
        output.writeInt32(85, dRSF4_);
      }
      if (((bitField2_ & 0x00200000) == 0x00200000)) {
        output.writeInt32(86, vTRAFWAY_);
      }
      if (((bitField2_ & 0x00400000) == 0x00400000)) {
        output.writeInt32(87, vNUMLAN_);
      }
      if (((bitField2_ & 0x00800000) == 0x00800000)) {
        output.writeInt32(88, vSPDLIM_);
      }
      if (((bitField2_ & 0x01000000) == 0x01000000)) {
        output.writeInt32(89, vALIGN_);
      }
      if (((bitField2_ & 0x02000000) == 0x02000000)) {
        output.writeInt32(90, vPROFILE_);
      }
      if (((bitField2_ & 0x04000000) == 0x04000000)) {
        output.writeInt32(91, vPAVETYP_);
      }
      if (((bitField2_ & 0x08000000) == 0x08000000)) {
        output.writeInt32(92, vSURCOND_);
      }
      if (((bitField2_ & 0x10000000) == 0x10000000)) {
        output.writeInt32(93, vTRAFCON_);
      }
      if (((bitField2_ & 0x20000000) == 0x20000000)) {
        output.writeInt32(94, vTCONTF_);
      }
      if (((bitField2_ & 0x40000000) == 0x40000000)) {
        output.writeInt32(95, pCRASH1_);
      }
      if (((bitField2_ & 0x80000000) == 0x80000000)) {
        output.writeInt32(96, pCRASH2_);
      }
      if (((bitField3_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(97, pCRASH3_);
      }
      if (((bitField3_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(98, pCRASH4_);
      }
      if (((bitField3_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(99, pCRASH5_);
      }
      if (((bitField3_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(100, aCCTYPE_);
      }
      if (((bitField3_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(101, dEATHS_);
      }
      if (((bitField3_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(102, dRDRINK_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, sTCASE_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, vEHNO_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, vEFORMS_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, nUMOCCS_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, dAY_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, mONTH_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, hOUR_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, mINUTE_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, hARMEV_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, mANCOLL_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, uNITTYPE_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, hITRUN_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, rEGSTAT_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, oWNER_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, mAKE_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, mODEL_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, mAKMOD_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, bODYTYP_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, mODYEAR_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(21, getVINBytes());
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(22, getVIN1Bytes());
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(23, getVIN2Bytes());
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(24, getVIN3Bytes());
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(25, getVIN4Bytes());
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(26, getVIN5Bytes());
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(27, getVIN6Bytes());
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(28, getVIN7Bytes());
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(29, getVIN8Bytes());
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(30, getVIN9Bytes());
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(31, getVIN10Bytes());
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(32, getVIN11Bytes());
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(33, getVIN12Bytes());
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(34, tOWVEH_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(35, jKNIFE_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(36, getMCARRI1Bytes());
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(37, getMCARRI2Bytes());
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(38, getMCARRIDBytes());
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(39, gVWR_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(40, vCONFIG_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(41, cARGOBT_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(42, hAZINV_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(43, hAZPLAC_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(44, hAZID_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(45, hAZCNO_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(46, hAZREL_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(47, bUSUSE_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(48, sPECUSE_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(49, eMERUSE_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(50, tRAVSP_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(51, uNDERIDE_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(52, rOLLOVER_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(53, rOLINLOC_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(54, iMPACT1_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(55, dEFORMED_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(56, tOWED_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(57, mHARM_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(58, vEHSC1_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(59, vEHSC2_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(60, fIREEXP_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(61, dRPRES_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(62, lSTATE_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(63, dRZIP_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(64, lSTATUS_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(65, lTYPE_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(66, cDLSTAT_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(67, lENDORS_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(68, lCOMPL_);
      }
      if (((bitField2_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(69, lRESTRI_);
      }
      if (((bitField2_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(70, dRHGT_);
      }
      if (((bitField2_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(71, dRWGT_);
      }
      if (((bitField2_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(72, pREVACC_);
      }
      if (((bitField2_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(73, pREVSUS_);
      }
      if (((bitField2_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(74, pREVDWI_);
      }
      if (((bitField2_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(75, pREVSPD_);
      }
      if (((bitField2_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(76, pREVOTH_);
      }
      if (((bitField2_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(77, fIRSTMO_);
      }
      if (((bitField2_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(78, fIRSTYR_);
      }
      if (((bitField2_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(79, lASTMO_);
      }
      if (((bitField2_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(80, lASTYR_);
      }
      if (((bitField2_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(81, sPEEDREL_);
      }
      if (((bitField2_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(82, dRSF1_);
      }
      if (((bitField2_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(83, dRSF2_);
      }
      if (((bitField2_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(84, dRSF3_);
      }
      if (((bitField2_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(85, dRSF4_);
      }
      if (((bitField2_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(86, vTRAFWAY_);
      }
      if (((bitField2_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(87, vNUMLAN_);
      }
      if (((bitField2_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(88, vSPDLIM_);
      }
      if (((bitField2_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(89, vALIGN_);
      }
      if (((bitField2_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(90, vPROFILE_);
      }
      if (((bitField2_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(91, vPAVETYP_);
      }
      if (((bitField2_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(92, vSURCOND_);
      }
      if (((bitField2_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(93, vTRAFCON_);
      }
      if (((bitField2_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(94, vTCONTF_);
      }
      if (((bitField2_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(95, pCRASH1_);
      }
      if (((bitField2_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(96, pCRASH2_);
      }
      if (((bitField3_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(97, pCRASH3_);
      }
      if (((bitField3_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(98, pCRASH4_);
      }
      if (((bitField3_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(99, pCRASH5_);
      }
      if (((bitField3_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(100, aCCTYPE_);
      }
      if (((bitField3_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(101, dEATHS_);
      }
      if (((bitField3_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(102, dRDRINK_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static boa.types.Transport.Vehicle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boa.types.Transport.Vehicle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boa.types.Transport.Vehicle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boa.types.Transport.Vehicle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boa.types.Transport.Vehicle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boa.types.Transport.Vehicle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static boa.types.Transport.Vehicle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static boa.types.Transport.Vehicle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static boa.types.Transport.Vehicle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boa.types.Transport.Vehicle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(boa.types.Transport.Vehicle prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code boa.types.Vehicle}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements boa.types.Transport.VehicleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return boa.types.Transport.internal_static_boa_types_Vehicle_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return boa.types.Transport.internal_static_boa_types_Vehicle_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                boa.types.Transport.Vehicle.class, boa.types.Transport.Vehicle.Builder.class);
      }

      // Construct using boa.types.Transport.Vehicle.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        state_ = boa.types.Transport.STATE.Alabama;
        bitField0_ = (bitField0_ & ~0x00000001);
        sTCASE_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        vEHNO_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        vEFORMS_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        nUMOCCS_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        dAY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        mONTH_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        hOUR_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        mINUTE_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        hARMEV_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        mANCOLL_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        uNITTYPE_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        hITRUN_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        rEGSTAT_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        oWNER_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        mAKE_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        mODEL_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        mAKMOD_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        bODYTYP_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        mODYEAR_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        vIN_ = "";
        bitField0_ = (bitField0_ & ~0x00100000);
        vIN1_ = "";
        bitField0_ = (bitField0_ & ~0x00200000);
        vIN2_ = "";
        bitField0_ = (bitField0_ & ~0x00400000);
        vIN3_ = "";
        bitField0_ = (bitField0_ & ~0x00800000);
        vIN4_ = "";
        bitField0_ = (bitField0_ & ~0x01000000);
        vIN5_ = "";
        bitField0_ = (bitField0_ & ~0x02000000);
        vIN6_ = "";
        bitField0_ = (bitField0_ & ~0x04000000);
        vIN7_ = "";
        bitField0_ = (bitField0_ & ~0x08000000);
        vIN8_ = "";
        bitField0_ = (bitField0_ & ~0x10000000);
        vIN9_ = "";
        bitField0_ = (bitField0_ & ~0x20000000);
        vIN10_ = "";
        bitField0_ = (bitField0_ & ~0x40000000);
        vIN11_ = "";
        bitField0_ = (bitField0_ & ~0x80000000);
        vIN12_ = "";
        bitField1_ = (bitField1_ & ~0x00000001);
        tOWVEH_ = 0;
        bitField1_ = (bitField1_ & ~0x00000002);
        jKNIFE_ = 0;
        bitField1_ = (bitField1_ & ~0x00000004);
        mCARRI1_ = "";
        bitField1_ = (bitField1_ & ~0x00000008);
        mCARRI2_ = "";
        bitField1_ = (bitField1_ & ~0x00000010);
        mCARRID_ = "";
        bitField1_ = (bitField1_ & ~0x00000020);
        gVWR_ = 0;
        bitField1_ = (bitField1_ & ~0x00000040);
        vCONFIG_ = 0;
        bitField1_ = (bitField1_ & ~0x00000080);
        cARGOBT_ = 0;
        bitField1_ = (bitField1_ & ~0x00000100);
        hAZINV_ = 0;
        bitField1_ = (bitField1_ & ~0x00000200);
        hAZPLAC_ = 0;
        bitField1_ = (bitField1_ & ~0x00000400);
        hAZID_ = 0;
        bitField1_ = (bitField1_ & ~0x00000800);
        hAZCNO_ = 0;
        bitField1_ = (bitField1_ & ~0x00001000);
        hAZREL_ = 0;
        bitField1_ = (bitField1_ & ~0x00002000);
        bUSUSE_ = 0;
        bitField1_ = (bitField1_ & ~0x00004000);
        sPECUSE_ = 0;
        bitField1_ = (bitField1_ & ~0x00008000);
        eMERUSE_ = 0;
        bitField1_ = (bitField1_ & ~0x00010000);
        tRAVSP_ = 0;
        bitField1_ = (bitField1_ & ~0x00020000);
        uNDERIDE_ = 0;
        bitField1_ = (bitField1_ & ~0x00040000);
        rOLLOVER_ = 0;
        bitField1_ = (bitField1_ & ~0x00080000);
        rOLINLOC_ = 0;
        bitField1_ = (bitField1_ & ~0x00100000);
        iMPACT1_ = 0;
        bitField1_ = (bitField1_ & ~0x00200000);
        dEFORMED_ = 0;
        bitField1_ = (bitField1_ & ~0x00400000);
        tOWED_ = 0;
        bitField1_ = (bitField1_ & ~0x00800000);
        mHARM_ = 0;
        bitField1_ = (bitField1_ & ~0x01000000);
        vEHSC1_ = 0;
        bitField1_ = (bitField1_ & ~0x02000000);
        vEHSC2_ = 0;
        bitField1_ = (bitField1_ & ~0x04000000);
        fIREEXP_ = 0;
        bitField1_ = (bitField1_ & ~0x08000000);
        dRPRES_ = 0;
        bitField1_ = (bitField1_ & ~0x10000000);
        lSTATE_ = 0;
        bitField1_ = (bitField1_ & ~0x20000000);
        dRZIP_ = 0;
        bitField1_ = (bitField1_ & ~0x40000000);
        lSTATUS_ = 0;
        bitField1_ = (bitField1_ & ~0x80000000);
        lTYPE_ = 0;
        bitField2_ = (bitField2_ & ~0x00000001);
        cDLSTAT_ = 0;
        bitField2_ = (bitField2_ & ~0x00000002);
        lENDORS_ = 0;
        bitField2_ = (bitField2_ & ~0x00000004);
        lCOMPL_ = 0;
        bitField2_ = (bitField2_ & ~0x00000008);
        lRESTRI_ = 0;
        bitField2_ = (bitField2_ & ~0x00000010);
        dRHGT_ = 0;
        bitField2_ = (bitField2_ & ~0x00000020);
        dRWGT_ = 0;
        bitField2_ = (bitField2_ & ~0x00000040);
        pREVACC_ = 0;
        bitField2_ = (bitField2_ & ~0x00000080);
        pREVSUS_ = 0;
        bitField2_ = (bitField2_ & ~0x00000100);
        pREVDWI_ = 0;
        bitField2_ = (bitField2_ & ~0x00000200);
        pREVSPD_ = 0;
        bitField2_ = (bitField2_ & ~0x00000400);
        pREVOTH_ = 0;
        bitField2_ = (bitField2_ & ~0x00000800);
        fIRSTMO_ = 0;
        bitField2_ = (bitField2_ & ~0x00001000);
        fIRSTYR_ = 0;
        bitField2_ = (bitField2_ & ~0x00002000);
        lASTMO_ = 0;
        bitField2_ = (bitField2_ & ~0x00004000);
        lASTYR_ = 0;
        bitField2_ = (bitField2_ & ~0x00008000);
        sPEEDREL_ = 0;
        bitField2_ = (bitField2_ & ~0x00010000);
        dRSF1_ = 0;
        bitField2_ = (bitField2_ & ~0x00020000);
        dRSF2_ = 0;
        bitField2_ = (bitField2_ & ~0x00040000);
        dRSF3_ = 0;
        bitField2_ = (bitField2_ & ~0x00080000);
        dRSF4_ = 0;
        bitField2_ = (bitField2_ & ~0x00100000);
        vTRAFWAY_ = 0;
        bitField2_ = (bitField2_ & ~0x00200000);
        vNUMLAN_ = 0;
        bitField2_ = (bitField2_ & ~0x00400000);
        vSPDLIM_ = 0;
        bitField2_ = (bitField2_ & ~0x00800000);
        vALIGN_ = 0;
        bitField2_ = (bitField2_ & ~0x01000000);
        vPROFILE_ = 0;
        bitField2_ = (bitField2_ & ~0x02000000);
        vPAVETYP_ = 0;
        bitField2_ = (bitField2_ & ~0x04000000);
        vSURCOND_ = 0;
        bitField2_ = (bitField2_ & ~0x08000000);
        vTRAFCON_ = 0;
        bitField2_ = (bitField2_ & ~0x10000000);
        vTCONTF_ = 0;
        bitField2_ = (bitField2_ & ~0x20000000);
        pCRASH1_ = 0;
        bitField2_ = (bitField2_ & ~0x40000000);
        pCRASH2_ = 0;
        bitField2_ = (bitField2_ & ~0x80000000);
        pCRASH3_ = 0;
        bitField3_ = (bitField3_ & ~0x00000001);
        pCRASH4_ = 0;
        bitField3_ = (bitField3_ & ~0x00000002);
        pCRASH5_ = 0;
        bitField3_ = (bitField3_ & ~0x00000004);
        aCCTYPE_ = 0;
        bitField3_ = (bitField3_ & ~0x00000008);
        dEATHS_ = 0;
        bitField3_ = (bitField3_ & ~0x00000010);
        dRDRINK_ = 0;
        bitField3_ = (bitField3_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return boa.types.Transport.internal_static_boa_types_Vehicle_descriptor;
      }

      public boa.types.Transport.Vehicle getDefaultInstanceForType() {
        return boa.types.Transport.Vehicle.getDefaultInstance();
      }

      public boa.types.Transport.Vehicle build() {
        boa.types.Transport.Vehicle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public boa.types.Transport.Vehicle buildPartial() {
        boa.types.Transport.Vehicle result = new boa.types.Transport.Vehicle(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int from_bitField2_ = bitField2_;
        int from_bitField3_ = bitField3_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        int to_bitField2_ = 0;
        int to_bitField3_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sTCASE_ = sTCASE_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.vEHNO_ = vEHNO_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.vEFORMS_ = vEFORMS_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.nUMOCCS_ = nUMOCCS_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.dAY_ = dAY_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mONTH_ = mONTH_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.hOUR_ = hOUR_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.mINUTE_ = mINUTE_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.hARMEV_ = hARMEV_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.mANCOLL_ = mANCOLL_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.uNITTYPE_ = uNITTYPE_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.hITRUN_ = hITRUN_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.rEGSTAT_ = rEGSTAT_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.oWNER_ = oWNER_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.mAKE_ = mAKE_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.mODEL_ = mODEL_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.mAKMOD_ = mAKMOD_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.bODYTYP_ = bODYTYP_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.mODYEAR_ = mODYEAR_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.vIN_ = vIN_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.vIN1_ = vIN1_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.vIN2_ = vIN2_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.vIN3_ = vIN3_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.vIN4_ = vIN4_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.vIN5_ = vIN5_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.vIN6_ = vIN6_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.vIN7_ = vIN7_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.vIN8_ = vIN8_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.vIN9_ = vIN9_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.vIN10_ = vIN10_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.vIN11_ = vIN11_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        result.vIN12_ = vIN12_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        result.tOWVEH_ = tOWVEH_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        result.jKNIFE_ = jKNIFE_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000008;
        }
        result.mCARRI1_ = mCARRI1_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000010;
        }
        result.mCARRI2_ = mCARRI2_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000020;
        }
        result.mCARRID_ = mCARRID_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000040;
        }
        result.gVWR_ = gVWR_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000080;
        }
        result.vCONFIG_ = vCONFIG_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000100;
        }
        result.cARGOBT_ = cARGOBT_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000200;
        }
        result.hAZINV_ = hAZINV_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000400;
        }
        result.hAZPLAC_ = hAZPLAC_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000800;
        }
        result.hAZID_ = hAZID_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00001000;
        }
        result.hAZCNO_ = hAZCNO_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00002000;
        }
        result.hAZREL_ = hAZREL_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00004000;
        }
        result.bUSUSE_ = bUSUSE_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00008000;
        }
        result.sPECUSE_ = sPECUSE_;
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00010000;
        }
        result.eMERUSE_ = eMERUSE_;
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00020000;
        }
        result.tRAVSP_ = tRAVSP_;
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00040000;
        }
        result.uNDERIDE_ = uNDERIDE_;
        if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
          to_bitField1_ |= 0x00080000;
        }
        result.rOLLOVER_ = rOLLOVER_;
        if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
          to_bitField1_ |= 0x00100000;
        }
        result.rOLINLOC_ = rOLINLOC_;
        if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
          to_bitField1_ |= 0x00200000;
        }
        result.iMPACT1_ = iMPACT1_;
        if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
          to_bitField1_ |= 0x00400000;
        }
        result.dEFORMED_ = dEFORMED_;
        if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
          to_bitField1_ |= 0x00800000;
        }
        result.tOWED_ = tOWED_;
        if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
          to_bitField1_ |= 0x01000000;
        }
        result.mHARM_ = mHARM_;
        if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
          to_bitField1_ |= 0x02000000;
        }
        result.vEHSC1_ = vEHSC1_;
        if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
          to_bitField1_ |= 0x04000000;
        }
        result.vEHSC2_ = vEHSC2_;
        if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
          to_bitField1_ |= 0x08000000;
        }
        result.fIREEXP_ = fIREEXP_;
        if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
          to_bitField1_ |= 0x10000000;
        }
        result.dRPRES_ = dRPRES_;
        if (((from_bitField1_ & 0x20000000) == 0x20000000)) {
          to_bitField1_ |= 0x20000000;
        }
        result.lSTATE_ = lSTATE_;
        if (((from_bitField1_ & 0x40000000) == 0x40000000)) {
          to_bitField1_ |= 0x40000000;
        }
        result.dRZIP_ = dRZIP_;
        if (((from_bitField1_ & 0x80000000) == 0x80000000)) {
          to_bitField1_ |= 0x80000000;
        }
        result.lSTATUS_ = lSTATUS_;
        if (((from_bitField2_ & 0x00000001) == 0x00000001)) {
          to_bitField2_ |= 0x00000001;
        }
        result.lTYPE_ = lTYPE_;
        if (((from_bitField2_ & 0x00000002) == 0x00000002)) {
          to_bitField2_ |= 0x00000002;
        }
        result.cDLSTAT_ = cDLSTAT_;
        if (((from_bitField2_ & 0x00000004) == 0x00000004)) {
          to_bitField2_ |= 0x00000004;
        }
        result.lENDORS_ = lENDORS_;
        if (((from_bitField2_ & 0x00000008) == 0x00000008)) {
          to_bitField2_ |= 0x00000008;
        }
        result.lCOMPL_ = lCOMPL_;
        if (((from_bitField2_ & 0x00000010) == 0x00000010)) {
          to_bitField2_ |= 0x00000010;
        }
        result.lRESTRI_ = lRESTRI_;
        if (((from_bitField2_ & 0x00000020) == 0x00000020)) {
          to_bitField2_ |= 0x00000020;
        }
        result.dRHGT_ = dRHGT_;
        if (((from_bitField2_ & 0x00000040) == 0x00000040)) {
          to_bitField2_ |= 0x00000040;
        }
        result.dRWGT_ = dRWGT_;
        if (((from_bitField2_ & 0x00000080) == 0x00000080)) {
          to_bitField2_ |= 0x00000080;
        }
        result.pREVACC_ = pREVACC_;
        if (((from_bitField2_ & 0x00000100) == 0x00000100)) {
          to_bitField2_ |= 0x00000100;
        }
        result.pREVSUS_ = pREVSUS_;
        if (((from_bitField2_ & 0x00000200) == 0x00000200)) {
          to_bitField2_ |= 0x00000200;
        }
        result.pREVDWI_ = pREVDWI_;
        if (((from_bitField2_ & 0x00000400) == 0x00000400)) {
          to_bitField2_ |= 0x00000400;
        }
        result.pREVSPD_ = pREVSPD_;
        if (((from_bitField2_ & 0x00000800) == 0x00000800)) {
          to_bitField2_ |= 0x00000800;
        }
        result.pREVOTH_ = pREVOTH_;
        if (((from_bitField2_ & 0x00001000) == 0x00001000)) {
          to_bitField2_ |= 0x00001000;
        }
        result.fIRSTMO_ = fIRSTMO_;
        if (((from_bitField2_ & 0x00002000) == 0x00002000)) {
          to_bitField2_ |= 0x00002000;
        }
        result.fIRSTYR_ = fIRSTYR_;
        if (((from_bitField2_ & 0x00004000) == 0x00004000)) {
          to_bitField2_ |= 0x00004000;
        }
        result.lASTMO_ = lASTMO_;
        if (((from_bitField2_ & 0x00008000) == 0x00008000)) {
          to_bitField2_ |= 0x00008000;
        }
        result.lASTYR_ = lASTYR_;
        if (((from_bitField2_ & 0x00010000) == 0x00010000)) {
          to_bitField2_ |= 0x00010000;
        }
        result.sPEEDREL_ = sPEEDREL_;
        if (((from_bitField2_ & 0x00020000) == 0x00020000)) {
          to_bitField2_ |= 0x00020000;
        }
        result.dRSF1_ = dRSF1_;
        if (((from_bitField2_ & 0x00040000) == 0x00040000)) {
          to_bitField2_ |= 0x00040000;
        }
        result.dRSF2_ = dRSF2_;
        if (((from_bitField2_ & 0x00080000) == 0x00080000)) {
          to_bitField2_ |= 0x00080000;
        }
        result.dRSF3_ = dRSF3_;
        if (((from_bitField2_ & 0x00100000) == 0x00100000)) {
          to_bitField2_ |= 0x00100000;
        }
        result.dRSF4_ = dRSF4_;
        if (((from_bitField2_ & 0x00200000) == 0x00200000)) {
          to_bitField2_ |= 0x00200000;
        }
        result.vTRAFWAY_ = vTRAFWAY_;
        if (((from_bitField2_ & 0x00400000) == 0x00400000)) {
          to_bitField2_ |= 0x00400000;
        }
        result.vNUMLAN_ = vNUMLAN_;
        if (((from_bitField2_ & 0x00800000) == 0x00800000)) {
          to_bitField2_ |= 0x00800000;
        }
        result.vSPDLIM_ = vSPDLIM_;
        if (((from_bitField2_ & 0x01000000) == 0x01000000)) {
          to_bitField2_ |= 0x01000000;
        }
        result.vALIGN_ = vALIGN_;
        if (((from_bitField2_ & 0x02000000) == 0x02000000)) {
          to_bitField2_ |= 0x02000000;
        }
        result.vPROFILE_ = vPROFILE_;
        if (((from_bitField2_ & 0x04000000) == 0x04000000)) {
          to_bitField2_ |= 0x04000000;
        }
        result.vPAVETYP_ = vPAVETYP_;
        if (((from_bitField2_ & 0x08000000) == 0x08000000)) {
          to_bitField2_ |= 0x08000000;
        }
        result.vSURCOND_ = vSURCOND_;
        if (((from_bitField2_ & 0x10000000) == 0x10000000)) {
          to_bitField2_ |= 0x10000000;
        }
        result.vTRAFCON_ = vTRAFCON_;
        if (((from_bitField2_ & 0x20000000) == 0x20000000)) {
          to_bitField2_ |= 0x20000000;
        }
        result.vTCONTF_ = vTCONTF_;
        if (((from_bitField2_ & 0x40000000) == 0x40000000)) {
          to_bitField2_ |= 0x40000000;
        }
        result.pCRASH1_ = pCRASH1_;
        if (((from_bitField2_ & 0x80000000) == 0x80000000)) {
          to_bitField2_ |= 0x80000000;
        }
        result.pCRASH2_ = pCRASH2_;
        if (((from_bitField3_ & 0x00000001) == 0x00000001)) {
          to_bitField3_ |= 0x00000001;
        }
        result.pCRASH3_ = pCRASH3_;
        if (((from_bitField3_ & 0x00000002) == 0x00000002)) {
          to_bitField3_ |= 0x00000002;
        }
        result.pCRASH4_ = pCRASH4_;
        if (((from_bitField3_ & 0x00000004) == 0x00000004)) {
          to_bitField3_ |= 0x00000004;
        }
        result.pCRASH5_ = pCRASH5_;
        if (((from_bitField3_ & 0x00000008) == 0x00000008)) {
          to_bitField3_ |= 0x00000008;
        }
        result.aCCTYPE_ = aCCTYPE_;
        if (((from_bitField3_ & 0x00000010) == 0x00000010)) {
          to_bitField3_ |= 0x00000010;
        }
        result.dEATHS_ = dEATHS_;
        if (((from_bitField3_ & 0x00000020) == 0x00000020)) {
          to_bitField3_ |= 0x00000020;
        }
        result.dRDRINK_ = dRDRINK_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        result.bitField2_ = to_bitField2_;
        result.bitField3_ = to_bitField3_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof boa.types.Transport.Vehicle) {
          return mergeFrom((boa.types.Transport.Vehicle)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(boa.types.Transport.Vehicle other) {
        if (other == boa.types.Transport.Vehicle.getDefaultInstance()) return this;
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasSTCASE()) {
          setSTCASE(other.getSTCASE());
        }
        if (other.hasVEHNO()) {
          setVEHNO(other.getVEHNO());
        }
        if (other.hasVEFORMS()) {
          setVEFORMS(other.getVEFORMS());
        }
        if (other.hasNUMOCCS()) {
          setNUMOCCS(other.getNUMOCCS());
        }
        if (other.hasDAY()) {
          setDAY(other.getDAY());
        }
        if (other.hasMONTH()) {
          setMONTH(other.getMONTH());
        }
        if (other.hasHOUR()) {
          setHOUR(other.getHOUR());
        }
        if (other.hasMINUTE()) {
          setMINUTE(other.getMINUTE());
        }
        if (other.hasHARMEV()) {
          setHARMEV(other.getHARMEV());
        }
        if (other.hasMANCOLL()) {
          setMANCOLL(other.getMANCOLL());
        }
        if (other.hasUNITTYPE()) {
          setUNITTYPE(other.getUNITTYPE());
        }
        if (other.hasHITRUN()) {
          setHITRUN(other.getHITRUN());
        }
        if (other.hasREGSTAT()) {
          setREGSTAT(other.getREGSTAT());
        }
        if (other.hasOWNER()) {
          setOWNER(other.getOWNER());
        }
        if (other.hasMAKE()) {
          setMAKE(other.getMAKE());
        }
        if (other.hasMODEL()) {
          setMODEL(other.getMODEL());
        }
        if (other.hasMAKMOD()) {
          setMAKMOD(other.getMAKMOD());
        }
        if (other.hasBODYTYP()) {
          setBODYTYP(other.getBODYTYP());
        }
        if (other.hasMODYEAR()) {
          setMODYEAR(other.getMODYEAR());
        }
        if (other.hasVIN()) {
          bitField0_ |= 0x00100000;
          vIN_ = other.vIN_;
          onChanged();
        }
        if (other.hasVIN1()) {
          bitField0_ |= 0x00200000;
          vIN1_ = other.vIN1_;
          onChanged();
        }
        if (other.hasVIN2()) {
          bitField0_ |= 0x00400000;
          vIN2_ = other.vIN2_;
          onChanged();
        }
        if (other.hasVIN3()) {
          bitField0_ |= 0x00800000;
          vIN3_ = other.vIN3_;
          onChanged();
        }
        if (other.hasVIN4()) {
          bitField0_ |= 0x01000000;
          vIN4_ = other.vIN4_;
          onChanged();
        }
        if (other.hasVIN5()) {
          bitField0_ |= 0x02000000;
          vIN5_ = other.vIN5_;
          onChanged();
        }
        if (other.hasVIN6()) {
          bitField0_ |= 0x04000000;
          vIN6_ = other.vIN6_;
          onChanged();
        }
        if (other.hasVIN7()) {
          bitField0_ |= 0x08000000;
          vIN7_ = other.vIN7_;
          onChanged();
        }
        if (other.hasVIN8()) {
          bitField0_ |= 0x10000000;
          vIN8_ = other.vIN8_;
          onChanged();
        }
        if (other.hasVIN9()) {
          bitField0_ |= 0x20000000;
          vIN9_ = other.vIN9_;
          onChanged();
        }
        if (other.hasVIN10()) {
          bitField0_ |= 0x40000000;
          vIN10_ = other.vIN10_;
          onChanged();
        }
        if (other.hasVIN11()) {
          bitField0_ |= 0x80000000;
          vIN11_ = other.vIN11_;
          onChanged();
        }
        if (other.hasVIN12()) {
          bitField1_ |= 0x00000001;
          vIN12_ = other.vIN12_;
          onChanged();
        }
        if (other.hasTOWVEH()) {
          setTOWVEH(other.getTOWVEH());
        }
        if (other.hasJKNIFE()) {
          setJKNIFE(other.getJKNIFE());
        }
        if (other.hasMCARRI1()) {
          bitField1_ |= 0x00000008;
          mCARRI1_ = other.mCARRI1_;
          onChanged();
        }
        if (other.hasMCARRI2()) {
          bitField1_ |= 0x00000010;
          mCARRI2_ = other.mCARRI2_;
          onChanged();
        }
        if (other.hasMCARRID()) {
          bitField1_ |= 0x00000020;
          mCARRID_ = other.mCARRID_;
          onChanged();
        }
        if (other.hasGVWR()) {
          setGVWR(other.getGVWR());
        }
        if (other.hasVCONFIG()) {
          setVCONFIG(other.getVCONFIG());
        }
        if (other.hasCARGOBT()) {
          setCARGOBT(other.getCARGOBT());
        }
        if (other.hasHAZINV()) {
          setHAZINV(other.getHAZINV());
        }
        if (other.hasHAZPLAC()) {
          setHAZPLAC(other.getHAZPLAC());
        }
        if (other.hasHAZID()) {
          setHAZID(other.getHAZID());
        }
        if (other.hasHAZCNO()) {
          setHAZCNO(other.getHAZCNO());
        }
        if (other.hasHAZREL()) {
          setHAZREL(other.getHAZREL());
        }
        if (other.hasBUSUSE()) {
          setBUSUSE(other.getBUSUSE());
        }
        if (other.hasSPECUSE()) {
          setSPECUSE(other.getSPECUSE());
        }
        if (other.hasEMERUSE()) {
          setEMERUSE(other.getEMERUSE());
        }
        if (other.hasTRAVSP()) {
          setTRAVSP(other.getTRAVSP());
        }
        if (other.hasUNDERIDE()) {
          setUNDERIDE(other.getUNDERIDE());
        }
        if (other.hasROLLOVER()) {
          setROLLOVER(other.getROLLOVER());
        }
        if (other.hasROLINLOC()) {
          setROLINLOC(other.getROLINLOC());
        }
        if (other.hasIMPACT1()) {
          setIMPACT1(other.getIMPACT1());
        }
        if (other.hasDEFORMED()) {
          setDEFORMED(other.getDEFORMED());
        }
        if (other.hasTOWED()) {
          setTOWED(other.getTOWED());
        }
        if (other.hasMHARM()) {
          setMHARM(other.getMHARM());
        }
        if (other.hasVEHSC1()) {
          setVEHSC1(other.getVEHSC1());
        }
        if (other.hasVEHSC2()) {
          setVEHSC2(other.getVEHSC2());
        }
        if (other.hasFIREEXP()) {
          setFIREEXP(other.getFIREEXP());
        }
        if (other.hasDRPRES()) {
          setDRPRES(other.getDRPRES());
        }
        if (other.hasLSTATE()) {
          setLSTATE(other.getLSTATE());
        }
        if (other.hasDRZIP()) {
          setDRZIP(other.getDRZIP());
        }
        if (other.hasLSTATUS()) {
          setLSTATUS(other.getLSTATUS());
        }
        if (other.hasLTYPE()) {
          setLTYPE(other.getLTYPE());
        }
        if (other.hasCDLSTAT()) {
          setCDLSTAT(other.getCDLSTAT());
        }
        if (other.hasLENDORS()) {
          setLENDORS(other.getLENDORS());
        }
        if (other.hasLCOMPL()) {
          setLCOMPL(other.getLCOMPL());
        }
        if (other.hasLRESTRI()) {
          setLRESTRI(other.getLRESTRI());
        }
        if (other.hasDRHGT()) {
          setDRHGT(other.getDRHGT());
        }
        if (other.hasDRWGT()) {
          setDRWGT(other.getDRWGT());
        }
        if (other.hasPREVACC()) {
          setPREVACC(other.getPREVACC());
        }
        if (other.hasPREVSUS()) {
          setPREVSUS(other.getPREVSUS());
        }
        if (other.hasPREVDWI()) {
          setPREVDWI(other.getPREVDWI());
        }
        if (other.hasPREVSPD()) {
          setPREVSPD(other.getPREVSPD());
        }
        if (other.hasPREVOTH()) {
          setPREVOTH(other.getPREVOTH());
        }
        if (other.hasFIRSTMO()) {
          setFIRSTMO(other.getFIRSTMO());
        }
        if (other.hasFIRSTYR()) {
          setFIRSTYR(other.getFIRSTYR());
        }
        if (other.hasLASTMO()) {
          setLASTMO(other.getLASTMO());
        }
        if (other.hasLASTYR()) {
          setLASTYR(other.getLASTYR());
        }
        if (other.hasSPEEDREL()) {
          setSPEEDREL(other.getSPEEDREL());
        }
        if (other.hasDRSF1()) {
          setDRSF1(other.getDRSF1());
        }
        if (other.hasDRSF2()) {
          setDRSF2(other.getDRSF2());
        }
        if (other.hasDRSF3()) {
          setDRSF3(other.getDRSF3());
        }
        if (other.hasDRSF4()) {
          setDRSF4(other.getDRSF4());
        }
        if (other.hasVTRAFWAY()) {
          setVTRAFWAY(other.getVTRAFWAY());
        }
        if (other.hasVNUMLAN()) {
          setVNUMLAN(other.getVNUMLAN());
        }
        if (other.hasVSPDLIM()) {
          setVSPDLIM(other.getVSPDLIM());
        }
        if (other.hasVALIGN()) {
          setVALIGN(other.getVALIGN());
        }
        if (other.hasVPROFILE()) {
          setVPROFILE(other.getVPROFILE());
        }
        if (other.hasVPAVETYP()) {
          setVPAVETYP(other.getVPAVETYP());
        }
        if (other.hasVSURCOND()) {
          setVSURCOND(other.getVSURCOND());
        }
        if (other.hasVTRAFCON()) {
          setVTRAFCON(other.getVTRAFCON());
        }
        if (other.hasVTCONTF()) {
          setVTCONTF(other.getVTCONTF());
        }
        if (other.hasPCRASH1()) {
          setPCRASH1(other.getPCRASH1());
        }
        if (other.hasPCRASH2()) {
          setPCRASH2(other.getPCRASH2());
        }
        if (other.hasPCRASH3()) {
          setPCRASH3(other.getPCRASH3());
        }
        if (other.hasPCRASH4()) {
          setPCRASH4(other.getPCRASH4());
        }
        if (other.hasPCRASH5()) {
          setPCRASH5(other.getPCRASH5());
        }
        if (other.hasACCTYPE()) {
          setACCTYPE(other.getACCTYPE());
        }
        if (other.hasDEATHS()) {
          setDEATHS(other.getDEATHS());
        }
        if (other.hasDRDRINK()) {
          setDRDRINK(other.getDRDRINK());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasState()) {
          
          return false;
        }
        if (!hasSTCASE()) {
          
          return false;
        }
        if (!hasVEHNO()) {
          
          return false;
        }
        if (!hasVEFORMS()) {
          
          return false;
        }
        if (!hasNUMOCCS()) {
          
          return false;
        }
        if (!hasDAY()) {
          
          return false;
        }
        if (!hasMONTH()) {
          
          return false;
        }
        if (!hasHOUR()) {
          
          return false;
        }
        if (!hasMINUTE()) {
          
          return false;
        }
        if (!hasHARMEV()) {
          
          return false;
        }
        if (!hasMANCOLL()) {
          
          return false;
        }
        if (!hasUNITTYPE()) {
          
          return false;
        }
        if (!hasHITRUN()) {
          
          return false;
        }
        if (!hasREGSTAT()) {
          
          return false;
        }
        if (!hasOWNER()) {
          
          return false;
        }
        if (!hasMAKE()) {
          
          return false;
        }
        if (!hasMODEL()) {
          
          return false;
        }
        if (!hasMAKMOD()) {
          
          return false;
        }
        if (!hasBODYTYP()) {
          
          return false;
        }
        if (!hasMODYEAR()) {
          
          return false;
        }
        if (!hasVIN()) {
          
          return false;
        }
        if (!hasVIN1()) {
          
          return false;
        }
        if (!hasVIN2()) {
          
          return false;
        }
        if (!hasVIN3()) {
          
          return false;
        }
        if (!hasVIN4()) {
          
          return false;
        }
        if (!hasVIN5()) {
          
          return false;
        }
        if (!hasVIN6()) {
          
          return false;
        }
        if (!hasVIN7()) {
          
          return false;
        }
        if (!hasVIN8()) {
          
          return false;
        }
        if (!hasVIN9()) {
          
          return false;
        }
        if (!hasVIN10()) {
          
          return false;
        }
        if (!hasVIN11()) {
          
          return false;
        }
        if (!hasVIN12()) {
          
          return false;
        }
        if (!hasTOWVEH()) {
          
          return false;
        }
        if (!hasJKNIFE()) {
          
          return false;
        }
        if (!hasMCARRI1()) {
          
          return false;
        }
        if (!hasMCARRI2()) {
          
          return false;
        }
        if (!hasMCARRID()) {
          
          return false;
        }
        if (!hasGVWR()) {
          
          return false;
        }
        if (!hasVCONFIG()) {
          
          return false;
        }
        if (!hasCARGOBT()) {
          
          return false;
        }
        if (!hasHAZINV()) {
          
          return false;
        }
        if (!hasHAZPLAC()) {
          
          return false;
        }
        if (!hasHAZID()) {
          
          return false;
        }
        if (!hasHAZCNO()) {
          
          return false;
        }
        if (!hasHAZREL()) {
          
          return false;
        }
        if (!hasBUSUSE()) {
          
          return false;
        }
        if (!hasSPECUSE()) {
          
          return false;
        }
        if (!hasEMERUSE()) {
          
          return false;
        }
        if (!hasTRAVSP()) {
          
          return false;
        }
        if (!hasUNDERIDE()) {
          
          return false;
        }
        if (!hasROLLOVER()) {
          
          return false;
        }
        if (!hasROLINLOC()) {
          
          return false;
        }
        if (!hasIMPACT1()) {
          
          return false;
        }
        if (!hasDEFORMED()) {
          
          return false;
        }
        if (!hasTOWED()) {
          
          return false;
        }
        if (!hasMHARM()) {
          
          return false;
        }
        if (!hasVEHSC1()) {
          
          return false;
        }
        if (!hasVEHSC2()) {
          
          return false;
        }
        if (!hasFIREEXP()) {
          
          return false;
        }
        if (!hasDRPRES()) {
          
          return false;
        }
        if (!hasLSTATE()) {
          
          return false;
        }
        if (!hasDRZIP()) {
          
          return false;
        }
        if (!hasLSTATUS()) {
          
          return false;
        }
        if (!hasLTYPE()) {
          
          return false;
        }
        if (!hasCDLSTAT()) {
          
          return false;
        }
        if (!hasLENDORS()) {
          
          return false;
        }
        if (!hasLCOMPL()) {
          
          return false;
        }
        if (!hasLRESTRI()) {
          
          return false;
        }
        if (!hasDRHGT()) {
          
          return false;
        }
        if (!hasDRWGT()) {
          
          return false;
        }
        if (!hasPREVACC()) {
          
          return false;
        }
        if (!hasPREVSUS()) {
          
          return false;
        }
        if (!hasPREVDWI()) {
          
          return false;
        }
        if (!hasPREVSPD()) {
          
          return false;
        }
        if (!hasPREVOTH()) {
          
          return false;
        }
        if (!hasFIRSTMO()) {
          
          return false;
        }
        if (!hasFIRSTYR()) {
          
          return false;
        }
        if (!hasLASTMO()) {
          
          return false;
        }
        if (!hasLASTYR()) {
          
          return false;
        }
        if (!hasSPEEDREL()) {
          
          return false;
        }
        if (!hasDRSF1()) {
          
          return false;
        }
        if (!hasVTRAFWAY()) {
          
          return false;
        }
        if (!hasVNUMLAN()) {
          
          return false;
        }
        if (!hasVSPDLIM()) {
          
          return false;
        }
        if (!hasVALIGN()) {
          
          return false;
        }
        if (!hasVPROFILE()) {
          
          return false;
        }
        if (!hasVPAVETYP()) {
          
          return false;
        }
        if (!hasVSURCOND()) {
          
          return false;
        }
        if (!hasVTRAFCON()) {
          
          return false;
        }
        if (!hasVTCONTF()) {
          
          return false;
        }
        if (!hasPCRASH1()) {
          
          return false;
        }
        if (!hasPCRASH2()) {
          
          return false;
        }
        if (!hasPCRASH3()) {
          
          return false;
        }
        if (!hasPCRASH4()) {
          
          return false;
        }
        if (!hasPCRASH5()) {
          
          return false;
        }
        if (!hasACCTYPE()) {
          
          return false;
        }
        if (!hasDEATHS()) {
          
          return false;
        }
        if (!hasDRDRINK()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        boa.types.Transport.Vehicle parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (boa.types.Transport.Vehicle) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;
      private int bitField2_;
      private int bitField3_;

      // required .boa.types.STATE state = 1;
      private boa.types.Transport.STATE state_ = boa.types.Transport.STATE.Alabama;
      /**
       * <code>required .boa.types.STATE state = 1;</code>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .boa.types.STATE state = 1;</code>
       */
      public boa.types.Transport.STATE getState() {
        return state_;
      }
      /**
       * <code>required .boa.types.STATE state = 1;</code>
       */
      public Builder setState(boa.types.Transport.STATE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        state_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .boa.types.STATE state = 1;</code>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = boa.types.Transport.STATE.Alabama;
        onChanged();
        return this;
      }

      // required int32 ST_CASE = 2;
      private int sTCASE_ ;
      /**
       * <code>required int32 ST_CASE = 2;</code>
       */
      public boolean hasSTCASE() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 ST_CASE = 2;</code>
       */
      public int getSTCASE() {
        return sTCASE_;
      }
      /**
       * <code>required int32 ST_CASE = 2;</code>
       */
      public Builder setSTCASE(int value) {
        bitField0_ |= 0x00000002;
        sTCASE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 ST_CASE = 2;</code>
       */
      public Builder clearSTCASE() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sTCASE_ = 0;
        onChanged();
        return this;
      }

      // required int32 VEH_NO = 3;
      private int vEHNO_ ;
      /**
       * <code>required int32 VEH_NO = 3;</code>
       */
      public boolean hasVEHNO() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 VEH_NO = 3;</code>
       */
      public int getVEHNO() {
        return vEHNO_;
      }
      /**
       * <code>required int32 VEH_NO = 3;</code>
       */
      public Builder setVEHNO(int value) {
        bitField0_ |= 0x00000004;
        vEHNO_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VEH_NO = 3;</code>
       */
      public Builder clearVEHNO() {
        bitField0_ = (bitField0_ & ~0x00000004);
        vEHNO_ = 0;
        onChanged();
        return this;
      }

      // required int32 VE_FORMS = 4;
      private int vEFORMS_ ;
      /**
       * <code>required int32 VE_FORMS = 4;</code>
       */
      public boolean hasVEFORMS() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 VE_FORMS = 4;</code>
       */
      public int getVEFORMS() {
        return vEFORMS_;
      }
      /**
       * <code>required int32 VE_FORMS = 4;</code>
       */
      public Builder setVEFORMS(int value) {
        bitField0_ |= 0x00000008;
        vEFORMS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VE_FORMS = 4;</code>
       */
      public Builder clearVEFORMS() {
        bitField0_ = (bitField0_ & ~0x00000008);
        vEFORMS_ = 0;
        onChanged();
        return this;
      }

      // required int32 NUMOCCS = 5;
      private int nUMOCCS_ ;
      /**
       * <code>required int32 NUMOCCS = 5;</code>
       */
      public boolean hasNUMOCCS() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 NUMOCCS = 5;</code>
       */
      public int getNUMOCCS() {
        return nUMOCCS_;
      }
      /**
       * <code>required int32 NUMOCCS = 5;</code>
       */
      public Builder setNUMOCCS(int value) {
        bitField0_ |= 0x00000010;
        nUMOCCS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 NUMOCCS = 5;</code>
       */
      public Builder clearNUMOCCS() {
        bitField0_ = (bitField0_ & ~0x00000010);
        nUMOCCS_ = 0;
        onChanged();
        return this;
      }

      // required int32 DAY = 6;
      private int dAY_ ;
      /**
       * <code>required int32 DAY = 6;</code>
       */
      public boolean hasDAY() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 DAY = 6;</code>
       */
      public int getDAY() {
        return dAY_;
      }
      /**
       * <code>required int32 DAY = 6;</code>
       */
      public Builder setDAY(int value) {
        bitField0_ |= 0x00000020;
        dAY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 DAY = 6;</code>
       */
      public Builder clearDAY() {
        bitField0_ = (bitField0_ & ~0x00000020);
        dAY_ = 0;
        onChanged();
        return this;
      }

      // required int32 MONTH = 7;
      private int mONTH_ ;
      /**
       * <code>required int32 MONTH = 7;</code>
       */
      public boolean hasMONTH() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 MONTH = 7;</code>
       */
      public int getMONTH() {
        return mONTH_;
      }
      /**
       * <code>required int32 MONTH = 7;</code>
       */
      public Builder setMONTH(int value) {
        bitField0_ |= 0x00000040;
        mONTH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 MONTH = 7;</code>
       */
      public Builder clearMONTH() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mONTH_ = 0;
        onChanged();
        return this;
      }

      // required int32 HOUR = 8;
      private int hOUR_ ;
      /**
       * <code>required int32 HOUR = 8;</code>
       */
      public boolean hasHOUR() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required int32 HOUR = 8;</code>
       */
      public int getHOUR() {
        return hOUR_;
      }
      /**
       * <code>required int32 HOUR = 8;</code>
       */
      public Builder setHOUR(int value) {
        bitField0_ |= 0x00000080;
        hOUR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 HOUR = 8;</code>
       */
      public Builder clearHOUR() {
        bitField0_ = (bitField0_ & ~0x00000080);
        hOUR_ = 0;
        onChanged();
        return this;
      }

      // required int32 MINUTE = 9;
      private int mINUTE_ ;
      /**
       * <code>required int32 MINUTE = 9;</code>
       */
      public boolean hasMINUTE() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required int32 MINUTE = 9;</code>
       */
      public int getMINUTE() {
        return mINUTE_;
      }
      /**
       * <code>required int32 MINUTE = 9;</code>
       */
      public Builder setMINUTE(int value) {
        bitField0_ |= 0x00000100;
        mINUTE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 MINUTE = 9;</code>
       */
      public Builder clearMINUTE() {
        bitField0_ = (bitField0_ & ~0x00000100);
        mINUTE_ = 0;
        onChanged();
        return this;
      }

      // required int32 HARM_EV = 10;
      private int hARMEV_ ;
      /**
       * <code>required int32 HARM_EV = 10;</code>
       */
      public boolean hasHARMEV() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required int32 HARM_EV = 10;</code>
       */
      public int getHARMEV() {
        return hARMEV_;
      }
      /**
       * <code>required int32 HARM_EV = 10;</code>
       */
      public Builder setHARMEV(int value) {
        bitField0_ |= 0x00000200;
        hARMEV_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 HARM_EV = 10;</code>
       */
      public Builder clearHARMEV() {
        bitField0_ = (bitField0_ & ~0x00000200);
        hARMEV_ = 0;
        onChanged();
        return this;
      }

      // required int32 MAN_COLL = 11;
      private int mANCOLL_ ;
      /**
       * <code>required int32 MAN_COLL = 11;</code>
       */
      public boolean hasMANCOLL() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required int32 MAN_COLL = 11;</code>
       */
      public int getMANCOLL() {
        return mANCOLL_;
      }
      /**
       * <code>required int32 MAN_COLL = 11;</code>
       */
      public Builder setMANCOLL(int value) {
        bitField0_ |= 0x00000400;
        mANCOLL_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 MAN_COLL = 11;</code>
       */
      public Builder clearMANCOLL() {
        bitField0_ = (bitField0_ & ~0x00000400);
        mANCOLL_ = 0;
        onChanged();
        return this;
      }

      // required int32 UNITTYPE = 12;
      private int uNITTYPE_ ;
      /**
       * <code>required int32 UNITTYPE = 12;</code>
       */
      public boolean hasUNITTYPE() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required int32 UNITTYPE = 12;</code>
       */
      public int getUNITTYPE() {
        return uNITTYPE_;
      }
      /**
       * <code>required int32 UNITTYPE = 12;</code>
       */
      public Builder setUNITTYPE(int value) {
        bitField0_ |= 0x00000800;
        uNITTYPE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 UNITTYPE = 12;</code>
       */
      public Builder clearUNITTYPE() {
        bitField0_ = (bitField0_ & ~0x00000800);
        uNITTYPE_ = 0;
        onChanged();
        return this;
      }

      // required int32 HIT_RUN = 13;
      private int hITRUN_ ;
      /**
       * <code>required int32 HIT_RUN = 13;</code>
       */
      public boolean hasHITRUN() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required int32 HIT_RUN = 13;</code>
       */
      public int getHITRUN() {
        return hITRUN_;
      }
      /**
       * <code>required int32 HIT_RUN = 13;</code>
       */
      public Builder setHITRUN(int value) {
        bitField0_ |= 0x00001000;
        hITRUN_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 HIT_RUN = 13;</code>
       */
      public Builder clearHITRUN() {
        bitField0_ = (bitField0_ & ~0x00001000);
        hITRUN_ = 0;
        onChanged();
        return this;
      }

      // required int32 REG_STAT = 14;
      private int rEGSTAT_ ;
      /**
       * <code>required int32 REG_STAT = 14;</code>
       */
      public boolean hasREGSTAT() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required int32 REG_STAT = 14;</code>
       */
      public int getREGSTAT() {
        return rEGSTAT_;
      }
      /**
       * <code>required int32 REG_STAT = 14;</code>
       */
      public Builder setREGSTAT(int value) {
        bitField0_ |= 0x00002000;
        rEGSTAT_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 REG_STAT = 14;</code>
       */
      public Builder clearREGSTAT() {
        bitField0_ = (bitField0_ & ~0x00002000);
        rEGSTAT_ = 0;
        onChanged();
        return this;
      }

      // required int32 OWNER = 15;
      private int oWNER_ ;
      /**
       * <code>required int32 OWNER = 15;</code>
       */
      public boolean hasOWNER() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>required int32 OWNER = 15;</code>
       */
      public int getOWNER() {
        return oWNER_;
      }
      /**
       * <code>required int32 OWNER = 15;</code>
       */
      public Builder setOWNER(int value) {
        bitField0_ |= 0x00004000;
        oWNER_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 OWNER = 15;</code>
       */
      public Builder clearOWNER() {
        bitField0_ = (bitField0_ & ~0x00004000);
        oWNER_ = 0;
        onChanged();
        return this;
      }

      // required int32 MAKE = 16;
      private int mAKE_ ;
      /**
       * <code>required int32 MAKE = 16;</code>
       */
      public boolean hasMAKE() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>required int32 MAKE = 16;</code>
       */
      public int getMAKE() {
        return mAKE_;
      }
      /**
       * <code>required int32 MAKE = 16;</code>
       */
      public Builder setMAKE(int value) {
        bitField0_ |= 0x00008000;
        mAKE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 MAKE = 16;</code>
       */
      public Builder clearMAKE() {
        bitField0_ = (bitField0_ & ~0x00008000);
        mAKE_ = 0;
        onChanged();
        return this;
      }

      // required int32 MODEL = 17;
      private int mODEL_ ;
      /**
       * <code>required int32 MODEL = 17;</code>
       */
      public boolean hasMODEL() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>required int32 MODEL = 17;</code>
       */
      public int getMODEL() {
        return mODEL_;
      }
      /**
       * <code>required int32 MODEL = 17;</code>
       */
      public Builder setMODEL(int value) {
        bitField0_ |= 0x00010000;
        mODEL_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 MODEL = 17;</code>
       */
      public Builder clearMODEL() {
        bitField0_ = (bitField0_ & ~0x00010000);
        mODEL_ = 0;
        onChanged();
        return this;
      }

      // required int32 MAK_MOD = 18;
      private int mAKMOD_ ;
      /**
       * <code>required int32 MAK_MOD = 18;</code>
       */
      public boolean hasMAKMOD() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>required int32 MAK_MOD = 18;</code>
       */
      public int getMAKMOD() {
        return mAKMOD_;
      }
      /**
       * <code>required int32 MAK_MOD = 18;</code>
       */
      public Builder setMAKMOD(int value) {
        bitField0_ |= 0x00020000;
        mAKMOD_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 MAK_MOD = 18;</code>
       */
      public Builder clearMAKMOD() {
        bitField0_ = (bitField0_ & ~0x00020000);
        mAKMOD_ = 0;
        onChanged();
        return this;
      }

      // required int32 BODY_TYP = 19;
      private int bODYTYP_ ;
      /**
       * <code>required int32 BODY_TYP = 19;</code>
       */
      public boolean hasBODYTYP() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>required int32 BODY_TYP = 19;</code>
       */
      public int getBODYTYP() {
        return bODYTYP_;
      }
      /**
       * <code>required int32 BODY_TYP = 19;</code>
       */
      public Builder setBODYTYP(int value) {
        bitField0_ |= 0x00040000;
        bODYTYP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 BODY_TYP = 19;</code>
       */
      public Builder clearBODYTYP() {
        bitField0_ = (bitField0_ & ~0x00040000);
        bODYTYP_ = 0;
        onChanged();
        return this;
      }

      // required int32 MOD_YEAR = 20;
      private int mODYEAR_ ;
      /**
       * <code>required int32 MOD_YEAR = 20;</code>
       */
      public boolean hasMODYEAR() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>required int32 MOD_YEAR = 20;</code>
       */
      public int getMODYEAR() {
        return mODYEAR_;
      }
      /**
       * <code>required int32 MOD_YEAR = 20;</code>
       */
      public Builder setMODYEAR(int value) {
        bitField0_ |= 0x00080000;
        mODYEAR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 MOD_YEAR = 20;</code>
       */
      public Builder clearMODYEAR() {
        bitField0_ = (bitField0_ & ~0x00080000);
        mODYEAR_ = 0;
        onChanged();
        return this;
      }

      // required string VIN = 21;
      private java.lang.Object vIN_ = "";
      /**
       * <code>required string VIN = 21;</code>
       */
      public boolean hasVIN() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>required string VIN = 21;</code>
       */
      public java.lang.String getVIN() {
        java.lang.Object ref = vIN_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          vIN_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string VIN = 21;</code>
       */
      public com.google.protobuf.ByteString
          getVINBytes() {
        java.lang.Object ref = vIN_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vIN_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string VIN = 21;</code>
       */
      public Builder setVIN(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00100000;
        vIN_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN = 21;</code>
       */
      public Builder clearVIN() {
        bitField0_ = (bitField0_ & ~0x00100000);
        vIN_ = getDefaultInstance().getVIN();
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN = 21;</code>
       */
      public Builder setVINBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00100000;
        vIN_ = value;
        onChanged();
        return this;
      }

      // required string VIN_1 = 22;
      private java.lang.Object vIN1_ = "";
      /**
       * <code>required string VIN_1 = 22;</code>
       */
      public boolean hasVIN1() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>required string VIN_1 = 22;</code>
       */
      public java.lang.String getVIN1() {
        java.lang.Object ref = vIN1_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          vIN1_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string VIN_1 = 22;</code>
       */
      public com.google.protobuf.ByteString
          getVIN1Bytes() {
        java.lang.Object ref = vIN1_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vIN1_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string VIN_1 = 22;</code>
       */
      public Builder setVIN1(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00200000;
        vIN1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_1 = 22;</code>
       */
      public Builder clearVIN1() {
        bitField0_ = (bitField0_ & ~0x00200000);
        vIN1_ = getDefaultInstance().getVIN1();
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_1 = 22;</code>
       */
      public Builder setVIN1Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00200000;
        vIN1_ = value;
        onChanged();
        return this;
      }

      // required string VIN_2 = 23;
      private java.lang.Object vIN2_ = "";
      /**
       * <code>required string VIN_2 = 23;</code>
       */
      public boolean hasVIN2() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>required string VIN_2 = 23;</code>
       */
      public java.lang.String getVIN2() {
        java.lang.Object ref = vIN2_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          vIN2_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string VIN_2 = 23;</code>
       */
      public com.google.protobuf.ByteString
          getVIN2Bytes() {
        java.lang.Object ref = vIN2_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vIN2_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string VIN_2 = 23;</code>
       */
      public Builder setVIN2(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00400000;
        vIN2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_2 = 23;</code>
       */
      public Builder clearVIN2() {
        bitField0_ = (bitField0_ & ~0x00400000);
        vIN2_ = getDefaultInstance().getVIN2();
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_2 = 23;</code>
       */
      public Builder setVIN2Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00400000;
        vIN2_ = value;
        onChanged();
        return this;
      }

      // required string VIN_3 = 24;
      private java.lang.Object vIN3_ = "";
      /**
       * <code>required string VIN_3 = 24;</code>
       */
      public boolean hasVIN3() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>required string VIN_3 = 24;</code>
       */
      public java.lang.String getVIN3() {
        java.lang.Object ref = vIN3_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          vIN3_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string VIN_3 = 24;</code>
       */
      public com.google.protobuf.ByteString
          getVIN3Bytes() {
        java.lang.Object ref = vIN3_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vIN3_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string VIN_3 = 24;</code>
       */
      public Builder setVIN3(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00800000;
        vIN3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_3 = 24;</code>
       */
      public Builder clearVIN3() {
        bitField0_ = (bitField0_ & ~0x00800000);
        vIN3_ = getDefaultInstance().getVIN3();
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_3 = 24;</code>
       */
      public Builder setVIN3Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00800000;
        vIN3_ = value;
        onChanged();
        return this;
      }

      // required string VIN_4 = 25;
      private java.lang.Object vIN4_ = "";
      /**
       * <code>required string VIN_4 = 25;</code>
       */
      public boolean hasVIN4() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>required string VIN_4 = 25;</code>
       */
      public java.lang.String getVIN4() {
        java.lang.Object ref = vIN4_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          vIN4_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string VIN_4 = 25;</code>
       */
      public com.google.protobuf.ByteString
          getVIN4Bytes() {
        java.lang.Object ref = vIN4_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vIN4_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string VIN_4 = 25;</code>
       */
      public Builder setVIN4(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x01000000;
        vIN4_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_4 = 25;</code>
       */
      public Builder clearVIN4() {
        bitField0_ = (bitField0_ & ~0x01000000);
        vIN4_ = getDefaultInstance().getVIN4();
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_4 = 25;</code>
       */
      public Builder setVIN4Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x01000000;
        vIN4_ = value;
        onChanged();
        return this;
      }

      // required string VIN_5 = 26;
      private java.lang.Object vIN5_ = "";
      /**
       * <code>required string VIN_5 = 26;</code>
       */
      public boolean hasVIN5() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>required string VIN_5 = 26;</code>
       */
      public java.lang.String getVIN5() {
        java.lang.Object ref = vIN5_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          vIN5_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string VIN_5 = 26;</code>
       */
      public com.google.protobuf.ByteString
          getVIN5Bytes() {
        java.lang.Object ref = vIN5_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vIN5_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string VIN_5 = 26;</code>
       */
      public Builder setVIN5(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x02000000;
        vIN5_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_5 = 26;</code>
       */
      public Builder clearVIN5() {
        bitField0_ = (bitField0_ & ~0x02000000);
        vIN5_ = getDefaultInstance().getVIN5();
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_5 = 26;</code>
       */
      public Builder setVIN5Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x02000000;
        vIN5_ = value;
        onChanged();
        return this;
      }

      // required string VIN_6 = 27;
      private java.lang.Object vIN6_ = "";
      /**
       * <code>required string VIN_6 = 27;</code>
       */
      public boolean hasVIN6() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>required string VIN_6 = 27;</code>
       */
      public java.lang.String getVIN6() {
        java.lang.Object ref = vIN6_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          vIN6_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string VIN_6 = 27;</code>
       */
      public com.google.protobuf.ByteString
          getVIN6Bytes() {
        java.lang.Object ref = vIN6_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vIN6_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string VIN_6 = 27;</code>
       */
      public Builder setVIN6(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x04000000;
        vIN6_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_6 = 27;</code>
       */
      public Builder clearVIN6() {
        bitField0_ = (bitField0_ & ~0x04000000);
        vIN6_ = getDefaultInstance().getVIN6();
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_6 = 27;</code>
       */
      public Builder setVIN6Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x04000000;
        vIN6_ = value;
        onChanged();
        return this;
      }

      // required string VIN_7 = 28;
      private java.lang.Object vIN7_ = "";
      /**
       * <code>required string VIN_7 = 28;</code>
       */
      public boolean hasVIN7() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>required string VIN_7 = 28;</code>
       */
      public java.lang.String getVIN7() {
        java.lang.Object ref = vIN7_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          vIN7_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string VIN_7 = 28;</code>
       */
      public com.google.protobuf.ByteString
          getVIN7Bytes() {
        java.lang.Object ref = vIN7_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vIN7_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string VIN_7 = 28;</code>
       */
      public Builder setVIN7(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x08000000;
        vIN7_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_7 = 28;</code>
       */
      public Builder clearVIN7() {
        bitField0_ = (bitField0_ & ~0x08000000);
        vIN7_ = getDefaultInstance().getVIN7();
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_7 = 28;</code>
       */
      public Builder setVIN7Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x08000000;
        vIN7_ = value;
        onChanged();
        return this;
      }

      // required string VIN_8 = 29;
      private java.lang.Object vIN8_ = "";
      /**
       * <code>required string VIN_8 = 29;</code>
       */
      public boolean hasVIN8() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>required string VIN_8 = 29;</code>
       */
      public java.lang.String getVIN8() {
        java.lang.Object ref = vIN8_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          vIN8_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string VIN_8 = 29;</code>
       */
      public com.google.protobuf.ByteString
          getVIN8Bytes() {
        java.lang.Object ref = vIN8_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vIN8_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string VIN_8 = 29;</code>
       */
      public Builder setVIN8(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x10000000;
        vIN8_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_8 = 29;</code>
       */
      public Builder clearVIN8() {
        bitField0_ = (bitField0_ & ~0x10000000);
        vIN8_ = getDefaultInstance().getVIN8();
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_8 = 29;</code>
       */
      public Builder setVIN8Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x10000000;
        vIN8_ = value;
        onChanged();
        return this;
      }

      // required string VIN_9 = 30;
      private java.lang.Object vIN9_ = "";
      /**
       * <code>required string VIN_9 = 30;</code>
       */
      public boolean hasVIN9() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>required string VIN_9 = 30;</code>
       */
      public java.lang.String getVIN9() {
        java.lang.Object ref = vIN9_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          vIN9_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string VIN_9 = 30;</code>
       */
      public com.google.protobuf.ByteString
          getVIN9Bytes() {
        java.lang.Object ref = vIN9_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vIN9_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string VIN_9 = 30;</code>
       */
      public Builder setVIN9(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x20000000;
        vIN9_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_9 = 30;</code>
       */
      public Builder clearVIN9() {
        bitField0_ = (bitField0_ & ~0x20000000);
        vIN9_ = getDefaultInstance().getVIN9();
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_9 = 30;</code>
       */
      public Builder setVIN9Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x20000000;
        vIN9_ = value;
        onChanged();
        return this;
      }

      // required string VIN_10 = 31;
      private java.lang.Object vIN10_ = "";
      /**
       * <code>required string VIN_10 = 31;</code>
       */
      public boolean hasVIN10() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>required string VIN_10 = 31;</code>
       */
      public java.lang.String getVIN10() {
        java.lang.Object ref = vIN10_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          vIN10_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string VIN_10 = 31;</code>
       */
      public com.google.protobuf.ByteString
          getVIN10Bytes() {
        java.lang.Object ref = vIN10_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vIN10_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string VIN_10 = 31;</code>
       */
      public Builder setVIN10(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x40000000;
        vIN10_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_10 = 31;</code>
       */
      public Builder clearVIN10() {
        bitField0_ = (bitField0_ & ~0x40000000);
        vIN10_ = getDefaultInstance().getVIN10();
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_10 = 31;</code>
       */
      public Builder setVIN10Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x40000000;
        vIN10_ = value;
        onChanged();
        return this;
      }

      // required string VIN_11 = 32;
      private java.lang.Object vIN11_ = "";
      /**
       * <code>required string VIN_11 = 32;</code>
       */
      public boolean hasVIN11() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>required string VIN_11 = 32;</code>
       */
      public java.lang.String getVIN11() {
        java.lang.Object ref = vIN11_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          vIN11_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string VIN_11 = 32;</code>
       */
      public com.google.protobuf.ByteString
          getVIN11Bytes() {
        java.lang.Object ref = vIN11_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vIN11_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string VIN_11 = 32;</code>
       */
      public Builder setVIN11(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x80000000;
        vIN11_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_11 = 32;</code>
       */
      public Builder clearVIN11() {
        bitField0_ = (bitField0_ & ~0x80000000);
        vIN11_ = getDefaultInstance().getVIN11();
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_11 = 32;</code>
       */
      public Builder setVIN11Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x80000000;
        vIN11_ = value;
        onChanged();
        return this;
      }

      // required string VIN_12 = 33;
      private java.lang.Object vIN12_ = "";
      /**
       * <code>required string VIN_12 = 33;</code>
       */
      public boolean hasVIN12() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string VIN_12 = 33;</code>
       */
      public java.lang.String getVIN12() {
        java.lang.Object ref = vIN12_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          vIN12_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string VIN_12 = 33;</code>
       */
      public com.google.protobuf.ByteString
          getVIN12Bytes() {
        java.lang.Object ref = vIN12_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vIN12_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string VIN_12 = 33;</code>
       */
      public Builder setVIN12(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000001;
        vIN12_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_12 = 33;</code>
       */
      public Builder clearVIN12() {
        bitField1_ = (bitField1_ & ~0x00000001);
        vIN12_ = getDefaultInstance().getVIN12();
        onChanged();
        return this;
      }
      /**
       * <code>required string VIN_12 = 33;</code>
       */
      public Builder setVIN12Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000001;
        vIN12_ = value;
        onChanged();
        return this;
      }

      // required int32 TOW_VEH = 34;
      private int tOWVEH_ ;
      /**
       * <code>required int32 TOW_VEH = 34;</code>
       */
      public boolean hasTOWVEH() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 TOW_VEH = 34;</code>
       */
      public int getTOWVEH() {
        return tOWVEH_;
      }
      /**
       * <code>required int32 TOW_VEH = 34;</code>
       */
      public Builder setTOWVEH(int value) {
        bitField1_ |= 0x00000002;
        tOWVEH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 TOW_VEH = 34;</code>
       */
      public Builder clearTOWVEH() {
        bitField1_ = (bitField1_ & ~0x00000002);
        tOWVEH_ = 0;
        onChanged();
        return this;
      }

      // required int32 J_KNIFE = 35;
      private int jKNIFE_ ;
      /**
       * <code>required int32 J_KNIFE = 35;</code>
       */
      public boolean hasJKNIFE() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 J_KNIFE = 35;</code>
       */
      public int getJKNIFE() {
        return jKNIFE_;
      }
      /**
       * <code>required int32 J_KNIFE = 35;</code>
       */
      public Builder setJKNIFE(int value) {
        bitField1_ |= 0x00000004;
        jKNIFE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 J_KNIFE = 35;</code>
       */
      public Builder clearJKNIFE() {
        bitField1_ = (bitField1_ & ~0x00000004);
        jKNIFE_ = 0;
        onChanged();
        return this;
      }

      // required string MCARR_I1 = 36;
      private java.lang.Object mCARRI1_ = "";
      /**
       * <code>required string MCARR_I1 = 36;</code>
       */
      public boolean hasMCARRI1() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required string MCARR_I1 = 36;</code>
       */
      public java.lang.String getMCARRI1() {
        java.lang.Object ref = mCARRI1_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          mCARRI1_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string MCARR_I1 = 36;</code>
       */
      public com.google.protobuf.ByteString
          getMCARRI1Bytes() {
        java.lang.Object ref = mCARRI1_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mCARRI1_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string MCARR_I1 = 36;</code>
       */
      public Builder setMCARRI1(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000008;
        mCARRI1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string MCARR_I1 = 36;</code>
       */
      public Builder clearMCARRI1() {
        bitField1_ = (bitField1_ & ~0x00000008);
        mCARRI1_ = getDefaultInstance().getMCARRI1();
        onChanged();
        return this;
      }
      /**
       * <code>required string MCARR_I1 = 36;</code>
       */
      public Builder setMCARRI1Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000008;
        mCARRI1_ = value;
        onChanged();
        return this;
      }

      // required string MCARR_I2 = 37;
      private java.lang.Object mCARRI2_ = "";
      /**
       * <code>required string MCARR_I2 = 37;</code>
       */
      public boolean hasMCARRI2() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required string MCARR_I2 = 37;</code>
       */
      public java.lang.String getMCARRI2() {
        java.lang.Object ref = mCARRI2_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          mCARRI2_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string MCARR_I2 = 37;</code>
       */
      public com.google.protobuf.ByteString
          getMCARRI2Bytes() {
        java.lang.Object ref = mCARRI2_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mCARRI2_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string MCARR_I2 = 37;</code>
       */
      public Builder setMCARRI2(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000010;
        mCARRI2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string MCARR_I2 = 37;</code>
       */
      public Builder clearMCARRI2() {
        bitField1_ = (bitField1_ & ~0x00000010);
        mCARRI2_ = getDefaultInstance().getMCARRI2();
        onChanged();
        return this;
      }
      /**
       * <code>required string MCARR_I2 = 37;</code>
       */
      public Builder setMCARRI2Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000010;
        mCARRI2_ = value;
        onChanged();
        return this;
      }

      // required string MCARR_ID = 38;
      private java.lang.Object mCARRID_ = "";
      /**
       * <code>required string MCARR_ID = 38;</code>
       */
      public boolean hasMCARRID() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required string MCARR_ID = 38;</code>
       */
      public java.lang.String getMCARRID() {
        java.lang.Object ref = mCARRID_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          mCARRID_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string MCARR_ID = 38;</code>
       */
      public com.google.protobuf.ByteString
          getMCARRIDBytes() {
        java.lang.Object ref = mCARRID_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mCARRID_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string MCARR_ID = 38;</code>
       */
      public Builder setMCARRID(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000020;
        mCARRID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string MCARR_ID = 38;</code>
       */
      public Builder clearMCARRID() {
        bitField1_ = (bitField1_ & ~0x00000020);
        mCARRID_ = getDefaultInstance().getMCARRID();
        onChanged();
        return this;
      }
      /**
       * <code>required string MCARR_ID = 38;</code>
       */
      public Builder setMCARRIDBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField1_ |= 0x00000020;
        mCARRID_ = value;
        onChanged();
        return this;
      }

      // required int32 GVWR = 39;
      private int gVWR_ ;
      /**
       * <code>required int32 GVWR = 39;</code>
       */
      public boolean hasGVWR() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 GVWR = 39;</code>
       */
      public int getGVWR() {
        return gVWR_;
      }
      /**
       * <code>required int32 GVWR = 39;</code>
       */
      public Builder setGVWR(int value) {
        bitField1_ |= 0x00000040;
        gVWR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 GVWR = 39;</code>
       */
      public Builder clearGVWR() {
        bitField1_ = (bitField1_ & ~0x00000040);
        gVWR_ = 0;
        onChanged();
        return this;
      }

      // required int32 V_CONFIG = 40;
      private int vCONFIG_ ;
      /**
       * <code>required int32 V_CONFIG = 40;</code>
       */
      public boolean hasVCONFIG() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required int32 V_CONFIG = 40;</code>
       */
      public int getVCONFIG() {
        return vCONFIG_;
      }
      /**
       * <code>required int32 V_CONFIG = 40;</code>
       */
      public Builder setVCONFIG(int value) {
        bitField1_ |= 0x00000080;
        vCONFIG_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 V_CONFIG = 40;</code>
       */
      public Builder clearVCONFIG() {
        bitField1_ = (bitField1_ & ~0x00000080);
        vCONFIG_ = 0;
        onChanged();
        return this;
      }

      // required int32 CARGO_BT = 41;
      private int cARGOBT_ ;
      /**
       * <code>required int32 CARGO_BT = 41;</code>
       */
      public boolean hasCARGOBT() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required int32 CARGO_BT = 41;</code>
       */
      public int getCARGOBT() {
        return cARGOBT_;
      }
      /**
       * <code>required int32 CARGO_BT = 41;</code>
       */
      public Builder setCARGOBT(int value) {
        bitField1_ |= 0x00000100;
        cARGOBT_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 CARGO_BT = 41;</code>
       */
      public Builder clearCARGOBT() {
        bitField1_ = (bitField1_ & ~0x00000100);
        cARGOBT_ = 0;
        onChanged();
        return this;
      }

      // required int32 HAZ_INV = 42;
      private int hAZINV_ ;
      /**
       * <code>required int32 HAZ_INV = 42;</code>
       */
      public boolean hasHAZINV() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required int32 HAZ_INV = 42;</code>
       */
      public int getHAZINV() {
        return hAZINV_;
      }
      /**
       * <code>required int32 HAZ_INV = 42;</code>
       */
      public Builder setHAZINV(int value) {
        bitField1_ |= 0x00000200;
        hAZINV_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 HAZ_INV = 42;</code>
       */
      public Builder clearHAZINV() {
        bitField1_ = (bitField1_ & ~0x00000200);
        hAZINV_ = 0;
        onChanged();
        return this;
      }

      // required int32 HAZ_PLAC = 43;
      private int hAZPLAC_ ;
      /**
       * <code>required int32 HAZ_PLAC = 43;</code>
       */
      public boolean hasHAZPLAC() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required int32 HAZ_PLAC = 43;</code>
       */
      public int getHAZPLAC() {
        return hAZPLAC_;
      }
      /**
       * <code>required int32 HAZ_PLAC = 43;</code>
       */
      public Builder setHAZPLAC(int value) {
        bitField1_ |= 0x00000400;
        hAZPLAC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 HAZ_PLAC = 43;</code>
       */
      public Builder clearHAZPLAC() {
        bitField1_ = (bitField1_ & ~0x00000400);
        hAZPLAC_ = 0;
        onChanged();
        return this;
      }

      // required int32 HAZ_ID = 44;
      private int hAZID_ ;
      /**
       * <code>required int32 HAZ_ID = 44;</code>
       */
      public boolean hasHAZID() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required int32 HAZ_ID = 44;</code>
       */
      public int getHAZID() {
        return hAZID_;
      }
      /**
       * <code>required int32 HAZ_ID = 44;</code>
       */
      public Builder setHAZID(int value) {
        bitField1_ |= 0x00000800;
        hAZID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 HAZ_ID = 44;</code>
       */
      public Builder clearHAZID() {
        bitField1_ = (bitField1_ & ~0x00000800);
        hAZID_ = 0;
        onChanged();
        return this;
      }

      // required int32 HAZ_CNO = 45;
      private int hAZCNO_ ;
      /**
       * <code>required int32 HAZ_CNO = 45;</code>
       */
      public boolean hasHAZCNO() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required int32 HAZ_CNO = 45;</code>
       */
      public int getHAZCNO() {
        return hAZCNO_;
      }
      /**
       * <code>required int32 HAZ_CNO = 45;</code>
       */
      public Builder setHAZCNO(int value) {
        bitField1_ |= 0x00001000;
        hAZCNO_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 HAZ_CNO = 45;</code>
       */
      public Builder clearHAZCNO() {
        bitField1_ = (bitField1_ & ~0x00001000);
        hAZCNO_ = 0;
        onChanged();
        return this;
      }

      // required int32 HAZ_REL = 46;
      private int hAZREL_ ;
      /**
       * <code>required int32 HAZ_REL = 46;</code>
       */
      public boolean hasHAZREL() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required int32 HAZ_REL = 46;</code>
       */
      public int getHAZREL() {
        return hAZREL_;
      }
      /**
       * <code>required int32 HAZ_REL = 46;</code>
       */
      public Builder setHAZREL(int value) {
        bitField1_ |= 0x00002000;
        hAZREL_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 HAZ_REL = 46;</code>
       */
      public Builder clearHAZREL() {
        bitField1_ = (bitField1_ & ~0x00002000);
        hAZREL_ = 0;
        onChanged();
        return this;
      }

      // required int32 BUS_USE = 47;
      private int bUSUSE_ ;
      /**
       * <code>required int32 BUS_USE = 47;</code>
       */
      public boolean hasBUSUSE() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>required int32 BUS_USE = 47;</code>
       */
      public int getBUSUSE() {
        return bUSUSE_;
      }
      /**
       * <code>required int32 BUS_USE = 47;</code>
       */
      public Builder setBUSUSE(int value) {
        bitField1_ |= 0x00004000;
        bUSUSE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 BUS_USE = 47;</code>
       */
      public Builder clearBUSUSE() {
        bitField1_ = (bitField1_ & ~0x00004000);
        bUSUSE_ = 0;
        onChanged();
        return this;
      }

      // required int32 SPEC_USE = 48;
      private int sPECUSE_ ;
      /**
       * <code>required int32 SPEC_USE = 48;</code>
       */
      public boolean hasSPECUSE() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>required int32 SPEC_USE = 48;</code>
       */
      public int getSPECUSE() {
        return sPECUSE_;
      }
      /**
       * <code>required int32 SPEC_USE = 48;</code>
       */
      public Builder setSPECUSE(int value) {
        bitField1_ |= 0x00008000;
        sPECUSE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 SPEC_USE = 48;</code>
       */
      public Builder clearSPECUSE() {
        bitField1_ = (bitField1_ & ~0x00008000);
        sPECUSE_ = 0;
        onChanged();
        return this;
      }

      // required int32 EMER_USE = 49;
      private int eMERUSE_ ;
      /**
       * <code>required int32 EMER_USE = 49;</code>
       */
      public boolean hasEMERUSE() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>required int32 EMER_USE = 49;</code>
       */
      public int getEMERUSE() {
        return eMERUSE_;
      }
      /**
       * <code>required int32 EMER_USE = 49;</code>
       */
      public Builder setEMERUSE(int value) {
        bitField1_ |= 0x00010000;
        eMERUSE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 EMER_USE = 49;</code>
       */
      public Builder clearEMERUSE() {
        bitField1_ = (bitField1_ & ~0x00010000);
        eMERUSE_ = 0;
        onChanged();
        return this;
      }

      // required int32 TRAV_SP = 50;
      private int tRAVSP_ ;
      /**
       * <code>required int32 TRAV_SP = 50;</code>
       */
      public boolean hasTRAVSP() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>required int32 TRAV_SP = 50;</code>
       */
      public int getTRAVSP() {
        return tRAVSP_;
      }
      /**
       * <code>required int32 TRAV_SP = 50;</code>
       */
      public Builder setTRAVSP(int value) {
        bitField1_ |= 0x00020000;
        tRAVSP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 TRAV_SP = 50;</code>
       */
      public Builder clearTRAVSP() {
        bitField1_ = (bitField1_ & ~0x00020000);
        tRAVSP_ = 0;
        onChanged();
        return this;
      }

      // required int32 UNDERIDE = 51;
      private int uNDERIDE_ ;
      /**
       * <code>required int32 UNDERIDE = 51;</code>
       */
      public boolean hasUNDERIDE() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>required int32 UNDERIDE = 51;</code>
       */
      public int getUNDERIDE() {
        return uNDERIDE_;
      }
      /**
       * <code>required int32 UNDERIDE = 51;</code>
       */
      public Builder setUNDERIDE(int value) {
        bitField1_ |= 0x00040000;
        uNDERIDE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 UNDERIDE = 51;</code>
       */
      public Builder clearUNDERIDE() {
        bitField1_ = (bitField1_ & ~0x00040000);
        uNDERIDE_ = 0;
        onChanged();
        return this;
      }

      // required int32 ROLLOVER = 52;
      private int rOLLOVER_ ;
      /**
       * <code>required int32 ROLLOVER = 52;</code>
       */
      public boolean hasROLLOVER() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>required int32 ROLLOVER = 52;</code>
       */
      public int getROLLOVER() {
        return rOLLOVER_;
      }
      /**
       * <code>required int32 ROLLOVER = 52;</code>
       */
      public Builder setROLLOVER(int value) {
        bitField1_ |= 0x00080000;
        rOLLOVER_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 ROLLOVER = 52;</code>
       */
      public Builder clearROLLOVER() {
        bitField1_ = (bitField1_ & ~0x00080000);
        rOLLOVER_ = 0;
        onChanged();
        return this;
      }

      // required int32 ROLINLOC = 53;
      private int rOLINLOC_ ;
      /**
       * <code>required int32 ROLINLOC = 53;</code>
       */
      public boolean hasROLINLOC() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>required int32 ROLINLOC = 53;</code>
       */
      public int getROLINLOC() {
        return rOLINLOC_;
      }
      /**
       * <code>required int32 ROLINLOC = 53;</code>
       */
      public Builder setROLINLOC(int value) {
        bitField1_ |= 0x00100000;
        rOLINLOC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 ROLINLOC = 53;</code>
       */
      public Builder clearROLINLOC() {
        bitField1_ = (bitField1_ & ~0x00100000);
        rOLINLOC_ = 0;
        onChanged();
        return this;
      }

      // required int32 IMPACT1 = 54;
      private int iMPACT1_ ;
      /**
       * <code>required int32 IMPACT1 = 54;</code>
       */
      public boolean hasIMPACT1() {
        return ((bitField1_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>required int32 IMPACT1 = 54;</code>
       */
      public int getIMPACT1() {
        return iMPACT1_;
      }
      /**
       * <code>required int32 IMPACT1 = 54;</code>
       */
      public Builder setIMPACT1(int value) {
        bitField1_ |= 0x00200000;
        iMPACT1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 IMPACT1 = 54;</code>
       */
      public Builder clearIMPACT1() {
        bitField1_ = (bitField1_ & ~0x00200000);
        iMPACT1_ = 0;
        onChanged();
        return this;
      }

      // required int32 DEFORMED = 55;
      private int dEFORMED_ ;
      /**
       * <code>required int32 DEFORMED = 55;</code>
       */
      public boolean hasDEFORMED() {
        return ((bitField1_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>required int32 DEFORMED = 55;</code>
       */
      public int getDEFORMED() {
        return dEFORMED_;
      }
      /**
       * <code>required int32 DEFORMED = 55;</code>
       */
      public Builder setDEFORMED(int value) {
        bitField1_ |= 0x00400000;
        dEFORMED_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 DEFORMED = 55;</code>
       */
      public Builder clearDEFORMED() {
        bitField1_ = (bitField1_ & ~0x00400000);
        dEFORMED_ = 0;
        onChanged();
        return this;
      }

      // required int32 TOWED = 56;
      private int tOWED_ ;
      /**
       * <code>required int32 TOWED = 56;</code>
       */
      public boolean hasTOWED() {
        return ((bitField1_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>required int32 TOWED = 56;</code>
       */
      public int getTOWED() {
        return tOWED_;
      }
      /**
       * <code>required int32 TOWED = 56;</code>
       */
      public Builder setTOWED(int value) {
        bitField1_ |= 0x00800000;
        tOWED_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 TOWED = 56;</code>
       */
      public Builder clearTOWED() {
        bitField1_ = (bitField1_ & ~0x00800000);
        tOWED_ = 0;
        onChanged();
        return this;
      }

      // required int32 M_HARM = 57;
      private int mHARM_ ;
      /**
       * <code>required int32 M_HARM = 57;</code>
       */
      public boolean hasMHARM() {
        return ((bitField1_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>required int32 M_HARM = 57;</code>
       */
      public int getMHARM() {
        return mHARM_;
      }
      /**
       * <code>required int32 M_HARM = 57;</code>
       */
      public Builder setMHARM(int value) {
        bitField1_ |= 0x01000000;
        mHARM_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 M_HARM = 57;</code>
       */
      public Builder clearMHARM() {
        bitField1_ = (bitField1_ & ~0x01000000);
        mHARM_ = 0;
        onChanged();
        return this;
      }

      // required int32 VEH_SC1 = 58;
      private int vEHSC1_ ;
      /**
       * <code>required int32 VEH_SC1 = 58;</code>
       */
      public boolean hasVEHSC1() {
        return ((bitField1_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>required int32 VEH_SC1 = 58;</code>
       */
      public int getVEHSC1() {
        return vEHSC1_;
      }
      /**
       * <code>required int32 VEH_SC1 = 58;</code>
       */
      public Builder setVEHSC1(int value) {
        bitField1_ |= 0x02000000;
        vEHSC1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VEH_SC1 = 58;</code>
       */
      public Builder clearVEHSC1() {
        bitField1_ = (bitField1_ & ~0x02000000);
        vEHSC1_ = 0;
        onChanged();
        return this;
      }

      // required int32 VEH_SC2 = 59;
      private int vEHSC2_ ;
      /**
       * <code>required int32 VEH_SC2 = 59;</code>
       */
      public boolean hasVEHSC2() {
        return ((bitField1_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>required int32 VEH_SC2 = 59;</code>
       */
      public int getVEHSC2() {
        return vEHSC2_;
      }
      /**
       * <code>required int32 VEH_SC2 = 59;</code>
       */
      public Builder setVEHSC2(int value) {
        bitField1_ |= 0x04000000;
        vEHSC2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VEH_SC2 = 59;</code>
       */
      public Builder clearVEHSC2() {
        bitField1_ = (bitField1_ & ~0x04000000);
        vEHSC2_ = 0;
        onChanged();
        return this;
      }

      // required int32 FIRE_EXP = 60;
      private int fIREEXP_ ;
      /**
       * <code>required int32 FIRE_EXP = 60;</code>
       */
      public boolean hasFIREEXP() {
        return ((bitField1_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>required int32 FIRE_EXP = 60;</code>
       */
      public int getFIREEXP() {
        return fIREEXP_;
      }
      /**
       * <code>required int32 FIRE_EXP = 60;</code>
       */
      public Builder setFIREEXP(int value) {
        bitField1_ |= 0x08000000;
        fIREEXP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 FIRE_EXP = 60;</code>
       */
      public Builder clearFIREEXP() {
        bitField1_ = (bitField1_ & ~0x08000000);
        fIREEXP_ = 0;
        onChanged();
        return this;
      }

      // required int32 DR_PRES = 61;
      private int dRPRES_ ;
      /**
       * <code>required int32 DR_PRES = 61;</code>
       */
      public boolean hasDRPRES() {
        return ((bitField1_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>required int32 DR_PRES = 61;</code>
       */
      public int getDRPRES() {
        return dRPRES_;
      }
      /**
       * <code>required int32 DR_PRES = 61;</code>
       */
      public Builder setDRPRES(int value) {
        bitField1_ |= 0x10000000;
        dRPRES_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 DR_PRES = 61;</code>
       */
      public Builder clearDRPRES() {
        bitField1_ = (bitField1_ & ~0x10000000);
        dRPRES_ = 0;
        onChanged();
        return this;
      }

      // required int32 L_STATE = 62;
      private int lSTATE_ ;
      /**
       * <code>required int32 L_STATE = 62;</code>
       */
      public boolean hasLSTATE() {
        return ((bitField1_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>required int32 L_STATE = 62;</code>
       */
      public int getLSTATE() {
        return lSTATE_;
      }
      /**
       * <code>required int32 L_STATE = 62;</code>
       */
      public Builder setLSTATE(int value) {
        bitField1_ |= 0x20000000;
        lSTATE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 L_STATE = 62;</code>
       */
      public Builder clearLSTATE() {
        bitField1_ = (bitField1_ & ~0x20000000);
        lSTATE_ = 0;
        onChanged();
        return this;
      }

      // required int32 DR_ZIP = 63;
      private int dRZIP_ ;
      /**
       * <code>required int32 DR_ZIP = 63;</code>
       */
      public boolean hasDRZIP() {
        return ((bitField1_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>required int32 DR_ZIP = 63;</code>
       */
      public int getDRZIP() {
        return dRZIP_;
      }
      /**
       * <code>required int32 DR_ZIP = 63;</code>
       */
      public Builder setDRZIP(int value) {
        bitField1_ |= 0x40000000;
        dRZIP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 DR_ZIP = 63;</code>
       */
      public Builder clearDRZIP() {
        bitField1_ = (bitField1_ & ~0x40000000);
        dRZIP_ = 0;
        onChanged();
        return this;
      }

      // required int32 L_STATUS = 64;
      private int lSTATUS_ ;
      /**
       * <code>required int32 L_STATUS = 64;</code>
       */
      public boolean hasLSTATUS() {
        return ((bitField1_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>required int32 L_STATUS = 64;</code>
       */
      public int getLSTATUS() {
        return lSTATUS_;
      }
      /**
       * <code>required int32 L_STATUS = 64;</code>
       */
      public Builder setLSTATUS(int value) {
        bitField1_ |= 0x80000000;
        lSTATUS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 L_STATUS = 64;</code>
       */
      public Builder clearLSTATUS() {
        bitField1_ = (bitField1_ & ~0x80000000);
        lSTATUS_ = 0;
        onChanged();
        return this;
      }

      // required int32 L_TYPE = 65;
      private int lTYPE_ ;
      /**
       * <code>required int32 L_TYPE = 65;</code>
       */
      public boolean hasLTYPE() {
        return ((bitField2_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 L_TYPE = 65;</code>
       */
      public int getLTYPE() {
        return lTYPE_;
      }
      /**
       * <code>required int32 L_TYPE = 65;</code>
       */
      public Builder setLTYPE(int value) {
        bitField2_ |= 0x00000001;
        lTYPE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 L_TYPE = 65;</code>
       */
      public Builder clearLTYPE() {
        bitField2_ = (bitField2_ & ~0x00000001);
        lTYPE_ = 0;
        onChanged();
        return this;
      }

      // required int32 CDL_STAT = 66;
      private int cDLSTAT_ ;
      /**
       * <code>required int32 CDL_STAT = 66;</code>
       */
      public boolean hasCDLSTAT() {
        return ((bitField2_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 CDL_STAT = 66;</code>
       */
      public int getCDLSTAT() {
        return cDLSTAT_;
      }
      /**
       * <code>required int32 CDL_STAT = 66;</code>
       */
      public Builder setCDLSTAT(int value) {
        bitField2_ |= 0x00000002;
        cDLSTAT_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 CDL_STAT = 66;</code>
       */
      public Builder clearCDLSTAT() {
        bitField2_ = (bitField2_ & ~0x00000002);
        cDLSTAT_ = 0;
        onChanged();
        return this;
      }

      // required int32 L_ENDORS = 67;
      private int lENDORS_ ;
      /**
       * <code>required int32 L_ENDORS = 67;</code>
       */
      public boolean hasLENDORS() {
        return ((bitField2_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 L_ENDORS = 67;</code>
       */
      public int getLENDORS() {
        return lENDORS_;
      }
      /**
       * <code>required int32 L_ENDORS = 67;</code>
       */
      public Builder setLENDORS(int value) {
        bitField2_ |= 0x00000004;
        lENDORS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 L_ENDORS = 67;</code>
       */
      public Builder clearLENDORS() {
        bitField2_ = (bitField2_ & ~0x00000004);
        lENDORS_ = 0;
        onChanged();
        return this;
      }

      // required int32 L_COMPL = 68;
      private int lCOMPL_ ;
      /**
       * <code>required int32 L_COMPL = 68;</code>
       */
      public boolean hasLCOMPL() {
        return ((bitField2_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 L_COMPL = 68;</code>
       */
      public int getLCOMPL() {
        return lCOMPL_;
      }
      /**
       * <code>required int32 L_COMPL = 68;</code>
       */
      public Builder setLCOMPL(int value) {
        bitField2_ |= 0x00000008;
        lCOMPL_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 L_COMPL = 68;</code>
       */
      public Builder clearLCOMPL() {
        bitField2_ = (bitField2_ & ~0x00000008);
        lCOMPL_ = 0;
        onChanged();
        return this;
      }

      // required int32 L_RESTRI = 69;
      private int lRESTRI_ ;
      /**
       * <code>required int32 L_RESTRI = 69;</code>
       */
      public boolean hasLRESTRI() {
        return ((bitField2_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 L_RESTRI = 69;</code>
       */
      public int getLRESTRI() {
        return lRESTRI_;
      }
      /**
       * <code>required int32 L_RESTRI = 69;</code>
       */
      public Builder setLRESTRI(int value) {
        bitField2_ |= 0x00000010;
        lRESTRI_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 L_RESTRI = 69;</code>
       */
      public Builder clearLRESTRI() {
        bitField2_ = (bitField2_ & ~0x00000010);
        lRESTRI_ = 0;
        onChanged();
        return this;
      }

      // required int32 DR_HGT = 70;
      private int dRHGT_ ;
      /**
       * <code>required int32 DR_HGT = 70;</code>
       */
      public boolean hasDRHGT() {
        return ((bitField2_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 DR_HGT = 70;</code>
       */
      public int getDRHGT() {
        return dRHGT_;
      }
      /**
       * <code>required int32 DR_HGT = 70;</code>
       */
      public Builder setDRHGT(int value) {
        bitField2_ |= 0x00000020;
        dRHGT_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 DR_HGT = 70;</code>
       */
      public Builder clearDRHGT() {
        bitField2_ = (bitField2_ & ~0x00000020);
        dRHGT_ = 0;
        onChanged();
        return this;
      }

      // required int32 DR_WGT = 71;
      private int dRWGT_ ;
      /**
       * <code>required int32 DR_WGT = 71;</code>
       */
      public boolean hasDRWGT() {
        return ((bitField2_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 DR_WGT = 71;</code>
       */
      public int getDRWGT() {
        return dRWGT_;
      }
      /**
       * <code>required int32 DR_WGT = 71;</code>
       */
      public Builder setDRWGT(int value) {
        bitField2_ |= 0x00000040;
        dRWGT_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 DR_WGT = 71;</code>
       */
      public Builder clearDRWGT() {
        bitField2_ = (bitField2_ & ~0x00000040);
        dRWGT_ = 0;
        onChanged();
        return this;
      }

      // required int32 PREV_ACC = 72;
      private int pREVACC_ ;
      /**
       * <code>required int32 PREV_ACC = 72;</code>
       */
      public boolean hasPREVACC() {
        return ((bitField2_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required int32 PREV_ACC = 72;</code>
       */
      public int getPREVACC() {
        return pREVACC_;
      }
      /**
       * <code>required int32 PREV_ACC = 72;</code>
       */
      public Builder setPREVACC(int value) {
        bitField2_ |= 0x00000080;
        pREVACC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 PREV_ACC = 72;</code>
       */
      public Builder clearPREVACC() {
        bitField2_ = (bitField2_ & ~0x00000080);
        pREVACC_ = 0;
        onChanged();
        return this;
      }

      // required int32 PREV_SUS = 73;
      private int pREVSUS_ ;
      /**
       * <code>required int32 PREV_SUS = 73;</code>
       */
      public boolean hasPREVSUS() {
        return ((bitField2_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required int32 PREV_SUS = 73;</code>
       */
      public int getPREVSUS() {
        return pREVSUS_;
      }
      /**
       * <code>required int32 PREV_SUS = 73;</code>
       */
      public Builder setPREVSUS(int value) {
        bitField2_ |= 0x00000100;
        pREVSUS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 PREV_SUS = 73;</code>
       */
      public Builder clearPREVSUS() {
        bitField2_ = (bitField2_ & ~0x00000100);
        pREVSUS_ = 0;
        onChanged();
        return this;
      }

      // required int32 PREV_DWI = 74;
      private int pREVDWI_ ;
      /**
       * <code>required int32 PREV_DWI = 74;</code>
       */
      public boolean hasPREVDWI() {
        return ((bitField2_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required int32 PREV_DWI = 74;</code>
       */
      public int getPREVDWI() {
        return pREVDWI_;
      }
      /**
       * <code>required int32 PREV_DWI = 74;</code>
       */
      public Builder setPREVDWI(int value) {
        bitField2_ |= 0x00000200;
        pREVDWI_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 PREV_DWI = 74;</code>
       */
      public Builder clearPREVDWI() {
        bitField2_ = (bitField2_ & ~0x00000200);
        pREVDWI_ = 0;
        onChanged();
        return this;
      }

      // required int32 PREV_SPD = 75;
      private int pREVSPD_ ;
      /**
       * <code>required int32 PREV_SPD = 75;</code>
       */
      public boolean hasPREVSPD() {
        return ((bitField2_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required int32 PREV_SPD = 75;</code>
       */
      public int getPREVSPD() {
        return pREVSPD_;
      }
      /**
       * <code>required int32 PREV_SPD = 75;</code>
       */
      public Builder setPREVSPD(int value) {
        bitField2_ |= 0x00000400;
        pREVSPD_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 PREV_SPD = 75;</code>
       */
      public Builder clearPREVSPD() {
        bitField2_ = (bitField2_ & ~0x00000400);
        pREVSPD_ = 0;
        onChanged();
        return this;
      }

      // required int32 PREV_OTH = 76;
      private int pREVOTH_ ;
      /**
       * <code>required int32 PREV_OTH = 76;</code>
       */
      public boolean hasPREVOTH() {
        return ((bitField2_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required int32 PREV_OTH = 76;</code>
       */
      public int getPREVOTH() {
        return pREVOTH_;
      }
      /**
       * <code>required int32 PREV_OTH = 76;</code>
       */
      public Builder setPREVOTH(int value) {
        bitField2_ |= 0x00000800;
        pREVOTH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 PREV_OTH = 76;</code>
       */
      public Builder clearPREVOTH() {
        bitField2_ = (bitField2_ & ~0x00000800);
        pREVOTH_ = 0;
        onChanged();
        return this;
      }

      // required int32 FIRST_MO = 77;
      private int fIRSTMO_ ;
      /**
       * <code>required int32 FIRST_MO = 77;</code>
       */
      public boolean hasFIRSTMO() {
        return ((bitField2_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required int32 FIRST_MO = 77;</code>
       */
      public int getFIRSTMO() {
        return fIRSTMO_;
      }
      /**
       * <code>required int32 FIRST_MO = 77;</code>
       */
      public Builder setFIRSTMO(int value) {
        bitField2_ |= 0x00001000;
        fIRSTMO_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 FIRST_MO = 77;</code>
       */
      public Builder clearFIRSTMO() {
        bitField2_ = (bitField2_ & ~0x00001000);
        fIRSTMO_ = 0;
        onChanged();
        return this;
      }

      // required int32 FIRST_YR = 78;
      private int fIRSTYR_ ;
      /**
       * <code>required int32 FIRST_YR = 78;</code>
       */
      public boolean hasFIRSTYR() {
        return ((bitField2_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required int32 FIRST_YR = 78;</code>
       */
      public int getFIRSTYR() {
        return fIRSTYR_;
      }
      /**
       * <code>required int32 FIRST_YR = 78;</code>
       */
      public Builder setFIRSTYR(int value) {
        bitField2_ |= 0x00002000;
        fIRSTYR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 FIRST_YR = 78;</code>
       */
      public Builder clearFIRSTYR() {
        bitField2_ = (bitField2_ & ~0x00002000);
        fIRSTYR_ = 0;
        onChanged();
        return this;
      }

      // required int32 LAST_MO = 79;
      private int lASTMO_ ;
      /**
       * <code>required int32 LAST_MO = 79;</code>
       */
      public boolean hasLASTMO() {
        return ((bitField2_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>required int32 LAST_MO = 79;</code>
       */
      public int getLASTMO() {
        return lASTMO_;
      }
      /**
       * <code>required int32 LAST_MO = 79;</code>
       */
      public Builder setLASTMO(int value) {
        bitField2_ |= 0x00004000;
        lASTMO_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 LAST_MO = 79;</code>
       */
      public Builder clearLASTMO() {
        bitField2_ = (bitField2_ & ~0x00004000);
        lASTMO_ = 0;
        onChanged();
        return this;
      }

      // required int32 LAST_YR = 80;
      private int lASTYR_ ;
      /**
       * <code>required int32 LAST_YR = 80;</code>
       */
      public boolean hasLASTYR() {
        return ((bitField2_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>required int32 LAST_YR = 80;</code>
       */
      public int getLASTYR() {
        return lASTYR_;
      }
      /**
       * <code>required int32 LAST_YR = 80;</code>
       */
      public Builder setLASTYR(int value) {
        bitField2_ |= 0x00008000;
        lASTYR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 LAST_YR = 80;</code>
       */
      public Builder clearLASTYR() {
        bitField2_ = (bitField2_ & ~0x00008000);
        lASTYR_ = 0;
        onChanged();
        return this;
      }

      // required int32 SPEEDREL = 81;
      private int sPEEDREL_ ;
      /**
       * <code>required int32 SPEEDREL = 81;</code>
       */
      public boolean hasSPEEDREL() {
        return ((bitField2_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>required int32 SPEEDREL = 81;</code>
       */
      public int getSPEEDREL() {
        return sPEEDREL_;
      }
      /**
       * <code>required int32 SPEEDREL = 81;</code>
       */
      public Builder setSPEEDREL(int value) {
        bitField2_ |= 0x00010000;
        sPEEDREL_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 SPEEDREL = 81;</code>
       */
      public Builder clearSPEEDREL() {
        bitField2_ = (bitField2_ & ~0x00010000);
        sPEEDREL_ = 0;
        onChanged();
        return this;
      }

      // required int32 DR_SF1 = 82;
      private int dRSF1_ ;
      /**
       * <code>required int32 DR_SF1 = 82;</code>
       */
      public boolean hasDRSF1() {
        return ((bitField2_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>required int32 DR_SF1 = 82;</code>
       */
      public int getDRSF1() {
        return dRSF1_;
      }
      /**
       * <code>required int32 DR_SF1 = 82;</code>
       */
      public Builder setDRSF1(int value) {
        bitField2_ |= 0x00020000;
        dRSF1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 DR_SF1 = 82;</code>
       */
      public Builder clearDRSF1() {
        bitField2_ = (bitField2_ & ~0x00020000);
        dRSF1_ = 0;
        onChanged();
        return this;
      }

      // optional int32 DR_SF2 = 83;
      private int dRSF2_ ;
      /**
       * <code>optional int32 DR_SF2 = 83;</code>
       */
      public boolean hasDRSF2() {
        return ((bitField2_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 DR_SF2 = 83;</code>
       */
      public int getDRSF2() {
        return dRSF2_;
      }
      /**
       * <code>optional int32 DR_SF2 = 83;</code>
       */
      public Builder setDRSF2(int value) {
        bitField2_ |= 0x00040000;
        dRSF2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 DR_SF2 = 83;</code>
       */
      public Builder clearDRSF2() {
        bitField2_ = (bitField2_ & ~0x00040000);
        dRSF2_ = 0;
        onChanged();
        return this;
      }

      // optional int32 DR_SF3 = 84;
      private int dRSF3_ ;
      /**
       * <code>optional int32 DR_SF3 = 84;</code>
       */
      public boolean hasDRSF3() {
        return ((bitField2_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 DR_SF3 = 84;</code>
       */
      public int getDRSF3() {
        return dRSF3_;
      }
      /**
       * <code>optional int32 DR_SF3 = 84;</code>
       */
      public Builder setDRSF3(int value) {
        bitField2_ |= 0x00080000;
        dRSF3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 DR_SF3 = 84;</code>
       */
      public Builder clearDRSF3() {
        bitField2_ = (bitField2_ & ~0x00080000);
        dRSF3_ = 0;
        onChanged();
        return this;
      }

      // optional int32 DR_SF4 = 85;
      private int dRSF4_ ;
      /**
       * <code>optional int32 DR_SF4 = 85;</code>
       */
      public boolean hasDRSF4() {
        return ((bitField2_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 DR_SF4 = 85;</code>
       */
      public int getDRSF4() {
        return dRSF4_;
      }
      /**
       * <code>optional int32 DR_SF4 = 85;</code>
       */
      public Builder setDRSF4(int value) {
        bitField2_ |= 0x00100000;
        dRSF4_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 DR_SF4 = 85;</code>
       */
      public Builder clearDRSF4() {
        bitField2_ = (bitField2_ & ~0x00100000);
        dRSF4_ = 0;
        onChanged();
        return this;
      }

      // required int32 VTRAFWAY = 86;
      private int vTRAFWAY_ ;
      /**
       * <code>required int32 VTRAFWAY = 86;</code>
       */
      public boolean hasVTRAFWAY() {
        return ((bitField2_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>required int32 VTRAFWAY = 86;</code>
       */
      public int getVTRAFWAY() {
        return vTRAFWAY_;
      }
      /**
       * <code>required int32 VTRAFWAY = 86;</code>
       */
      public Builder setVTRAFWAY(int value) {
        bitField2_ |= 0x00200000;
        vTRAFWAY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VTRAFWAY = 86;</code>
       */
      public Builder clearVTRAFWAY() {
        bitField2_ = (bitField2_ & ~0x00200000);
        vTRAFWAY_ = 0;
        onChanged();
        return this;
      }

      // required int32 VNUM_LAN = 87;
      private int vNUMLAN_ ;
      /**
       * <code>required int32 VNUM_LAN = 87;</code>
       */
      public boolean hasVNUMLAN() {
        return ((bitField2_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>required int32 VNUM_LAN = 87;</code>
       */
      public int getVNUMLAN() {
        return vNUMLAN_;
      }
      /**
       * <code>required int32 VNUM_LAN = 87;</code>
       */
      public Builder setVNUMLAN(int value) {
        bitField2_ |= 0x00400000;
        vNUMLAN_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VNUM_LAN = 87;</code>
       */
      public Builder clearVNUMLAN() {
        bitField2_ = (bitField2_ & ~0x00400000);
        vNUMLAN_ = 0;
        onChanged();
        return this;
      }

      // required int32 VSPD_LIM = 88;
      private int vSPDLIM_ ;
      /**
       * <code>required int32 VSPD_LIM = 88;</code>
       */
      public boolean hasVSPDLIM() {
        return ((bitField2_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>required int32 VSPD_LIM = 88;</code>
       */
      public int getVSPDLIM() {
        return vSPDLIM_;
      }
      /**
       * <code>required int32 VSPD_LIM = 88;</code>
       */
      public Builder setVSPDLIM(int value) {
        bitField2_ |= 0x00800000;
        vSPDLIM_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VSPD_LIM = 88;</code>
       */
      public Builder clearVSPDLIM() {
        bitField2_ = (bitField2_ & ~0x00800000);
        vSPDLIM_ = 0;
        onChanged();
        return this;
      }

      // required int32 VALIGN = 89;
      private int vALIGN_ ;
      /**
       * <code>required int32 VALIGN = 89;</code>
       */
      public boolean hasVALIGN() {
        return ((bitField2_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>required int32 VALIGN = 89;</code>
       */
      public int getVALIGN() {
        return vALIGN_;
      }
      /**
       * <code>required int32 VALIGN = 89;</code>
       */
      public Builder setVALIGN(int value) {
        bitField2_ |= 0x01000000;
        vALIGN_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VALIGN = 89;</code>
       */
      public Builder clearVALIGN() {
        bitField2_ = (bitField2_ & ~0x01000000);
        vALIGN_ = 0;
        onChanged();
        return this;
      }

      // required int32 VPROFILE = 90;
      private int vPROFILE_ ;
      /**
       * <code>required int32 VPROFILE = 90;</code>
       */
      public boolean hasVPROFILE() {
        return ((bitField2_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>required int32 VPROFILE = 90;</code>
       */
      public int getVPROFILE() {
        return vPROFILE_;
      }
      /**
       * <code>required int32 VPROFILE = 90;</code>
       */
      public Builder setVPROFILE(int value) {
        bitField2_ |= 0x02000000;
        vPROFILE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VPROFILE = 90;</code>
       */
      public Builder clearVPROFILE() {
        bitField2_ = (bitField2_ & ~0x02000000);
        vPROFILE_ = 0;
        onChanged();
        return this;
      }

      // required int32 VPAVETYP = 91;
      private int vPAVETYP_ ;
      /**
       * <code>required int32 VPAVETYP = 91;</code>
       */
      public boolean hasVPAVETYP() {
        return ((bitField2_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>required int32 VPAVETYP = 91;</code>
       */
      public int getVPAVETYP() {
        return vPAVETYP_;
      }
      /**
       * <code>required int32 VPAVETYP = 91;</code>
       */
      public Builder setVPAVETYP(int value) {
        bitField2_ |= 0x04000000;
        vPAVETYP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VPAVETYP = 91;</code>
       */
      public Builder clearVPAVETYP() {
        bitField2_ = (bitField2_ & ~0x04000000);
        vPAVETYP_ = 0;
        onChanged();
        return this;
      }

      // required int32 VSURCOND = 92;
      private int vSURCOND_ ;
      /**
       * <code>required int32 VSURCOND = 92;</code>
       */
      public boolean hasVSURCOND() {
        return ((bitField2_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>required int32 VSURCOND = 92;</code>
       */
      public int getVSURCOND() {
        return vSURCOND_;
      }
      /**
       * <code>required int32 VSURCOND = 92;</code>
       */
      public Builder setVSURCOND(int value) {
        bitField2_ |= 0x08000000;
        vSURCOND_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VSURCOND = 92;</code>
       */
      public Builder clearVSURCOND() {
        bitField2_ = (bitField2_ & ~0x08000000);
        vSURCOND_ = 0;
        onChanged();
        return this;
      }

      // required int32 VTRAFCON = 93;
      private int vTRAFCON_ ;
      /**
       * <code>required int32 VTRAFCON = 93;</code>
       */
      public boolean hasVTRAFCON() {
        return ((bitField2_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>required int32 VTRAFCON = 93;</code>
       */
      public int getVTRAFCON() {
        return vTRAFCON_;
      }
      /**
       * <code>required int32 VTRAFCON = 93;</code>
       */
      public Builder setVTRAFCON(int value) {
        bitField2_ |= 0x10000000;
        vTRAFCON_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VTRAFCON = 93;</code>
       */
      public Builder clearVTRAFCON() {
        bitField2_ = (bitField2_ & ~0x10000000);
        vTRAFCON_ = 0;
        onChanged();
        return this;
      }

      // required int32 VTCONT_F = 94;
      private int vTCONTF_ ;
      /**
       * <code>required int32 VTCONT_F = 94;</code>
       */
      public boolean hasVTCONTF() {
        return ((bitField2_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>required int32 VTCONT_F = 94;</code>
       */
      public int getVTCONTF() {
        return vTCONTF_;
      }
      /**
       * <code>required int32 VTCONT_F = 94;</code>
       */
      public Builder setVTCONTF(int value) {
        bitField2_ |= 0x20000000;
        vTCONTF_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 VTCONT_F = 94;</code>
       */
      public Builder clearVTCONTF() {
        bitField2_ = (bitField2_ & ~0x20000000);
        vTCONTF_ = 0;
        onChanged();
        return this;
      }

      // required int32 P_CRASH1 = 95;
      private int pCRASH1_ ;
      /**
       * <code>required int32 P_CRASH1 = 95;</code>
       */
      public boolean hasPCRASH1() {
        return ((bitField2_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>required int32 P_CRASH1 = 95;</code>
       */
      public int getPCRASH1() {
        return pCRASH1_;
      }
      /**
       * <code>required int32 P_CRASH1 = 95;</code>
       */
      public Builder setPCRASH1(int value) {
        bitField2_ |= 0x40000000;
        pCRASH1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 P_CRASH1 = 95;</code>
       */
      public Builder clearPCRASH1() {
        bitField2_ = (bitField2_ & ~0x40000000);
        pCRASH1_ = 0;
        onChanged();
        return this;
      }

      // required int32 P_CRASH2 = 96;
      private int pCRASH2_ ;
      /**
       * <code>required int32 P_CRASH2 = 96;</code>
       */
      public boolean hasPCRASH2() {
        return ((bitField2_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>required int32 P_CRASH2 = 96;</code>
       */
      public int getPCRASH2() {
        return pCRASH2_;
      }
      /**
       * <code>required int32 P_CRASH2 = 96;</code>
       */
      public Builder setPCRASH2(int value) {
        bitField2_ |= 0x80000000;
        pCRASH2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 P_CRASH2 = 96;</code>
       */
      public Builder clearPCRASH2() {
        bitField2_ = (bitField2_ & ~0x80000000);
        pCRASH2_ = 0;
        onChanged();
        return this;
      }

      // required int32 P_CRASH3 = 97;
      private int pCRASH3_ ;
      /**
       * <code>required int32 P_CRASH3 = 97;</code>
       */
      public boolean hasPCRASH3() {
        return ((bitField3_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 P_CRASH3 = 97;</code>
       */
      public int getPCRASH3() {
        return pCRASH3_;
      }
      /**
       * <code>required int32 P_CRASH3 = 97;</code>
       */
      public Builder setPCRASH3(int value) {
        bitField3_ |= 0x00000001;
        pCRASH3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 P_CRASH3 = 97;</code>
       */
      public Builder clearPCRASH3() {
        bitField3_ = (bitField3_ & ~0x00000001);
        pCRASH3_ = 0;
        onChanged();
        return this;
      }

      // required int32 PCRASH4 = 98;
      private int pCRASH4_ ;
      /**
       * <code>required int32 PCRASH4 = 98;</code>
       */
      public boolean hasPCRASH4() {
        return ((bitField3_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 PCRASH4 = 98;</code>
       */
      public int getPCRASH4() {
        return pCRASH4_;
      }
      /**
       * <code>required int32 PCRASH4 = 98;</code>
       */
      public Builder setPCRASH4(int value) {
        bitField3_ |= 0x00000002;
        pCRASH4_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 PCRASH4 = 98;</code>
       */
      public Builder clearPCRASH4() {
        bitField3_ = (bitField3_ & ~0x00000002);
        pCRASH4_ = 0;
        onChanged();
        return this;
      }

      // required int32 PCRASH5 = 99;
      private int pCRASH5_ ;
      /**
       * <code>required int32 PCRASH5 = 99;</code>
       */
      public boolean hasPCRASH5() {
        return ((bitField3_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 PCRASH5 = 99;</code>
       */
      public int getPCRASH5() {
        return pCRASH5_;
      }
      /**
       * <code>required int32 PCRASH5 = 99;</code>
       */
      public Builder setPCRASH5(int value) {
        bitField3_ |= 0x00000004;
        pCRASH5_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 PCRASH5 = 99;</code>
       */
      public Builder clearPCRASH5() {
        bitField3_ = (bitField3_ & ~0x00000004);
        pCRASH5_ = 0;
        onChanged();
        return this;
      }

      // required int32 ACC_TYPE = 100;
      private int aCCTYPE_ ;
      /**
       * <code>required int32 ACC_TYPE = 100;</code>
       */
      public boolean hasACCTYPE() {
        return ((bitField3_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 ACC_TYPE = 100;</code>
       */
      public int getACCTYPE() {
        return aCCTYPE_;
      }
      /**
       * <code>required int32 ACC_TYPE = 100;</code>
       */
      public Builder setACCTYPE(int value) {
        bitField3_ |= 0x00000008;
        aCCTYPE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 ACC_TYPE = 100;</code>
       */
      public Builder clearACCTYPE() {
        bitField3_ = (bitField3_ & ~0x00000008);
        aCCTYPE_ = 0;
        onChanged();
        return this;
      }

      // required int32 DEATHS = 101;
      private int dEATHS_ ;
      /**
       * <code>required int32 DEATHS = 101;</code>
       */
      public boolean hasDEATHS() {
        return ((bitField3_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 DEATHS = 101;</code>
       */
      public int getDEATHS() {
        return dEATHS_;
      }
      /**
       * <code>required int32 DEATHS = 101;</code>
       */
      public Builder setDEATHS(int value) {
        bitField3_ |= 0x00000010;
        dEATHS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 DEATHS = 101;</code>
       */
      public Builder clearDEATHS() {
        bitField3_ = (bitField3_ & ~0x00000010);
        dEATHS_ = 0;
        onChanged();
        return this;
      }

      // required int32 DR_DRINK = 102;
      private int dRDRINK_ ;
      /**
       * <code>required int32 DR_DRINK = 102;</code>
       */
      public boolean hasDRDRINK() {
        return ((bitField3_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 DR_DRINK = 102;</code>
       */
      public int getDRDRINK() {
        return dRDRINK_;
      }
      /**
       * <code>required int32 DR_DRINK = 102;</code>
       */
      public Builder setDRDRINK(int value) {
        bitField3_ |= 0x00000020;
        dRDRINK_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 DR_DRINK = 102;</code>
       */
      public Builder clearDRDRINK() {
        bitField3_ = (bitField3_ & ~0x00000020);
        dRDRINK_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:boa.types.Vehicle)
    }

    static {
      defaultInstance = new Vehicle(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:boa.types.Vehicle)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_boa_types_Crash_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_boa_types_Crash_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_boa_types_Person_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_boa_types_Person_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_boa_types_Vehicle_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_boa_types_Vehicle_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017transport.proto\022\tboa.types\"\302\007\n\005Crash\022\037" +
      "\n\005state\030\001 \002(\0162\020.boa.types.STATE\022\017\n\007ST_CA" +
      "SE\030\002 \002(\005\022\020\n\010VE_TOTAL\030\003 \002(\005\022\020\n\010VE_FORMS\030\004" +
      " \002(\005\022\020\n\010PVH_INVL\030\005 \002(\005\022\014\n\004PEDS\030\006 \002(\005\022\022\n\n" +
      "PERNOTMVIT\030\007 \002(\005\022\017\n\007PERMVIT\030\010 \002(\005\022\024\n\014per" +
      "son_count\030\t \002(\005\022\016\n\006COUNTY\030\n \002(\005\022\014\n\004CITY\030" +
      "\013 \002(\005\022\013\n\003DAY\030\014 \002(\005\022\r\n\005MONTH\030\r \002(\005\022\014\n\004YEA" +
      "R\030\016 \002(\005\022\020\n\010DAY_WEEK\030\017 \002(\005\022\014\n\004HOUR\030\020 \002(\005\022" +
      "\016\n\006MINUTE\030\021 \002(\005\022\013\n\003NHS\030\022 \002(\005\022\017\n\007RUR_URB\030" +
      "\023 \002(\005\022\020\n\010FUNC_SYS\030\024 \002(\005\022\020\n\010RD_OWNER\030\025 \002(",
      "\005\022\r\n\005ROUTE\030\026 \002(\005\022\017\n\007TWAY_ID\030\027 \002(\t\022\020\n\010TWA" +
      "Y_ID2\030\030 \001(\t\022\016\n\006MILEPT\030\031 \002(\005\022\020\n\010LATITUDE\030" +
      "\032 \001(\002\022\020\n\010LONGITUD\030\033 \001(\002\022\016\n\006SP_JUR\030\034 \002(\005\022" +
      "\017\n\007HARM_EV\030\035 \002(\005\022\020\n\010MAN_COLL\030\036 \002(\005\022\017\n\007RE" +
      "LJCT1\030\037 \002(\005\022\017\n\007RELJCT2\030  \002(\005\022\017\n\007TYP_INT\030" +
      "! \002(\005\022\020\n\010WRK_ZONE\030\" \002(\005\022\020\n\010REL_ROAD\030# \002(" +
      "\005\022\020\n\010LGT_COND\030$ \002(\005\022\020\n\010WEATHER1\030% \002(\005\022\020\n" +
      "\010WEATHER2\030& \002(\005\022\017\n\007WEATHER\030\' \002(\005\022\017\n\007SCH_" +
      "BUS\030( \002(\005\022\014\n\004RAIL\030) \002(\t\022\020\n\010NOT_HOUR\030* \002(" +
      "\005\022\017\n\007NOT_MIN\030+ \002(\005\022\020\n\010ARR_HOUR\030, \002(\005\022\017\n\007",
      "ARR_MIN\030- \002(\005\022\017\n\007HOSP_HR\030. \002(\005\022\017\n\007HOSP_M" +
      "N\030/ \002(\005\022\013\n\003CF1\0300 \002(\005\022\013\n\003CF2\0301 \002(\005\022\013\n\003CF3" +
      "\0302 \002(\005\022\016\n\006FATALS\0303 \002(\005\022\020\n\010DRUNK_DR\0304 \002(\005" +
      "\022\"\n\007persons\0305 \003(\0132\021.boa.types.Person\022#\n\007" +
      "vehicle\0306 \003(\0132\022.boa.types.Vehicle\"\232\t\n\006Pe" +
      "rson\022\037\n\005state\030\001 \002(\0162\020.boa.types.STATE\022\017\n" +
      "\007ST_CASE\030\002 \002(\002\022\020\n\010VE_FORMS\030\003 \002(\002\022\016\n\006VEH_" +
      "NO\030\004 \002(\002\022\016\n\006PER_NO\030\005 \002(\002\022\017\n\007STR_VEH\030\006 \002(" +
      "\002\022\016\n\006COUNTY\030\007 \002(\002\022\013\n\003DAY\030\010 \002(\002\022\r\n\005MONTH\030" +
      "\t \002(\002\022\014\n\004HOUR\030\n \002(\002\022\016\n\006MINUTE\030\013 \002(\002\022\017\n\007R",
      "UR_URB\030\014 \002(\002\022\020\n\010FUNC_SYS\030\r \002(\002\022\017\n\007HARM_E" +
      "V\030\016 \002(\002\022\020\n\010MAN_COLL\030\017 \002(\002\022\017\n\007SCH_BUS\030\020 \002" +
      "(\002\022\014\n\004MAKE\030\021 \002(\002\022\017\n\007MAK_MOD\030\022 \002(\002\022\020\n\010BOD" +
      "Y_TYP\030\023 \002(\002\022\020\n\010MOD_YEAR\030\024 \002(\002\022\017\n\007TOW_VEH" +
      "\030\025 \002(\002\022\020\n\010SPEC_USE\030\026 \002(\002\022\020\n\010EMER_USE\030\027 \002" +
      "(\002\022\020\n\010ROLLOVER\030\030 \002(\002\022\017\n\007IMPACT1\030\031 \002(\002\022\020\n" +
      "\010FIRE_EXP\030\032 \002(\002\022\013\n\003AGE\030\033 \002(\002\022\013\n\003SEX\030\034 \002(" +
      "\002\022\017\n\007PER_TYP\030\035 \002(\002\022\017\n\007INJ_SEV\030\036 \002(\002\022\020\n\010S" +
      "EAT_POS\030\037 \002(\002\022\020\n\010REST_USE\030  \002(\002\022\020\n\010REST_" +
      "MIS\030! \002(\002\022\017\n\007AIR_BAG\030\" \002(\002\022\020\n\010EJECTION\030#",
      " \002(\002\022\017\n\007EJ_PATH\030$ \002(\002\022\020\n\010EXTRICAT\030% \002(\002\022" +
      "\020\n\010DRINKING\030& \002(\002\022\017\n\007ALC_DET\030\' \002(\002\022\022\n\nAL" +
      "C_STATUS\030( \002(\002\022\020\n\010ATST_TYP\030) \002(\002\022\017\n\007ALC_" +
      "RES\030* \002(\002\022\r\n\005DRUGS\030+ \002(\002\022\020\n\010DRUG_DET\030, \002" +
      "(\002\022\017\n\007DSTATUS\030- \002(\002\022\020\n\010DRUGTST1\030. \001(\002\022\020\n" +
      "\010DRUGTST2\030/ \001(\002\022\020\n\010DRUGTST3\0300 \001(\002\022\020\n\010DRU" +
      "GRES1\0301 \001(\002\022\020\n\010DRUGRES2\0302 \001(\002\022\020\n\010DRUGRES" +
      "3\0303 \001(\002\022\020\n\010HOSPITAL\0304 \002(\002\022\013\n\003DOA\0305 \002(\002\022\020" +
      "\n\010DEATH_DA\0306 \002(\002\022\020\n\010DEATH_MO\0307 \002(\002\022\020\n\010DE" +
      "ATH_YR\0308 \002(\002\022\020\n\010DEATH_HR\0309 \002(\002\022\020\n\010DEATH_",
      "MN\030: \002(\002\022\020\n\010DEATH_TM\030; \002(\002\022\017\n\007LAG_HRS\030< " +
      "\002(\002\022\020\n\010LAG_MINS\030= \002(\002\022\r\n\005P_SF1\030> \002(\002\022\r\n\005" +
      "P_SF2\030? \001(\002\022\r\n\005P_SF3\030@ \001(\002\022\020\n\010WORK_INJ\030A" +
      " \002(\002\022\020\n\010HISPANIC\030B \002(\002\022\014\n\004RACE\030C \002(\002\022\020\n\010" +
      "LOCATION\030D \002(\002\"\317\r\n\007Vehicle\022\037\n\005state\030\001 \002(" +
      "\0162\020.boa.types.STATE\022\017\n\007ST_CASE\030\002 \002(\005\022\016\n\006" +
      "VEH_NO\030\003 \002(\005\022\020\n\010VE_FORMS\030\004 \002(\005\022\017\n\007NUMOCC" +
      "S\030\005 \002(\005\022\013\n\003DAY\030\006 \002(\005\022\r\n\005MONTH\030\007 \002(\005\022\014\n\004H" +
      "OUR\030\010 \002(\005\022\016\n\006MINUTE\030\t \002(\005\022\017\n\007HARM_EV\030\n \002" +
      "(\005\022\020\n\010MAN_COLL\030\013 \002(\005\022\020\n\010UNITTYPE\030\014 \002(\005\022\017",
      "\n\007HIT_RUN\030\r \002(\005\022\020\n\010REG_STAT\030\016 \002(\005\022\r\n\005OWN" +
      "ER\030\017 \002(\005\022\014\n\004MAKE\030\020 \002(\005\022\r\n\005MODEL\030\021 \002(\005\022\017\n" +
      "\007MAK_MOD\030\022 \002(\005\022\020\n\010BODY_TYP\030\023 \002(\005\022\020\n\010MOD_" +
      "YEAR\030\024 \002(\005\022\013\n\003VIN\030\025 \002(\t\022\r\n\005VIN_1\030\026 \002(\t\022\r" +
      "\n\005VIN_2\030\027 \002(\t\022\r\n\005VIN_3\030\030 \002(\t\022\r\n\005VIN_4\030\031 " +
      "\002(\t\022\r\n\005VIN_5\030\032 \002(\t\022\r\n\005VIN_6\030\033 \002(\t\022\r\n\005VIN" +
      "_7\030\034 \002(\t\022\r\n\005VIN_8\030\035 \002(\t\022\r\n\005VIN_9\030\036 \002(\t\022\016" +
      "\n\006VIN_10\030\037 \002(\t\022\016\n\006VIN_11\030  \002(\t\022\016\n\006VIN_12" +
      "\030! \002(\t\022\017\n\007TOW_VEH\030\" \002(\005\022\017\n\007J_KNIFE\030# \002(\005" +
      "\022\020\n\010MCARR_I1\030$ \002(\t\022\020\n\010MCARR_I2\030% \002(\t\022\020\n\010",
      "MCARR_ID\030& \002(\t\022\014\n\004GVWR\030\' \002(\005\022\020\n\010V_CONFIG" +
      "\030( \002(\005\022\020\n\010CARGO_BT\030) \002(\005\022\017\n\007HAZ_INV\030* \002(" +
      "\005\022\020\n\010HAZ_PLAC\030+ \002(\005\022\016\n\006HAZ_ID\030, \002(\005\022\017\n\007H" +
      "AZ_CNO\030- \002(\005\022\017\n\007HAZ_REL\030. \002(\005\022\017\n\007BUS_USE" +
      "\030/ \002(\005\022\020\n\010SPEC_USE\0300 \002(\005\022\020\n\010EMER_USE\0301 \002" +
      "(\005\022\017\n\007TRAV_SP\0302 \002(\005\022\020\n\010UNDERIDE\0303 \002(\005\022\020\n" +
      "\010ROLLOVER\0304 \002(\005\022\020\n\010ROLINLOC\0305 \002(\005\022\017\n\007IMP" +
      "ACT1\0306 \002(\005\022\020\n\010DEFORMED\0307 \002(\005\022\r\n\005TOWED\0308 " +
      "\002(\005\022\016\n\006M_HARM\0309 \002(\005\022\017\n\007VEH_SC1\030: \002(\005\022\017\n\007" +
      "VEH_SC2\030; \002(\005\022\020\n\010FIRE_EXP\030< \002(\005\022\017\n\007DR_PR",
      "ES\030= \002(\005\022\017\n\007L_STATE\030> \002(\005\022\016\n\006DR_ZIP\030? \002(" +
      "\005\022\020\n\010L_STATUS\030@ \002(\005\022\016\n\006L_TYPE\030A \002(\005\022\020\n\010C" +
      "DL_STAT\030B \002(\005\022\020\n\010L_ENDORS\030C \002(\005\022\017\n\007L_COM" +
      "PL\030D \002(\005\022\020\n\010L_RESTRI\030E \002(\005\022\016\n\006DR_HGT\030F \002" +
      "(\005\022\016\n\006DR_WGT\030G \002(\005\022\020\n\010PREV_ACC\030H \002(\005\022\020\n\010" +
      "PREV_SUS\030I \002(\005\022\020\n\010PREV_DWI\030J \002(\005\022\020\n\010PREV" +
      "_SPD\030K \002(\005\022\020\n\010PREV_OTH\030L \002(\005\022\020\n\010FIRST_MO" +
      "\030M \002(\005\022\020\n\010FIRST_YR\030N \002(\005\022\017\n\007LAST_MO\030O \002(" +
      "\005\022\017\n\007LAST_YR\030P \002(\005\022\020\n\010SPEEDREL\030Q \002(\005\022\016\n\006" +
      "DR_SF1\030R \002(\005\022\016\n\006DR_SF2\030S \001(\005\022\016\n\006DR_SF3\030T",
      " \001(\005\022\016\n\006DR_SF4\030U \001(\005\022\020\n\010VTRAFWAY\030V \002(\005\022\020" +
      "\n\010VNUM_LAN\030W \002(\005\022\020\n\010VSPD_LIM\030X \002(\005\022\016\n\006VA" +
      "LIGN\030Y \002(\005\022\020\n\010VPROFILE\030Z \002(\005\022\020\n\010VPAVETYP" +
      "\030[ \002(\005\022\020\n\010VSURCOND\030\\ \002(\005\022\020\n\010VTRAFCON\030] \002" +
      "(\005\022\020\n\010VTCONT_F\030^ \002(\005\022\020\n\010P_CRASH1\030_ \002(\005\022\020" +
      "\n\010P_CRASH2\030` \002(\005\022\020\n\010P_CRASH3\030a \002(\005\022\017\n\007PC" +
      "RASH4\030b \002(\005\022\017\n\007PCRASH5\030c \002(\005\022\020\n\010ACC_TYPE" +
      "\030d \002(\005\022\016\n\006DEATHS\030e \002(\005\022\020\n\010DR_DRINK\030f \002(\005" +
      "*\230\006\n\005STATE\022\013\n\007Alabama\020\001\022\013\n\007Montana\020\036\022\014\n\010" +
      "Nebraska\020\037\022\n\n\006Alaska\020\002\022\n\n\006Nevada\020 \022\013\n\007Ar",
      "izona\020\004\022\021\n\rNew_Hampshire\020!\022\014\n\010Arkansas\020\005" +
      "\022\016\n\nNew_Jersey\020\"\022\016\n\nCalifornia\020\006\022\016\n\nNew_" +
      "Mexico\020#\022\014\n\010Colorado\020\010\022\014\n\010New_York\020$\022\017\n\013" +
      "Connecticut\020\t\022\022\n\016North_Carolina\020%\022\014\n\010Del" +
      "aware\020\n\022\020\n\014North_Dakota\020&\022\030\n\024District_of" +
      "_Columbia\020\013\022\010\n\004Ohio\020\'\022\013\n\007Florida\020\014\022\014\n\010Ok" +
      "lahoma\020(\022\013\n\007Georgia\020\r\022\n\n\006Oregon\020)\022\n\n\006Haw" +
      "aii\020\017\022\020\n\014Pennsylvania\020*\022\t\n\005Idaho\020\020\022\017\n\013Pu" +
      "erto_Rico\020+\022\014\n\010Illinois\020\021\022\020\n\014Rhode_Islan" +
      "d\020,\022\013\n\007Indiana\020\022\022\022\n\016South_Carolina\020-\022\010\n\004",
      "Iowa\020\023\022\020\n\014South_Dakota\020.\022\n\n\006Kansas\020\024\022\r\n\t" +
      "Tennessee\020/\022\014\n\010Kentucky\020\025\022\t\n\005Texas\0200\022\r\n\t" +
      "Louisiana\020\026\022\010\n\004Utah\0201\022\t\n\005Maine\020\027\022\013\n\007Verm" +
      "ont\0202\022\014\n\010Maryland\020\030\022\022\n\016Virgin_Islands\0204\022" +
      "\021\n\rMassachusetts\020\031\022\014\n\010Virginia\0203\022\014\n\010Mich" +
      "igan\020\032\022\016\n\nWashington\0205\022\r\n\tMinnesota\020\033\022\021\n" +
      "\rWest_Virginia\0206\022\017\n\013Mississippi\020\034\022\r\n\tWis" +
      "consin\0207\022\014\n\010Missouri\020\035\022\013\n\007Wyoming\0208B\002H\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_boa_types_Crash_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_boa_types_Crash_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_boa_types_Crash_descriptor,
              new java.lang.String[] { "State", "STCASE", "VETOTAL", "VEFORMS", "PVHINVL", "PEDS", "PERNOTMVIT", "PERMVIT", "PersonCount", "COUNTY", "CITY", "DAY", "MONTH", "YEAR", "DAYWEEK", "HOUR", "MINUTE", "NHS", "RURURB", "FUNCSYS", "RDOWNER", "ROUTE", "TWAYID", "TWAYID2", "MILEPT", "LATITUDE", "LONGITUD", "SPJUR", "HARMEV", "MANCOLL", "RELJCT1", "RELJCT2", "TYPINT", "WRKZONE", "RELROAD", "LGTCOND", "WEATHER1", "WEATHER2", "WEATHER", "SCHBUS", "RAIL", "NOTHOUR", "NOTMIN", "ARRHOUR", "ARRMIN", "HOSPHR", "HOSPMN", "CF1", "CF2", "CF3", "FATALS", "DRUNKDR", "Persons", "Vehicle", });
          internal_static_boa_types_Person_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_boa_types_Person_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_boa_types_Person_descriptor,
              new java.lang.String[] { "State", "STCASE", "VEFORMS", "VEHNO", "PERNO", "STRVEH", "COUNTY", "DAY", "MONTH", "HOUR", "MINUTE", "RURURB", "FUNCSYS", "HARMEV", "MANCOLL", "SCHBUS", "MAKE", "MAKMOD", "BODYTYP", "MODYEAR", "TOWVEH", "SPECUSE", "EMERUSE", "ROLLOVER", "IMPACT1", "FIREEXP", "AGE", "SEX", "PERTYP", "INJSEV", "SEATPOS", "RESTUSE", "RESTMIS", "AIRBAG", "EJECTION", "EJPATH", "EXTRICAT", "DRINKING", "ALCDET", "ALCSTATUS", "ATSTTYP", "ALCRES", "DRUGS", "DRUGDET", "DSTATUS", "DRUGTST1", "DRUGTST2", "DRUGTST3", "DRUGRES1", "DRUGRES2", "DRUGRES3", "HOSPITAL", "DOA", "DEATHDA", "DEATHMO", "DEATHYR", "DEATHHR", "DEATHMN", "DEATHTM", "LAGHRS", "LAGMINS", "PSF1", "PSF2", "PSF3", "WORKINJ", "HISPANIC", "RACE", "LOCATION", });
          internal_static_boa_types_Vehicle_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_boa_types_Vehicle_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_boa_types_Vehicle_descriptor,
              new java.lang.String[] { "State", "STCASE", "VEHNO", "VEFORMS", "NUMOCCS", "DAY", "MONTH", "HOUR", "MINUTE", "HARMEV", "MANCOLL", "UNITTYPE", "HITRUN", "REGSTAT", "OWNER", "MAKE", "MODEL", "MAKMOD", "BODYTYP", "MODYEAR", "VIN", "VIN1", "VIN2", "VIN3", "VIN4", "VIN5", "VIN6", "VIN7", "VIN8", "VIN9", "VIN10", "VIN11", "VIN12", "TOWVEH", "JKNIFE", "MCARRI1", "MCARRI2", "MCARRID", "GVWR", "VCONFIG", "CARGOBT", "HAZINV", "HAZPLAC", "HAZID", "HAZCNO", "HAZREL", "BUSUSE", "SPECUSE", "EMERUSE", "TRAVSP", "UNDERIDE", "ROLLOVER", "ROLINLOC", "IMPACT1", "DEFORMED", "TOWED", "MHARM", "VEHSC1", "VEHSC2", "FIREEXP", "DRPRES", "LSTATE", "DRZIP", "LSTATUS", "LTYPE", "CDLSTAT", "LENDORS", "LCOMPL", "LRESTRI", "DRHGT", "DRWGT", "PREVACC", "PREVSUS", "PREVDWI", "PREVSPD", "PREVOTH", "FIRSTMO", "FIRSTYR", "LASTMO", "LASTYR", "SPEEDREL", "DRSF1", "DRSF2", "DRSF3", "DRSF4", "VTRAFWAY", "VNUMLAN", "VSPDLIM", "VALIGN", "VPROFILE", "VPAVETYP", "VSURCOND", "VTRAFCON", "VTCONTF", "PCRASH1", "PCRASH2", "PCRASH3", "PCRASH4", "PCRASH5", "ACCTYPE", "DEATHS", "DRDRINK", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
